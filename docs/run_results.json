{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-03-05T04:40:13.081476Z", "invocation_id": "b8cf0abf-d17e-4c11-a5b8-383e8497b1df", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.013205Z", "completed_at": "2024-03-05T04:40:01.055733Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.057240Z", "completed_at": "2024-03-05T04:40:01.057251Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0673069953918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_abandoned_checkout_discount_code_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.050398Z", "completed_at": "2024-03-05T04:40:01.056024Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.057511Z", "completed_at": "2024-03-05T04:40:01.057514Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06607913970947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_abandoned_checkout_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.032968Z", "completed_at": "2024-03-05T04:40:01.056265Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.058501Z", "completed_at": "2024-03-05T04:40:01.058505Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06841111183166504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_abandoned_checkout_shipping_line_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.072492Z", "completed_at": "2024-03-05T04:40:01.078301Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.079621Z", "completed_at": "2024-03-05T04:40:01.079628Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016360044479370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_collection_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.075069Z", "completed_at": "2024-03-05T04:40:01.078560Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.080134Z", "completed_at": "2024-03-05T04:40:01.080137Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0164642333984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_customer_tag_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.069616Z", "completed_at": "2024-03-05T04:40:01.079145Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.080905Z", "completed_at": "2024-03-05T04:40:01.080908Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018524169921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_collection_product_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.084904Z", "completed_at": "2024-03-05T04:40:01.125904Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.126414Z", "completed_at": "2024-03-05T04:40:01.126424Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.043978214263916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_customer_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.119889Z", "completed_at": "2024-03-05T04:40:01.127935Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.131777Z", "completed_at": "2024-03-05T04:40:01.131781Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.048834800720214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_discount_code_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__discount_code_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.122576Z", "completed_at": "2024-03-05T04:40:01.128187Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.132023Z", "completed_at": "2024-03-05T04:40:01.132027Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04864788055419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_event_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_fulfillment_event_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment_event_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.129037Z", "completed_at": "2024-03-05T04:40:01.133627Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.135388Z", "completed_at": "2024-03-05T04:40:01.135392Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011939764022827148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_fulfillment_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.135813Z", "completed_at": "2024-03-05T04:40:01.143338Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.147063Z", "completed_at": "2024-03-05T04:40:01.147069Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013590097427368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_inventory_item_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.139806Z", "completed_at": "2024-03-05T04:40:01.144051Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.148128Z", "completed_at": "2024-03-05T04:40:01.148131Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014315128326416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_inventory_level_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_level_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.144293Z", "completed_at": "2024-03-05T04:40:01.148645Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.150417Z", "completed_at": "2024-03-05T04:40:01.150421Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011331796646118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_location_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__location_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.151053Z", "completed_at": "2024-03-05T04:40:01.158215Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.159641Z", "completed_at": "2024-03-05T04:40:01.159647Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01531529426574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_metafield_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__metafield_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.155204Z", "completed_at": "2024-03-05T04:40:01.159869Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.165705Z", "completed_at": "2024-03-05T04:40:01.165709Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015865087509155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_adjustment_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_adjustment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.160106Z", "completed_at": "2024-03-05T04:40:01.166827Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.171292Z", "completed_at": "2024-03-05T04:40:01.171298Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013496160507202148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_discount_code_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_discount_code_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.167772Z", "completed_at": "2024-03-05T04:40:01.175400Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.176886Z", "completed_at": "2024-03-05T04:40:01.176891Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011779069900512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_line_refund_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_refund_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.172335Z", "completed_at": "2024-03-05T04:40:01.177338Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.181851Z", "completed_at": "2024-03-05T04:40:01.181856Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01195526123046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_line_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.178078Z", "completed_at": "2024-03-05T04:40:01.183136Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.187999Z", "completed_at": "2024-03-05T04:40:01.188003Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012183189392089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_note_attribute_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_note_attribute_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.184049Z", "completed_at": "2024-03-05T04:40:01.191675Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.192923Z", "completed_at": "2024-03-05T04:40:01.192927Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011608123779296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_shipping_line_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.188944Z", "completed_at": "2024-03-05T04:40:01.193150Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.197209Z", "completed_at": "2024-03-05T04:40:01.197214Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01040506362915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_shipping_tax_line_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.194228Z", "completed_at": "2024-03-05T04:40:01.198776Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.202703Z", "completed_at": "2024-03-05T04:40:01.202708Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01436471939086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_tag_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.199059Z", "completed_at": "2024-03-05T04:40:01.206477Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.207824Z", "completed_at": "2024-03-05T04:40:01.207829Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011406898498535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.202949Z", "completed_at": "2024-03-05T04:40:01.208092Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.209919Z", "completed_at": "2024-03-05T04:40:01.209923Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011747121810913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_order_url_tag_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_url_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.210166Z", "completed_at": "2024-03-05T04:40:01.214400Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.218457Z", "completed_at": "2024-03-05T04:40:01.218461Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013598918914794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_price_rule_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__price_rule_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.214620Z", "completed_at": "2024-03-05T04:40:01.218681Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.222894Z", "completed_at": "2024-03-05T04:40:01.222897Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010933876037597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_product_image_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_image_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.219111Z", "completed_at": "2024-03-05T04:40:01.223133Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.224870Z", "completed_at": "2024-03-05T04:40:01.224873Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011811971664428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_product_tag_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.225101Z", "completed_at": "2024-03-05T04:40:01.232826Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.233968Z", "completed_at": "2024-03-05T04:40:01.233972Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013799190521240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_product_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.230115Z", "completed_at": "2024-03-05T04:40:01.234182Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.238033Z", "completed_at": "2024-03-05T04:40:01.238036Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010295867919921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_product_variant_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_variant_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.234403Z", "completed_at": "2024-03-05T04:40:01.238251Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.239927Z", "completed_at": "2024-03-05T04:40:01.239930Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010598182678222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a refund in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_refund_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__refund_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.240158Z", "completed_at": "2024-03-05T04:40:01.251155Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.257069Z", "completed_at": "2024-03-05T04:40:01.257076Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019747018814086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_shop_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__shop_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.251823Z", "completed_at": "2024-03-05T04:40:01.257769Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.262363Z", "completed_at": "2024-03-05T04:40:01.262366Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02024102210998535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_tax_line_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.258536Z", "completed_at": "2024-03-05T04:40:01.262947Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.267062Z", "completed_at": "2024-03-05T04:40:01.267067Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011546134948730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_tender_transaction_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tender_transaction_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.268682Z", "completed_at": "2024-03-05T04:40:01.269867Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.271365Z", "completed_at": "2024-03-05T04:40:01.271369Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006079912185668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.264376Z", "completed_at": "2024-03-05T04:40:01.270118Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.271601Z", "completed_at": "2024-03-05T04:40:01.271604Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011239051818847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"dev\".\"shopify_integration_tests_6\".\"shopify_transaction_data\"", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__transaction_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.271836Z", "completed_at": "2024-03-05T04:40:01.272967Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.274894Z", "completed_at": "2024-03-05T04:40:01.274897Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005594730377197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_discount_code_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.276845Z", "completed_at": "2024-03-05T04:40:01.278821Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.281415Z", "completed_at": "2024-03-05T04:40:01.281420Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008547067642211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.279064Z", "completed_at": "2024-03-05T04:40:01.280100Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.281660Z", "completed_at": "2024-03-05T04:40:01.281663Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008664131164550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_collection_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:00.996797Z", "completed_at": "2024-03-05T04:40:01.256758Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.261338Z", "completed_at": "2024-03-05T04:40:01.261342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2944331169128418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__calendar", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1890\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2019-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date\n\n)\n\nselect * from filtered\n\n", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__calendar\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.281886Z", "completed_at": "2024-03-05T04:40:01.283056Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.285630Z", "completed_at": "2024-03-05T04:40:01.285633Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006536006927490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_collection_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.288053Z", "completed_at": "2024-03-05T04:40:01.289232Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.293909Z", "completed_at": "2024-03-05T04:40:01.293913Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010102987289428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.289698Z", "completed_at": "2024-03-05T04:40:01.291450Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.294308Z", "completed_at": "2024-03-05T04:40:01.294311Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010200023651123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_customer_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.292229Z", "completed_at": "2024-03-05T04:40:01.293310Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.296233Z", "completed_at": "2024-03-05T04:40:01.296236Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01007986068725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_discount_code_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.294519Z", "completed_at": "2024-03-05T04:40:01.295555Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.297929Z", "completed_at": "2024-03-05T04:40:01.297931Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00754094123840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_fulfillment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.300424Z", "completed_at": "2024-03-05T04:40:01.301708Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.306488Z", "completed_at": "2024-03-05T04:40:01.306493Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010345935821533203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_fulfillment_event_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.302245Z", "completed_at": "2024-03-05T04:40:01.303277Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.306892Z", "completed_at": "2024-03-05T04:40:01.306895Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010442972183227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_inventory_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.304069Z", "completed_at": "2024-03-05T04:40:01.305881Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.308801Z", "completed_at": "2024-03-05T04:40:01.308803Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010343074798583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_inventory_level_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.307108Z", "completed_at": "2024-03-05T04:40:01.308125Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.310498Z", "completed_at": "2024-03-05T04:40:01.310501Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008226156234741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_location_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.312944Z", "completed_at": "2024-03-05T04:40:01.314086Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.318664Z", "completed_at": "2024-03-05T04:40:01.318669Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009988069534301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_metafield_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.314534Z", "completed_at": "2024-03-05T04:40:01.315560Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.319058Z", "completed_at": "2024-03-05T04:40:01.319060Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010098934173583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_adjustment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.316339Z", "completed_at": "2024-03-05T04:40:01.318056Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.320980Z", "completed_at": "2024-03-05T04:40:01.320982Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009980201721191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.319277Z", "completed_at": "2024-03-05T04:40:01.320280Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.322659Z", "completed_at": "2024-03-05T04:40:01.322661Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008073091506958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_discount_code_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.325004Z", "completed_at": "2024-03-05T04:40:01.326168Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.330718Z", "completed_at": "2024-03-05T04:40:01.330722Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009825944900512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.326633Z", "completed_at": "2024-03-05T04:40:01.327666Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.331109Z", "completed_at": "2024-03-05T04:40:01.331111Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00994729995727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_line_refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.328440Z", "completed_at": "2024-03-05T04:40:01.330124Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.332973Z", "completed_at": "2024-03-05T04:40:01.332976Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009858131408691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_note_attribute_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.331320Z", "completed_at": "2024-03-05T04:40:01.332317Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.334653Z", "completed_at": "2024-03-05T04:40:01.334655Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008161783218383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.337397Z", "completed_at": "2024-03-05T04:40:01.338603Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.342817Z", "completed_at": "2024-03-05T04:40:01.342823Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01093292236328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_shipping_tax_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.339112Z", "completed_at": "2024-03-05T04:40:01.340195Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.343239Z", "completed_at": "2024-03-05T04:40:01.343241Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011101007461547852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.341010Z", "completed_at": "2024-03-05T04:40:01.342136Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.346106Z", "completed_at": "2024-03-05T04:40:01.346109Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010775089263916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_url_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.343457Z", "completed_at": "2024-03-05T04:40:01.345372Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.347926Z", "completed_at": "2024-03-05T04:40:01.347929Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008842945098876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_price_rule_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.350543Z", "completed_at": "2024-03-05T04:40:01.351986Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.356287Z", "completed_at": "2024-03-05T04:40:01.356292Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010921001434326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.352567Z", "completed_at": "2024-03-05T04:40:01.353677Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.356693Z", "completed_at": "2024-03-05T04:40:01.356695Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011004209518432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_image_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.354561Z", "completed_at": "2024-03-05T04:40:01.355661Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.359408Z", "completed_at": "2024-03-05T04:40:01.359411Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010915994644165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.356906Z", "completed_at": "2024-03-05T04:40:01.358642Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.361270Z", "completed_at": "2024-03-05T04:40:01.361277Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008935213088989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_variant_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.364123Z", "completed_at": "2024-03-05T04:40:01.365461Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.369589Z", "completed_at": "2024-03-05T04:40:01.369594Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010119915008544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.365954Z", "completed_at": "2024-03-05T04:40:01.367047Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.370006Z", "completed_at": "2024-03-05T04:40:01.370008Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010035991668701172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_shop_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.367901Z", "completed_at": "2024-03-05T04:40:01.368969Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.372023Z", "completed_at": "2024-03-05T04:40:01.372026Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009896993637084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_tax_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.370215Z", "completed_at": "2024-03-05T04:40:01.371326Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.373775Z", "completed_at": "2024-03-05T04:40:01.373777Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007822275161743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_tender_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.376371Z", "completed_at": "2024-03-05T04:40:01.378422Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:01.403405Z", "completed_at": "2024-03-05T04:40:01.403414Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.039964914321899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.378945Z", "completed_at": "2024-03-05T04:40:02.678258Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:02.679713Z", "completed_at": "2024-03-05T04:40:02.679716Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4386920928955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    discount_id\n    \n as \n    \n    discount_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        checkout_id,\n        upper(code) as code,\n        discount_id,\n        amount,\n        type,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation, \n        case when checkout_id is null and code is null\n            then row_number() over(partition by source_relation order by index)\n            else row_number() over(partition by checkout_id, upper(code), source_relation order by index desc)\n        end as index\n\n    from fields\n    \n)\n\nselect *\nfrom final\nwhere index = 1", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.418672Z", "completed_at": "2024-03-05T04:40:02.676850Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:02.678026Z", "completed_at": "2024-03-05T04:40:02.678029Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.398529052734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    disjunctive\n    \n as \n    \n    disjunctive\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    rules\n    \n as \n    \n    rules\n    \n, \n    \n    \n    sort_order\n    \n as \n    \n    sort_order\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as collection_id,\n        _fivetran_deleted as is_deleted,\n        case \n            when disjunctive is null then null\n            when disjunctive then 'disjunctive'\n            else 'conjunctive' end as rule_logic,\n        handle,\n        published_scope,\n        rules,\n        sort_order,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(published_at as timestamp) as timestamp)\n) as published_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.391934Z", "completed_at": "2024-03-05T04:40:02.678473Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:02.679969Z", "completed_at": "2024-03-05T04:40:02.679971Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4642000198364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    abandoned_checkout_url\n    \n as \n    \n    abandoned_checkout_url\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    cast(null as TEXT) as \n    \n    billing_address_address_2\n    \n , \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_locale\n    \n as \n    \n    customer_locale\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    presentment_currency\n    \n as \n    \n    presentment_currency\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    cast(null as TEXT) as \n    \n    shipping_address_address_2\n    \n , \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_duties\n    \n as \n    \n    total_duties\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted as is_deleted,\n        abandoned_checkout_url,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        cart_token,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(closed_at as timestamp) as timestamp)\n) as closed_at,\n        currency as shop_currency,\n        customer_id,\n        customer_locale,\n        device_id,\n        email,\n        gateway,\n        id as checkout_id,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        phone,\n        presentment_currency,\n        referring_site,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        token,\n        total_discounts,\n        total_duties,\n        total_line_items_price,\n        total_price,\n        total_tax,\n        total_weight,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        user_id,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:01.404073Z", "completed_at": "2024-03-05T04:40:02.675575Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:02.677731Z", "completed_at": "2024-03-05T04:40:02.677738Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4709012508392334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    delivery_expectation_range\n    \n as \n    \n    delivery_expectation_range\n    \n, \n    \n    \n    delivery_expectation_range_max\n    \n as \n    \n    delivery_expectation_range_max\n    \n, \n    \n    \n    delivery_expectation_range_min\n    \n as \n    \n    delivery_expectation_range_min\n    \n, \n    \n    \n    delivery_expectation_type\n    \n as \n    \n    delivery_expectation_type\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as abandoned_checkout_shipping_line_id,\n        checkout_id,\n        index,\n        carrier_identifier,\n        code as shipping_code,\n        delivery_category,\n        delivery_expectation_range,\n        delivery_expectation_range_max,\n        delivery_expectation_range_min,\n        delivery_expectation_type,\n        discounted_price,\n        phone,\n        price,\n        requested_fulfillment_service_id,\n        source,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:02.848985Z", "completed_at": "2024-03-05T04:40:03.875790Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:03.876301Z", "completed_at": "2024-03-05T04:40:03.876308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1703197956085205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepts_marketing\n    \n as \n    \n    accepts_marketing\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    default_address_id\n    \n as \n    \n    default_address_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    orders_count\n    \n as \n    \n    orders_count\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    total_spent\n    \n as \n    \n    total_spent\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    verified_email\n    \n as \n    \n    verified_email\n    \n, \n    cast(null as timestamp) as \n    \n    email_marketing_consent_consent_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_state\n    \n , \n    cast(null as TEXT) as \n    \n    note\n    \n , \n    cast(null as timestamp) as \n    \n    accepts_marketing_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    marketing_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as customer_id,\n        lower(email) as email,\n        first_name,\n        last_name,\n        orders_count,\n        default_address_id,\n        phone,\n        lower(state) as account_state,\n        tax_exempt as is_tax_exempt,\n        total_spent,\n        verified_email as is_verified_email,\n        note,\n        currency,\n        case \n            when email_marketing_consent_state is null then\n                case \n                    when accepts_marketing is null then null\n                    when accepts_marketing then 'subscribed (legacy)' \n                    else 'not_subscribed (legacy)' end\n            else lower(email_marketing_consent_state) end as marketing_consent_state,\n        lower(coalesce(email_marketing_consent_opt_in_level, marketing_opt_in_level)) as marketing_opt_in_level,\n\n        convert_timezone('UTC', 'UTC',\n    cast(cast(coalesce(accepts_marketing_updated_at, email_marketing_consent_consent_updated_at) as timestamp) as timestamp)\n) as marketing_consent_updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    \n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:02.833261Z", "completed_at": "2024-03-05T04:40:03.926312Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:03.926785Z", "completed_at": "2024-03-05T04:40:03.926788Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2009859085083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    collection_id\n    \n as \n    \n    collection_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        collection_id,\n        product_id,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:02.868661Z", "completed_at": "2024-03-05T04:40:03.925182Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:03.925692Z", "completed_at": "2024-03-05T04:40:03.925697Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.153357982635498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\nwith base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    price_rule_id\n    \n as \n    \n    price_rule_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    usage_count\n    \n as \n    \n    usage_count\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as discount_code_id,\n        upper(code) as code,\n        price_rule_id,\n        usage_count,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__discount_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:02.817679Z", "completed_at": "2024-03-05T04:40:03.899783Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:03.900318Z", "completed_at": "2024-03-05T04:40:03.900323Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2046139240264893, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        index,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:04.024578Z", "completed_at": "2024-03-05T04:40:05.079717Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:05.080397Z", "completed_at": "2024-03-05T04:40:05.080406Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1520130634307861, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment_event_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    estimated_delivery_at\n    \n as \n    \n    estimated_delivery_at\n    \n, \n    \n    \n    fulfillment_id\n    \n as \n    \n    fulfillment_id\n    \n, \n    \n    \n    happened_at\n    \n as \n    \n    happened_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    shop_id\n    \n as \n    \n    shop_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_event_id,\n        fulfillment_id,\n        shop_id,\n        order_id,\n        status,\n        message,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(estimated_delivery_at as timestamp) as timestamp)\n) as estimated_delivery_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(happened_at as timestamp) as timestamp)\n) as happened_at,\n        address_1,\n        city,\n        province,\n        country,\n        zip,\n        latitude,\n        longitude,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:04.039440Z", "completed_at": "2024-03-05T04:40:05.151212Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:05.151825Z", "completed_at": "2024-03-05T04:40:05.151831Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2140820026397705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    service\n    \n as \n    \n    service\n    \n, \n    \n    \n    shipment_status\n    \n as \n    \n    shipment_status\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tracking_company\n    \n as \n    \n    tracking_company\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    tracking_numbers\n    \n as \n    \n    tracking_numbers\n    \n, \n    \n    \n    tracking_urls\n    \n as \n    \n    tracking_urls\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_id,\n        location_id,\n        order_id,\n        name,\n        service,\n        shipment_status,\n        lower(status) as status,\n        tracking_company,\n        tracking_number,\n        tracking_numbers,\n        tracking_urls,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:04.061623Z", "completed_at": "2024-03-05T04:40:05.137413Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:05.137939Z", "completed_at": "2024-03-05T04:40:05.137945Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2340600490570068, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_level_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    available\n    \n as \n    \n    available\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        inventory_item_id,\n        location_id,\n        available as available_quantity,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_level\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:04.051237Z", "completed_at": "2024-03-05T04:40:05.173979Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:05.175244Z", "completed_at": "2024-03-05T04:40:05.175249Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2773802280426025, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    cost\n    \n as \n    \n    cost\n    \n, \n    \n    \n    country_code_of_origin\n    \n as \n    \n    country_code_of_origin\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    province_code_of_origin\n    \n as \n    \n    province_code_of_origin\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    tracked\n    \n as \n    \n    tracked\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as inventory_item_id,\n        sku,\n        _fivetran_deleted as is_deleted, -- won't filter out for now\n        cost,\n        country_code_of_origin,\n        province_code_of_origin,\n        requires_shipping as is_shipping_required,\n        tracked as is_inventory_quantity_tracked,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:05.175488Z", "completed_at": "2024-03-05T04:40:06.293417Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:06.294625Z", "completed_at": "2024-03-05T04:40:06.294629Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2452378273010254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__location_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    legacy\n    \n as \n    \n    legacy\n    \n, \n    \n    \n    localized_country_name\n    \n as \n    \n    localized_country_name\n    \n, \n    \n    \n    localized_province_name\n    \n as \n    \n    localized_province_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as location_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        active as is_active,\n        address_1,\n        address_2,\n        city,\n        country,\n        country_code,\n        country_name,\n        legacy as is_legacy,\n        localized_country_name,\n        localized_province_name,\n        phone,\n        province,\n        province_code,\n        zip,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:05.259165Z", "completed_at": "2024-03-05T04:40:06.279894Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:06.291909Z", "completed_at": "2024-03-05T04:40:06.291916Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.161741018295288, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\nwith base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_adjustment_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_set\n    \n as \n    \n    amount_set\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_amount_set\n    \n as \n    \n    tax_amount_set\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as order_adjustment_id,\n        order_id,\n        refund_id,\n        amount,\n        amount_set,\n        tax_amount,\n        tax_amount_set,\n        kind,\n        reason,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_adjustment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:05.301557Z", "completed_at": "2024-03-05T04:40:06.292472Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:06.293046Z", "completed_at": "2024-03-05T04:40:06.293055Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1200039386749268, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        upper(code) as code,\n        type,\n        amount,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where index = 1 -- Sanity check. index should not > 1 but open an issue if that's not the case in your data\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_discount_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:05.238173Z", "completed_at": "2024-03-05T04:40:06.293899Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:06.294884Z", "completed_at": "2024-03-05T04:40:06.294888Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1848292350769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__metafield_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    namespace\n    \n as \n    \n    namespace\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    owner_resource\n    \n as \n    \n    owner_resource\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as metafield_id,\n        description,\n        namespace,\n        key,\n        value,\n        lower(coalesce(type, value_type)) as value_type,\n        owner_id as owner_resource_id,\n        lower(owner_resource) as owner_resource,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        lower(namespace || '_' || key) as metafield_reference,\n        case when id is null\n            then row_number() over(partition by source_relation order by updated_at desc) = 1\n            else row_number() over(partition by id, source_relation order by updated_at desc) = 1\n        end as is_most_recent_record,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__metafield\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:06.450874Z", "completed_at": "2024-03-05T04:40:07.405222Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:07.405925Z", "completed_at": "2024-03-05T04:40:07.405934Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0643079280853271, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_note_attribute_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        name,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_note_attribute\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:06.426729Z", "completed_at": "2024-03-05T04:40:07.475902Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:07.476618Z", "completed_at": "2024-03-05T04:40:07.476626Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1694471836090088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\nwith base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_refund_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    subtotal_set\n    \n as \n    \n    subtotal_set\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_tax_set\n    \n as \n    \n    total_tax_set\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    restock_type\n    \n as \n    \n    restock_type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as order_line_refund_id,\n        location_id,\n        order_line_id,\n        subtotal,\n        subtotal_set,\n        total_tax,\n        total_tax_set,\n        quantity,\n        refund_id,\n        restock_type,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_refund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:06.461456Z", "completed_at": "2024-03-05T04:40:07.611374Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:07.617795Z", "completed_at": "2024-03-05T04:40:07.617799Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.334463119506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    discounted_price_set\n    \n as \n    \n    discounted_price_set\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_shipping_line_id,\n        order_id,\n        carrier_identifier,\n        code,\n        delivery_category,\n        discounted_price,\n        discounted_price_set,\n        phone,\n        price,\n        price_set,\n        requested_fulfillment_service_id is not null as is_third_party_required,\n        source,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:06.439864Z", "completed_at": "2024-03-05T04:40:07.604784Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:07.617471Z", "completed_at": "2024-03-05T04:40:07.617481Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.344186782836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fulfillable_quantity\n    \n as \n    \n    fulfillable_quantity\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    gift_card\n    \n as \n    \n    gift_card\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    pre_tax_price\n    \n as \n    \n    pre_tax_price\n    \n, \n    cast(null as TEXT) as \n    \n    pre_tax_price_set\n    \n , \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    cast(null as TEXT) as \n    \n    price_set\n    \n , \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    cast(null as TEXT) as \n    \n    tax_code\n    \n , \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    total_discount\n    \n as \n    \n    total_discount\n    \n, \n    cast(null as TEXT) as \n    \n    total_discount_set\n    \n , \n    \n    \n    variant_id\n    \n as \n    \n    variant_id\n    \n, \n    cast(null as TEXT) as \n    \n    variant_title\n    \n , \n    cast(null as TEXT) as \n    \n    variant_inventory_management\n    \n , \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    cast(null as TEXT) as \n    \n    properties\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        id as order_line_id,\n        index,\n        name,\n        order_id,\n        fulfillable_quantity,\n        fulfillment_status,\n        gift_card as is_gift_card,\n        grams,\n        pre_tax_price,\n        pre_tax_price_set,\n        price,\n        price_set,\n        product_id,\n        quantity,\n        requires_shipping as is_shipping_required,\n        sku,\n        taxable as is_taxable,\n        tax_code,\n        title,\n        total_discount,\n        total_discount_set,\n        variant_id,\n        variant_title,\n        variant_inventory_management,\n        vendor,\n        properties,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:07.491658Z", "completed_at": "2024-03-05T04:40:08.446595Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:08.447173Z", "completed_at": "2024-03-05T04:40:08.447181Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1231629848480225, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_shipping_line_id\n    \n as \n    \n    order_shipping_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_shipping_line_id,\n        index,\n        price,\n        price_set,\n        rate,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:07.762151Z", "completed_at": "2024-03-05T04:40:08.681849Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:08.682406Z", "completed_at": "2024-03-05T04:40:08.682411Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0195808410644531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    cast(null as TEXT) as \n    \n    total_discounts_set\n    \n , \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    cast(null as TEXT) as \n    \n    total_line_items_price_set\n    \n , \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    cast(null as TEXT) as \n    \n    total_price_set\n    \n , \n    cast(null as TEXT) as \n    \n    total_tax_set\n    \n , \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    cast(null as float) as \n    \n    total_tip_received\n    \n , \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    cancel_reason\n    \n as \n    \n    cancel_reason\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    checkout_token\n    \n as \n    \n    checkout_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    financial_status\n    \n as \n    \n    financial_status\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    \n    \n    billing_address_address_2\n    \n as \n    \n    billing_address_address_2\n    \n, \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    browser_ip\n    \n as \n    \n    browser_ip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    cast(null as TEXT) as \n    \n    total_shipping_price_set\n    \n , \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    \n    \n    shipping_address_address_2\n    \n as \n    \n    shipping_address_address_2\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as integer) as \n    \n    app_id\n    \n , \n    cast(null as integer) as \n    \n    checkout_id\n    \n , \n    cast(null as TEXT) as \n    \n    client_details_user_agent\n    \n , \n    cast(null as TEXT) as \n    \n    customer_locale\n    \n , \n    cast(null as TEXT) as \n    \n    order_status_url\n    \n , \n    cast(null as TEXT) as \n    \n    presentment_currency\n    \n , \n    cast(null as boolean) as \n    \n    confirmed\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as order_id,\n        user_id,\n        total_discounts,\n        total_discounts_set,\n        total_line_items_price,\n        total_line_items_price_set,\n        total_price,\n        total_price_set,\n        total_tax_set,\n        total_tax,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        total_weight,\n        total_tip_received,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        number,\n        order_number,\n        cancel_reason,\n        cart_token,\n        checkout_token,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(cancelled_at as timestamp) as timestamp)\n) as cancelled_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(closed_at as timestamp) as timestamp)\n) as closed_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(processed_at as timestamp) as timestamp)\n) as processed_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_timestamp,\n        currency,\n        customer_id,\n        lower(email) as email,\n        financial_status,\n        fulfillment_status,\n        referring_site,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        browser_ip,\n        total_shipping_price_set,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        token,\n        app_id,\n        checkout_id,\n        client_details_user_agent,\n        customer_locale,\n        order_status_url,\n        presentment_currency,\n        test as is_test_order,\n        _fivetran_deleted as is_deleted,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        confirmed as is_confirmed,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(is_test_order, false)\nand not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:07.605149Z", "completed_at": "2024-03-05T04:40:08.626126Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:08.640438Z", "completed_at": "2024-03-05T04:40:08.640447Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1916890144348145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:07.777533Z", "completed_at": "2024-03-05T04:40:08.639594Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:08.679585Z", "completed_at": "2024-03-05T04:40:08.679594Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0379259586334229, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_url_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        key,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_url_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:08.626495Z", "completed_at": "2024-03-05T04:40:09.635218Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:09.635945Z", "completed_at": "2024-03-05T04:40:09.635954Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1278660297393799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__price_rule_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allocation_limit\n    \n as \n    \n    allocation_limit\n    \n, \n    \n    \n    allocation_method\n    \n as \n    \n    allocation_method\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    customer_selection\n    \n as \n    \n    customer_selection\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    once_per_customer\n    \n as \n    \n    once_per_customer\n    \n, \n    \n    \n    prerequisite_quantity_range\n    \n as \n    \n    prerequisite_quantity_range\n    \n, \n    \n    \n    prerequisite_shipping_price_range\n    \n as \n    \n    prerequisite_shipping_price_range\n    \n, \n    \n    \n    prerequisite_subtotal_range\n    \n as \n    \n    prerequisite_subtotal_range\n    \n, \n    \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n as \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n, \n    \n    \n    quantity_ratio_entitled_quantity\n    \n as \n    \n    quantity_ratio_entitled_quantity\n    \n, \n    \n    \n    quantity_ratio_prerequisite_quantity\n    \n as \n    \n    quantity_ratio_prerequisite_quantity\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    target_selection\n    \n as \n    \n    target_selection\n    \n, \n    \n    \n    target_type\n    \n as \n    \n    target_type\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    usage_limit\n    \n as \n    \n    usage_limit\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as price_rule_id,\n        allocation_limit,\n        allocation_method,\n        customer_selection,\n        once_per_customer as is_once_per_customer,\n        prerequisite_quantity_range as prereq_min_quantity,\n        prerequisite_shipping_price_range as prereq_max_shipping_price,\n        prerequisite_subtotal_range as prereq_min_subtotal,\n        prerequisite_to_entitlement_purchase_prerequisite_amount as prereq_min_purchase_quantity_for_entitlement,\n        quantity_ratio_entitled_quantity as prereq_buy_x_get_this,\n        quantity_ratio_prerequisite_quantity as prereq_buy_this_get_y,\n        target_selection,\n        target_type,\n        title,\n        usage_limit,\n        value,\n        value_type,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(starts_at as timestamp) as timestamp)\n) as starts_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(ends_at as timestamp) as timestamp)\n) as ends_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__price_rule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:08.816419Z", "completed_at": "2024-03-05T04:40:09.766296Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:09.777933Z", "completed_at": "2024-03-05T04:40:09.777938Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0533018112182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    cast(null as TEXT) as \n    \n    status\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select\n        id as product_id,\n        handle,\n        product_type,\n        published_scope,\n        title,\n        vendor,\n        status,\n        _fivetran_deleted as is_deleted,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(published_at as timestamp) as timestamp)\n) as published_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\nfrom fields\n\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:08.797282Z", "completed_at": "2024-03-05T04:40:09.764937Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:09.766898Z", "completed_at": "2024-03-05T04:40:09.766903Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0890250205993652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        product_id,\n        index,\n        value,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:08.782645Z", "completed_at": "2024-03-05T04:40:09.765409Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:09.767302Z", "completed_at": "2024-03-05T04:40:09.767305Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.104640007019043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_image_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    height\n    \n as \n    \n    height\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    src\n    \n as \n    \n    src\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    variant_ids\n    \n as \n    \n    variant_ids\n    \n, \n    \n    \n    width\n    \n as \n    \n    width\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_image_id,\n        product_id,\n        height,\n        position,\n        src,\n        variant_ids,\n        width,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_image\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:09.767515Z", "completed_at": "2024-03-05T04:40:10.666772Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:10.667596Z", "completed_at": "2024-03-05T04:40:10.667606Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.040196180343628, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_variant_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    image_id\n    \n as \n    \n    image_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    inventory_policy\n    \n as \n    \n    inventory_policy\n    \n, \n    \n    \n    compare_at_price\n    \n as \n    \n    compare_at_price\n    \n, \n    \n    \n    fulfillment_service\n    \n as \n    \n    fulfillment_service\n    \n, \n    \n    \n    inventory_management\n    \n as \n    \n    inventory_management\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    barcode\n    \n as \n    \n    barcode\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    old_inventory_quantity\n    \n as \n    \n    old_inventory_quantity\n    \n, \n    \n    \n    inventory_quantity\n    \n as \n    \n    inventory_quantity\n    \n, \n    \n    \n    weight\n    \n as \n    \n    weight\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    option_1\n    \n as \n    \n    option_1\n    \n, \n    \n    \n    option_2\n    \n as \n    \n    option_2\n    \n, \n    \n    \n    option_3\n    \n as \n    \n    option_3\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as variant_id,\n        product_id,\n        inventory_item_id,\n        image_id,\n        title,\n        price,\n        sku,\n        position,\n        inventory_policy,\n        compare_at_price,\n        fulfillment_service,\n        inventory_management,\n        taxable as is_taxable,\n        barcode,\n        grams,\n        coalesce(inventory_quantity, old_inventory_quantity) as inventory_quantity,\n        weight,\n        weight_unit,\n        option_1,\n        option_2,\n        option_3,\n        tax_code,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_variant\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:09.889605Z", "completed_at": "2024-03-05T04:40:10.885005Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:10.885578Z", "completed_at": "2024-03-05T04:40:10.885585Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1576781272888184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__shop_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    checkout_api_supported\n    \n as \n    \n    checkout_api_supported\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    cookie_consent_level\n    \n as \n    \n    cookie_consent_level\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    county_taxes\n    \n as \n    \n    county_taxes\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_email\n    \n as \n    \n    customer_email\n    \n, \n    \n    \n    domain\n    \n as \n    \n    domain\n    \n, \n    \n    \n    eligible_for_card_reader_giveaway\n    \n as \n    \n    eligible_for_card_reader_giveaway\n    \n, \n    \n    \n    eligible_for_payments\n    \n as \n    \n    eligible_for_payments\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    enabled_presentment_currencies\n    \n as \n    \n    enabled_presentment_currencies\n    \n, \n    \n    \n    google_apps_domain\n    \n as \n    \n    google_apps_domain\n    \n, \n    \n    \n    google_apps_login_enabled\n    \n as \n    \n    google_apps_login_enabled\n    \n, \n    \n    \n    has_discounts\n    \n as \n    \n    has_discounts\n    \n, \n    \n    \n    has_gift_cards\n    \n as \n    \n    has_gift_cards\n    \n, \n    \n    \n    has_storefront\n    \n as \n    \n    has_storefront\n    \n, \n    \n    \n    iana_timezone\n    \n as \n    \n    iana_timezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    money_format\n    \n as \n    \n    money_format\n    \n, \n    \n    \n    money_in_emails_format\n    \n as \n    \n    money_in_emails_format\n    \n, \n    \n    \n    money_with_currency_format\n    \n as \n    \n    money_with_currency_format\n    \n, \n    \n    \n    money_with_currency_in_emails_format\n    \n as \n    \n    money_with_currency_in_emails_format\n    \n, \n    \n    \n    myshopify_domain\n    \n as \n    \n    myshopify_domain\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    password_enabled\n    \n as \n    \n    password_enabled\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    plan_display_name\n    \n as \n    \n    plan_display_name\n    \n, \n    \n    \n    plan_name\n    \n as \n    \n    plan_name\n    \n, \n    \n    \n    pre_launch_enabled\n    \n as \n    \n    pre_launch_enabled\n    \n, \n    \n    \n    primary_locale\n    \n as \n    \n    primary_locale\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    requires_extra_payments_agreement\n    \n as \n    \n    requires_extra_payments_agreement\n    \n, \n    \n    \n    setup_required\n    \n as \n    \n    setup_required\n    \n, \n    \n    \n    shop_owner\n    \n as \n    \n    shop_owner\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    tax_shipping\n    \n as \n    \n    tax_shipping\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as shop_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        address_1,\n        address_2,\n        city,\n        province,\n        province_code,\n        country,\n        country_code,\n        country_name,\n        zip,\n        latitude,\n        longitude,\n        case when county_taxes is null then false else county_taxes end as has_county_taxes,\n        currency,\n        enabled_presentment_currencies,\n        customer_email,\n        email,\n        domain,\n        phone,\n        timezone,\n        iana_timezone,\n        primary_locale,\n        weight_unit,\n        myshopify_domain,\n        cookie_consent_level,\n        shop_owner,\n        source,\n        tax_shipping as has_shipping_taxes,\n        case when taxes_included is null then false else taxes_included end as has_taxes_included_in_price,\n        has_discounts,\n        has_gift_cards,\n        has_storefront,\n        checkout_api_supported as has_checkout_api_supported,\n        eligible_for_card_reader_giveaway as is_eligible_for_card_reader_giveaway,\n        eligible_for_payments as is_eligible_for_payments,\n        google_apps_domain,\n        case when google_apps_login_enabled is null then false else google_apps_login_enabled end as is_google_apps_login_enabled,\n        money_format,\n        money_in_emails_format,\n        money_with_currency_format,\n        money_with_currency_in_emails_format,\n        plan_display_name,\n        plan_name,\n        password_enabled as is_password_enabled,\n        pre_launch_enabled as is_pre_launch_enabled,\n        requires_extra_payments_agreement as is_extra_payments_agreement_required,\n        setup_required as is_setup_required,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(updated_at as timestamp) as timestamp)\n) as updated_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__shop\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:09.870992Z", "completed_at": "2024-03-05T04:40:10.989064Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:10.989705Z", "completed_at": "2024-03-05T04:40:10.989712Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.257200002670288, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made a refund in Shopify\n\nwith base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__refund_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    restock\n    \n as \n    \n    restock\n    \n, \n    \n    \n    total_duties_set\n    \n as \n    \n    total_duties_set\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as refund_id,\n        note,\n        order_id,\n        restock,\n        total_duties_set,\n        user_id,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(processed_at as timestamp) as timestamp)\n) as processed_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__refund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.128382Z", "completed_at": "2024-03-05T04:40:11.140842Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.141491Z", "completed_at": "2024-03-05T04:40:11.141499Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014595985412597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, code, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n    group by checkout_id, code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.143525Z", "completed_at": "2024-03-05T04:40:11.150491Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.151078Z", "completed_at": "2024-03-05T04:40:11.151085Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008817911148071289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.153248Z", "completed_at": "2024-03-05T04:40:11.158004Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.158818Z", "completed_at": "2024-03-05T04:40:11.158825Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006799936294555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection\"\n    group by collection_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.160803Z", "completed_at": "2024-03-05T04:40:11.164668Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.165282Z", "completed_at": "2024-03-05T04:40:11.165288Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005656003952026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection\"\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:09.901763Z", "completed_at": "2024-03-05T04:40:11.047670Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.059946Z", "completed_at": "2024-03-05T04:40:11.059952Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.284888744354248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        index,\n        order_line_id,\n        price,\n        price_set,\n        rate,\n        title,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.179313Z", "completed_at": "2024-03-05T04:40:11.182494Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.183452Z", "completed_at": "2024-03-05T04:40:11.183459Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008941888809204102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout\"\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.176062Z", "completed_at": "2024-03-05T04:40:11.182754Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.183722Z", "completed_at": "2024-03-05T04:40:11.183726Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009768009185791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n    group by checkout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.190186Z", "completed_at": "2024-03-05T04:40:11.194568Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.195821Z", "completed_at": "2024-03-05T04:40:11.195825Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010808706283569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, index, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n    group by checkout_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.197423Z", "completed_at": "2024-03-05T04:40:11.204424Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.204880Z", "completed_at": "2024-03-05T04:40:11.204885Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009186983108520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, product_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_product\"\n    group by collection_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.201207Z", "completed_at": "2024-03-05T04:40:11.209046Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.209511Z", "completed_at": "2024-03-05T04:40:11.209515Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009292125701904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.206359Z", "completed_at": "2024-03-05T04:40:11.210367Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.211379Z", "completed_at": "2024-03-05T04:40:11.211382Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009418964385986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_product\"\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.211604Z", "completed_at": "2024-03-05T04:40:11.219410Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.219904Z", "completed_at": "2024-03-05T04:40:11.219909Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009674787521362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_product\"\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.216338Z", "completed_at": "2024-03-05T04:40:11.220802Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.221774Z", "completed_at": "2024-03-05T04:40:11.221777Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009124755859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_discount_code_id__source_relation.cdfb802172", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__discount_code\"\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.222004Z", "completed_at": "2024-03-05T04:40:11.232299Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.238851Z", "completed_at": "2024-03-05T04:40:11.238857Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018220186233520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_discount_code_id.a5590b867e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__discount_code\"\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.240262Z", "completed_at": "2024-03-05T04:40:11.246657Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.247123Z", "completed_at": "2024-03-05T04:40:11.247127Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007779121398925781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, index, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tag\"\n    group by customer_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.248528Z", "completed_at": "2024-03-05T04:40:11.252707Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.253220Z", "completed_at": "2024-03-05T04:40:11.253224Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005629062652587891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tag\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.255357Z", "completed_at": "2024-03-05T04:40:11.259109Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.259917Z", "completed_at": "2024-03-05T04:40:11.259922Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0061800479888916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tag\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.268225Z", "completed_at": "2024-03-05T04:40:11.275531Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.275995Z", "completed_at": "2024-03-05T04:40:11.276000Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008784055709838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed.c0ab202601", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment_event\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'attempted_delivery','delivered','failure','in_transit','out_for_delivery','ready_for_pickup','picked_up','label_printed','label_purchased','confirmed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.277504Z", "completed_at": "2024-03-05T04:40:11.280759Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.281204Z", "completed_at": "2024-03-05T04:40:11.281208Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004622220993041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation.bbccfe999a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_event_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment_event\"\n    group by fulfillment_event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.282663Z", "completed_at": "2024-03-05T04:40:11.287520Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.287985Z", "completed_at": "2024-03-05T04:40:11.287990Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006259918212890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'pending','open','success','cancelled','error','failure'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.289425Z", "completed_at": "2024-03-05T04:40:11.332137Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.332589Z", "completed_at": "2024-03-05T04:40:11.332595Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.044100046157836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment\"\n    group by fulfillment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.334063Z", "completed_at": "2024-03-05T04:40:11.336892Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.337319Z", "completed_at": "2024-03-05T04:40:11.337323Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0041429996490478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fulfillment_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment\"\nwhere fulfillment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.338683Z", "completed_at": "2024-03-05T04:40:11.342429Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.342869Z", "completed_at": "2024-03-05T04:40:11.342874Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005093812942504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_item_id__location_id__source_relation.30e02799e7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_level\"\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.344545Z", "completed_at": "2024-03-05T04:40:11.347947Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.348414Z", "completed_at": "2024-03-05T04:40:11.348421Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0050048828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_inventory_item_id.fccf494b8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_level\"\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.349960Z", "completed_at": "2024-03-05T04:40:11.354295Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.354782Z", "completed_at": "2024-03-05T04:40:11.354788Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005785942077636719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_location_id.92e79be57f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_level\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.356386Z", "completed_at": "2024-03-05T04:40:11.360094Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.360585Z", "completed_at": "2024-03-05T04:40:11.360592Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0052449703216552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_item\"\n    group by inventory_item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.362274Z", "completed_at": "2024-03-05T04:40:11.365484Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.365924Z", "completed_at": "2024-03-05T04:40:11.365929Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004700899124145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_item\"\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.367374Z", "completed_at": "2024-03-05T04:40:11.370502Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.370995Z", "completed_at": "2024-03-05T04:40:11.371000Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004565000534057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__location\"\n    group by location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.372573Z", "completed_at": "2024-03-05T04:40:11.376900Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.377361Z", "completed_at": "2024-03-05T04:40:11.377368Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00580906867980957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__location\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.378911Z", "completed_at": "2024-03-05T04:40:11.382518Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.383095Z", "completed_at": "2024-03-05T04:40:11.383100Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005166053771972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_adjustment_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_adjustment\"\n    group by order_adjustment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.384764Z", "completed_at": "2024-03-05T04:40:11.388468Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.388961Z", "completed_at": "2024-03-05T04:40:11.388967Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0053119659423828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__code__source_relation.0b164cd5b1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, code, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_discount_code\"\n    group by order_id, code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.390617Z", "completed_at": "2024-03-05T04:40:11.393900Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.394338Z", "completed_at": "2024-03-05T04:40:11.394343Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004794120788574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_discount_code\"\nwhere code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.396006Z", "completed_at": "2024-03-05T04:40:11.400334Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.400813Z", "completed_at": "2024-03-05T04:40:11.400821Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006011009216308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_discount_code\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.402478Z", "completed_at": "2024-03-05T04:40:11.405938Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.406371Z", "completed_at": "2024-03-05T04:40:11.406376Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004881858825683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metafield_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__metafield\"\n    group by metafield_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.408318Z", "completed_at": "2024-03-05T04:40:11.412451Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.412955Z", "completed_at": "2024-03-05T04:40:11.412961Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006106138229370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metafield_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__metafield\"\nwhere metafield_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.414606Z", "completed_at": "2024-03-05T04:40:11.417983Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.418436Z", "completed_at": "2024-03-05T04:40:11.418442Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004805803298950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, name, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_note_attribute\"\n    group by order_id, name, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.419881Z", "completed_at": "2024-03-05T04:40:11.423741Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.424168Z", "completed_at": "2024-03-05T04:40:11.424173Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0052089691162109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_note_attribute\"\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.425729Z", "completed_at": "2024-03-05T04:40:11.428533Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.429006Z", "completed_at": "2024-03-05T04:40:11.429011Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0043299198150634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_note_attribute\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.430555Z", "completed_at": "2024-03-05T04:40:11.433923Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.434414Z", "completed_at": "2024-03-05T04:40:11.434420Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00482487678527832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_refund_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_refund\"\n    group by order_line_refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.436000Z", "completed_at": "2024-03-05T04:40:11.439622Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.440086Z", "completed_at": "2024-03-05T04:40:11.440091Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005064249038696289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by order_shipping_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.441622Z", "completed_at": "2024-03-05T04:40:11.445730Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.446217Z", "completed_at": "2024-03-05T04:40:11.446222Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005579948425292969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\"\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.447802Z", "completed_at": "2024-03-05T04:40:11.451033Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.451487Z", "completed_at": "2024-03-05T04:40:11.451491Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004631996154785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.459857Z", "completed_at": "2024-03-05T04:40:11.463387Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.463871Z", "completed_at": "2024-03-05T04:40:11.463877Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00545811653137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, index, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by order_shipping_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.465789Z", "completed_at": "2024-03-05T04:40:11.470173Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.470633Z", "completed_at": "2024-03-05T04:40:11.470639Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006020784378051758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.478922Z", "completed_at": "2024-03-05T04:40:11.497058Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.498201Z", "completed_at": "2024-03-05T04:40:11.498220Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027202844619750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.500403Z", "completed_at": "2024-03-05T04:40:11.506734Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.515664Z", "completed_at": "2024-03-05T04:40:11.515672Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01977396011352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order\"\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.521743Z", "completed_at": "2024-03-05T04:40:11.542587Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.543425Z", "completed_at": "2024-03-05T04:40:11.543433Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023175954818725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_tag\"\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.545385Z", "completed_at": "2024-03-05T04:40:11.572800Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.574046Z", "completed_at": "2024-03-05T04:40:11.574083Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.031295061111450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_tag\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.588240Z", "completed_at": "2024-03-05T04:40:11.868031Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.880287Z", "completed_at": "2024-03-05T04:40:11.880448Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3015439510345459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_tag\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.890288Z", "completed_at": "2024-03-05T04:40:11.906369Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.906896Z", "completed_at": "2024-03-05T04:40:11.906904Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020086050033569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, key, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_url_tag\"\n    group by order_id, key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.908909Z", "completed_at": "2024-03-05T04:40:11.912058Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.912787Z", "completed_at": "2024-03-05T04:40:11.912806Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0050868988037109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_url_tag\"\nwhere key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.914544Z", "completed_at": "2024-03-05T04:40:11.917790Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.918383Z", "completed_at": "2024-03-05T04:40:11.918389Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0050449371337890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_url_tag\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.920066Z", "completed_at": "2024-03-05T04:40:11.924547Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.925013Z", "completed_at": "2024-03-05T04:40:11.925020Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005986928939819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_target_type__line_item__shipping_line.921059c008", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        target_type as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__price_rule\"\n    group by target_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'line_item','shipping_line'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.926745Z", "completed_at": "2024-03-05T04:40:11.931811Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.932286Z", "completed_at": "2024-03-05T04:40:11.932291Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006662130355834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_value_type__percentage__fixed_amount.65eceed909", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        value_type as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__price_rule\"\n    group by value_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'percentage','fixed_amount'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.933921Z", "completed_at": "2024-03-05T04:40:11.937430Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.937888Z", "completed_at": "2024-03-05T04:40:11.937892Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005009174346923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__price_rule_price_rule_id__source_relation.56ce313bee", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_rule_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__price_rule\"\n    group by price_rule_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.939496Z", "completed_at": "2024-03-05T04:40:11.943034Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.943500Z", "completed_at": "2024-03-05T04:40:11.943510Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005147218704223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__price_rule_price_rule_id.a7160b00e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price_rule_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__price_rule\"\nwhere price_rule_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.945150Z", "completed_at": "2024-03-05T04:40:11.948258Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.948728Z", "completed_at": "2024-03-05T04:40:11.948732Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004589080810546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product\"\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.950165Z", "completed_at": "2024-03-05T04:40:11.954655Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.955338Z", "completed_at": "2024-03-05T04:40:11.955345Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00623011589050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, index, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tag\"\n    group by product_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.957190Z", "completed_at": "2024-03-05T04:40:11.961341Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.961847Z", "completed_at": "2024-03-05T04:40:11.961854Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005852937698364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tag\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.963915Z", "completed_at": "2024-03-05T04:40:11.967288Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.967725Z", "completed_at": "2024-03-05T04:40:11.967730Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00489497184753418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tag\"\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.048165Z", "completed_at": "2024-03-05T04:40:11.883198Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.888340Z", "completed_at": "2024-03-05T04:40:11.888351Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9268338680267334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__transaction_tmp\"\n\n),\n\nfields as (\n\n    select\n\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    payment_avs_result_code\n    \n as \n    \n    payment_avs_result_code\n    \n, \n    \n    \n    payment_credit_card_bin\n    \n as \n    \n    payment_credit_card_bin\n    \n, \n    \n    \n    payment_cvv_result_code\n    \n as \n    \n    payment_cvv_result_code\n    \n, \n    \n    \n    payment_credit_card_number\n    \n as \n    \n    payment_credit_card_number\n    \n, \n    \n    \n    payment_credit_card_company\n    \n as \n    \n    payment_credit_card_company\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    receipt\n    \n as \n    \n    receipt\n    \n, \n    \n    \n    currency_exchange_id\n    \n as \n    \n    currency_exchange_id\n    \n, \n    \n    \n    currency_exchange_adjustment\n    \n as \n    \n    currency_exchange_adjustment\n    \n, \n    \n    \n    currency_exchange_original_amount\n    \n as \n    \n    currency_exchange_original_amount\n    \n, \n    \n    \n    currency_exchange_final_amount\n    \n as \n    \n    currency_exchange_final_amount\n    \n, \n    \n    \n    currency_exchange_currency\n    \n as \n    \n    currency_exchange_currency\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as timestamp) as \n    \n    authorization_expires_at\n    \n , \n    \n    \n        \n            \n            \"authorization\"\n            \n        \n    \n as authorization_code \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as transaction_id,\n        order_id,\n        refund_id,\n        amount,\n        device_id,\n        gateway,\n        source_name,\n        message,\n        currency,\n        location_id,\n        parent_id,\n        payment_avs_result_code,\n        payment_credit_card_bin,\n        payment_cvv_result_code,\n        payment_credit_card_number,\n        payment_credit_card_company,\n        kind,\n        receipt,\n        currency_exchange_id,\n        currency_exchange_adjustment,\n        currency_exchange_original_amount,\n        currency_exchange_final_amount,\n        currency_exchange_currency,\n        error_code,\n        status,\n        user_id,\n        authorization_code,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(created_at as timestamp) as timestamp)\n) as created_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(processed_at as timestamp) as timestamp)\n) as processed_timestamp,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(authorization_expires_at as timestamp) as timestamp)\n) as authorization_expires_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__transaction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.969555Z", "completed_at": "2024-03-05T04:40:11.973979Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.975147Z", "completed_at": "2024-03-05T04:40:11.975151Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010788679122924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_image_product_image_id__source_relation.9614191ead", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_image_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_image\"\n    group by product_image_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.975389Z", "completed_at": "2024-03-05T04:40:11.980743Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.986871Z", "completed_at": "2024-03-05T04:40:11.986876Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012974023818969727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_image_product_image_id.911df72b9c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_image_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_image\"\nwhere product_image_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.989421Z", "completed_at": "2024-03-05T04:40:11.996755Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.997250Z", "completed_at": "2024-03-05T04:40:11.997256Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009814977645874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variant_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_variant\"\n    group by variant_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.993392Z", "completed_at": "2024-03-05T04:40:11.997478Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.998656Z", "completed_at": "2024-03-05T04:40:11.998659Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006723880767822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        shop_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__shop\"\n    group by shop_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:11.226031Z", "completed_at": "2024-03-05T04:40:11.887068Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.889975Z", "completed_at": "2024-03-05T04:40:11.889980Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7834351062774658, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.int_shopify__customer_email_rollup", "compiled": true, "compiled_code": "with customers as (\n\n    select \n        *,\n        row_number() over(partition by email, source_relation order by created_timestamp desc) as customer_index\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer\"\n    where email is not null -- nonsensical to include any null emails here\n\n), customer_tags as (\n\n    select \n        *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tag\"\n\n), rollup_customers as (\n\n    select\n        -- fields to group by\n        lower(customers.email) as email,\n        customers.source_relation,\n\n        -- fields to string agg together\n        \n    listagg(distinct cast(customers.customer_id as TEXT), ', ')\n\n as customer_ids,\n        \n    listagg(distinct cast(customers.phone as TEXT), ', ')\n\n as phone_numbers,\n        \n    listagg(distinct cast(customer_tags.value as TEXT), ', ')\n\n as customer_tags,\n\n        -- fields to take aggregates of\n        min(customers.created_timestamp) as first_account_created_at,\n        max(customers.created_timestamp) as last_account_created_at,\n        max(customers.updated_timestamp) as last_updated_at,\n        max(customers.marketing_consent_updated_at) as marketing_consent_updated_at,\n        max(customers._fivetran_synced) as last_fivetran_synced,\n\n        -- take true if ever given for boolean fields\n        \n\n    bool_or( case when customers.customer_index = 1 then customers.is_tax_exempt else null end )\n\n as is_tax_exempt, -- since this changes every year\n        \n\n    bool_or( customers.is_verified_email )\n\n as is_verified_email\n\n        -- for all other fields, just take the latest value\n        \n        \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.first_name else null end) as first_name\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.last_name else null end) as last_name\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.default_address_id else null end) as default_address_id\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.account_state else null end) as account_state\n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.note else null end) as note\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.currency else null end) as currency\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_consent_state else null end) as marketing_consent_state\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_opt_in_level else null end) as marketing_opt_in_level\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n    from customers \n    left join customer_tags\n        on customers.customer_id = customer_tags.customer_id\n        and customers.source_relation = customer_tags.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom rollup_customers", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"int_shopify__customer_email_rollup\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.000224Z", "completed_at": "2024-03-05T04:40:12.008150Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.010364Z", "completed_at": "2024-03-05T04:40:12.010368Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012580156326293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__shop\"\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:10.808690Z", "completed_at": "2024-03-05T04:40:11.885092Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:11.889263Z", "completed_at": "2024-03-05T04:40:11.889270Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.212925910949707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tender_transaction_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    payment_method\n    \n as \n    \n    payment_method\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    remote_reference\n    \n as \n    \n    remote_reference\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as transaction_id,\n        order_id,\n        amount,\n        currency,\n        payment_method,\n        remote_reference,\n        user_id,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(processed_at as timestamp) as timestamp)\n) as processed_at,\n        convert_timezone('UTC', 'UTC',\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tender_transaction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.012761Z", "completed_at": "2024-03-05T04:40:12.026032Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.027839Z", "completed_at": "2024-03-05T04:40:12.027845Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017956018447875977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__refund\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.016693Z", "completed_at": "2024-03-05T04:40:12.026699Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.028492Z", "completed_at": "2024-03-05T04:40:12.028494Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027426719665527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, index, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line\"\n    group by order_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.020605Z", "completed_at": "2024-03-05T04:40:12.028071Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.039807Z", "completed_at": "2024-03-05T04:40:12.039811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024641990661621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.043049Z", "completed_at": "2024-03-05T04:40:12.051713Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.061115Z", "completed_at": "2024-03-05T04:40:12.061122Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021667003631591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.047495Z", "completed_at": "2024-03-05T04:40:12.057167Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.061627Z", "completed_at": "2024-03-05T04:40:12.061630Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021731138229370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__transaction\"\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.051992Z", "completed_at": "2024-03-05T04:40:12.061360Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.063554Z", "completed_at": "2024-03-05T04:40:12.063557Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017651796340942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_variant\"\n),\n\nproduct_image as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_image\"\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    listagg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    listagg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__products_with_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.057673Z", "completed_at": "2024-03-05T04:40:12.062583Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.065030Z", "completed_at": "2024-03-05T04:40:12.065032Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014913082122802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"int_shopify__customer_email_rollup\"\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.089723Z", "completed_at": "2024-03-05T04:40:12.117630Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.119722Z", "completed_at": "2024-03-05T04:40:12.119728Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05559992790222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__order_lines", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), order_lines as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n\n), product_variants as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_variant\"\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal,\n        \n    listagg(distinct cast(refunds.restock_type as TEXT), ', ')\n\n as restock_types\n    from refunds\n    group by 1,2\n\n), tax_lines as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line\"\n\n), tax_lines_aggregated as (\n\n    select\n        tax_lines.order_line_id,\n        tax_lines.source_relation,\n        sum(tax_lines.price) as order_line_tax\n\n    from tax_lines\n    group by 1,2\n\n), joined as (\n\n    select\n        order_lines.*,\n        \n        refunds_aggregated.restock_types,\n\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n\n        tax_lines_aggregated.order_line_tax\n\n    from order_lines\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n    left join tax_lines_aggregated\n        on tax_lines_aggregated.order_line_id = order_lines.order_line_id\n        and tax_lines_aggregated.source_relation = order_lines.source_relation\n\n\n)\n\nselect *\nfrom joined", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__order_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.107925Z", "completed_at": "2024-03-05T04:40:12.118238Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.120190Z", "completed_at": "2024-03-05T04:40:12.120193Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03667092323303223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__transactions", "compiled": true, "compiled_code": "with transactions as (\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__transaction\"\n\n), tender_transactions as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tender_transaction\"\n\n), joined as (\n    select \n        transactions.*,\n        tender_transactions.payment_method,\n        parent_transactions.created_timestamp as parent_created_timestamp,\n        parent_transactions.kind as parent_kind,\n        parent_transactions.amount as parent_amount,\n        parent_transactions.status as parent_status\n    from transactions\n    left join tender_transactions\n        on transactions.transaction_id = tender_transactions.transaction_id\n        and transactions.source_relation = tender_transactions.source_relation\n    left join transactions as parent_transactions\n        on transactions.parent_id = parent_transactions.transaction_id\n        and transactions.source_relation = parent_transactions.source_relation\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif(\n\n  json_extract_path_text(receipt,'charges','data','0','balance_transaction','exchange_rate')\n\n, '') as numeric(28,6) ),1) as exchange_rate,\n        coalesce(cast(nullif(\n\n  json_extract_path_text(receipt,'charges','data','0','balance_transaction','exchange_rate')\n\n, '') as numeric(28,6) ),1) * amount as currency_exchange_calculated_amount\n    from joined\n\n)\n\nselect *\nfrom exchange_rate", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.114709Z", "completed_at": "2024-03-05T04:40:12.119424Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.125988Z", "completed_at": "2024-03-05T04:40:12.125993Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019756793975830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tender_transaction\"\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.121170Z", "completed_at": "2024-03-05T04:40:12.128173Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.165693Z", "completed_at": "2024-03-05T04:40:12.165700Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.047651052474975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tender_transaction\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.153089Z", "completed_at": "2024-03-05T04:40:12.190746Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.194119Z", "completed_at": "2024-03-05T04:40:12.194125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06733822822570801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n),  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n\n), tax as (\n\n    select\n        *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line\"\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n), validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__shopify__orders__order_line_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.129649Z", "completed_at": "2024-03-05T04:40:12.193407Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.195467Z", "completed_at": "2024-03-05T04:40:12.195470Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0731039047241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n),  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n\n), tax as (\n\n    select\n        *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line\"\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order\"\n\n), order_lines as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_line_aggregates\n\n), order_adjustments as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_adjustment\"\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n), order_discount_code as (\n    \n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_discount_code\"\n\n), discount_aggregates as (\n\n    select \n        order_id,\n        source_relation,\n        sum(case when type = 'shipping' then amount else 0 end) as shipping_discount_amount,\n        sum(case when type = 'percentage' then amount else 0 end) as percentage_calc_discount_amount,\n        sum(case when type = 'shipping' then amount else 0 end) as fixed_amount_discount_amount,\n        count(distinct code) as count_discount_codes_applied\n\n    from order_discount_code\n    group by 1,2\n\n), order_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    listagg(distinct cast(value as TEXT), ', ')\n\n as order_tags\n    \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_tag\"\n    group by 1,2\n\n), order_url_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    listagg(distinct cast(value as TEXT), ', ')\n\n as order_url_tags\n    \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_url_tag\"\n    group by 1,2\n\n), fulfillments as (\n\n    select \n        order_id,\n        source_relation,\n        count(fulfillment_id) as number_of_fulfillments,\n        \n    listagg(distinct cast(service as TEXT), ', ')\n\n as fulfillment_services,\n        \n    listagg(distinct cast(tracking_company as TEXT), ', ')\n\n as tracking_companies,\n        \n    listagg(distinct cast(tracking_number as TEXT), ', ')\n\n as tracking_numbers\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment\"\n    group by 1,2\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast(\n\n  json_extract_path_text(total_shipping_price_set,'shop_money','amount')\n\n as float) ,0) as shipping_cost,\n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n\n        (orders.total_price\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)) as order_adjusted_total,\n        order_lines.line_item_count,\n\n        coalesce(discount_aggregates.shipping_discount_amount, 0) as shipping_discount_amount,\n        coalesce(discount_aggregates.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        coalesce(discount_aggregates.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        coalesce(discount_aggregates.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(order_lines.order_total_shipping_tax, 0) as order_total_shipping_tax,\n        order_tag.order_tags,\n        order_url_tag.order_url_tags,\n        fulfillments.number_of_fulfillments,\n        fulfillments.fulfillment_services,\n        fulfillments.tracking_companies,\n        fulfillments.tracking_numbers\n\n\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    left join discount_aggregates\n        on orders.order_id = discount_aggregates.order_id \n        and orders.source_relation = discount_aggregates.source_relation\n    left join order_tag\n        on orders.order_id = order_tag.order_id\n        and orders.source_relation = order_tag.source_relation\n    left join order_url_tag\n        on orders.order_id = order_url_tag.order_id\n        and orders.source_relation = order_url_tag.source_relation\n    left join fulfillments\n        on orders.order_id = fulfillments.order_id\n        and orders.source_relation = fulfillments.source_relation\n\n), windows as (\n\n    select \n        *,\n        row_number() over (partition by customer_id, source_relation order by created_timestamp) as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.166779Z", "completed_at": "2024-03-05T04:40:12.194579Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.200883Z", "completed_at": "2024-03-05T04:40:12.200887Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07304716110229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__inventory_levels", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), inventory_level as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_level\"\n), \n\ninventory_item as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__inventory_item\"\n),\n\nlocation as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__location\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_variant\"\n),\n\nproduct as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product\"\n),\n\ninventory_level_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n),\n\njoined_info as (\n\n    select \n        inventory_level.*,\n        inventory_item.sku,\n        inventory_item.is_deleted as is_inventory_item_deleted,\n        inventory_item.cost,\n        inventory_item.country_code_of_origin,\n        inventory_item.province_code_of_origin,\n        inventory_item.is_shipping_required,\n        inventory_item.is_inventory_quantity_tracked,\n        inventory_item.created_at as inventory_item_created_at,\n        inventory_item.updated_at as inventory_item_updated_at,\n\n        location.name as location_name, \n        location.is_deleted as is_location_deleted,\n        location.is_active as is_location_active,\n        location.address_1,\n        location.address_2,\n        location.city,\n        location.country,\n        location.country_code,\n        location.is_legacy as is_legacy_location,\n        location.province,\n        location.province_code,\n        location.phone,\n        location.zip,\n        location.created_at as location_created_at,\n        location.updated_at as location_updated_at,\n\n        product_variant.variant_id,\n        product_variant.product_id,\n        product_variant.title as variant_title,\n        product_variant.inventory_policy as variant_inventory_policy,\n        product_variant.price as variant_price,\n        product_variant.image_id as variant_image_id,\n        product_variant.fulfillment_service as variant_fulfillment_service,\n        product_variant.inventory_management as variant_inventory_management,\n        product_variant.is_taxable as is_variant_taxable,\n        product_variant.barcode as variant_barcode,\n        product_variant.grams as variant_grams, \n        product_variant.inventory_quantity as variant_inventory_quantity,\n        product_variant.weight as variant_weight,\n        product_variant.weight_unit as variant_weight_unit,\n        product_variant.option_1 as variant_option_1,\n        product_variant.option_2 as variant_option_2,\n        product_variant.option_3 as variant_option_3,\n        product_variant.tax_code as variant_tax_code,\n        product_variant.created_timestamp as variant_created_at,\n        product_variant.updated_timestamp as variant_updated_at\n\n        \n\n\n\n\n\n    from inventory_level\n    join inventory_item \n        on inventory_level.inventory_item_id = inventory_item.inventory_item_id \n        and inventory_level.source_relation = inventory_item.source_relation \n    join location \n        on inventory_level.location_id = location.location_id \n        and inventory_level.source_relation = location.source_relation \n    join product_variant \n        on inventory_item.inventory_item_id = product_variant.inventory_item_id \n        and inventory_item.source_relation = product_variant.source_relation\n\n),\n\njoined_aggregates as (\n\n    select \n        joined_info.*,\n        coalesce(inventory_level_aggregated.subtotal_sold, 0) as subtotal_sold,\n        coalesce(inventory_level_aggregated.quantity_sold, 0) as quantity_sold,\n        coalesce(inventory_level_aggregated.count_distinct_orders, 0) as count_distinct_orders,\n        coalesce(inventory_level_aggregated.count_distinct_customers, 0) as count_distinct_customers,\n        coalesce(inventory_level_aggregated.count_distinct_customer_emails, 0) as count_distinct_customer_emails,\n        inventory_level_aggregated.first_order_timestamp,\n        inventory_level_aggregated.last_order_timestamp,\n        coalesce(inventory_level_aggregated.subtotal_sold_refunds, 0) as subtotal_sold_refunds,\n        coalesce(inventory_level_aggregated.quantity_sold_refunds, 0) as quantity_sold_refunds\n\n        \n        , coalesce(count_fulfillment_pending, 0) as count_fulfillment_pending\n        \n        , coalesce(count_fulfillment_open, 0) as count_fulfillment_open\n        \n        , coalesce(count_fulfillment_success, 0) as count_fulfillment_success\n        \n        , coalesce(count_fulfillment_cancelled, 0) as count_fulfillment_cancelled\n        \n        , coalesce(count_fulfillment_error, 0) as count_fulfillment_error\n        \n        , coalesce(count_fulfillment_failure, 0) as count_fulfillment_failure\n        \n\n    from joined_info\n    left join inventory_level_aggregated\n        on joined_info.location_id = inventory_level_aggregated.location_id\n        and joined_info.variant_id = inventory_level_aggregated.variant_id\n        and joined_info.source_relation = inventory_level_aggregated.source_relation\n),\n\nfinal as (\n\n    select \n        *,\n        subtotal_sold - subtotal_sold_refunds as net_subtotal_sold,\n        quantity_sold - quantity_sold_refunds as net_quantity_sold\n    from joined_aggregates\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__inventory_levels\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.195918Z", "completed_at": "2024-03-05T04:40:12.201897Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.207711Z", "completed_at": "2024-03-05T04:40:12.207716Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01780414581298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        variant_id, location_id, source_relation\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n    group by variant_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.203682Z", "completed_at": "2024-03-05T04:40:12.223970Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.229841Z", "completed_at": "2024-03-05T04:40:12.229848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.047553062438964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__order_lines_order_line_id__source_relation.2483d5ef95", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__order_lines\"\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.208380Z", "completed_at": "2024-03-05T04:40:12.224304Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.230093Z", "completed_at": "2024-03-05T04:40:12.230096Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04636335372924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__transactions_transaction_id__source_relation.7341b755c0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__transactions\"\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.261678Z", "completed_at": "2024-03-05T04:40:12.266464Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.269046Z", "completed_at": "2024-03-05T04:40:12.269050Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009443283081054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders_order_id__source_relation.b2d1eaf63d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__orders\"\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.271007Z", "completed_at": "2024-03-05T04:40:12.280355Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.369139Z", "completed_at": "2024-03-05T04:40:12.369147Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10157179832458496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__inventory_levels\"\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.274244Z", "completed_at": "2024-03-05T04:40:12.280864Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.369627Z", "completed_at": "2024-03-05T04:40:12.369630Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10168099403381348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__inventory_levels\"\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.277097Z", "completed_at": "2024-03-05T04:40:12.346177Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.370574Z", "completed_at": "2024-03-05T04:40:12.370576Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10220098495483398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__inventory_levels\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.375277Z", "completed_at": "2024-03-05T04:40:12.396902Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.398773Z", "completed_at": "2024-03-05T04:40:12.398781Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027698040008544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n),  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n\n), tax as (\n\n    select\n        *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line\"\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_line_aggregates\n\n), transactions as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        email, source_relation\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.390132Z", "completed_at": "2024-03-05T04:40:12.398519Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.401301Z", "completed_at": "2024-03-05T04:40:12.401304Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02810192108154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n),  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n\n), tax as (\n\n    select\n        *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line\"\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_line_aggregates\n\n), transactions as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tag\"\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    listagg(distinct cast(value as TEXT), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        customer_id, source_relation\n    from __dbt__cte__shopify__customers__order_aggregates\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.424600Z", "completed_at": "2024-03-05T04:40:12.430717Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.433161Z", "completed_at": "2024-03-05T04:40:12.433173Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03069305419921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.404919Z", "completed_at": "2024-03-05T04:40:12.431050Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.434303Z", "completed_at": "2024-03-05T04:40:12.434308Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03259587287902832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__discounts", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n),  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), discount as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__discount_code\"\n),\n\nprice_rule as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__price_rule\"\n),\n\norders_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n),\n\nabandoned_checkouts_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n),\n\ndiscount_price_rule_joined as (\n\n    select\n        discount.*,\n        price_rule.target_selection,\n        price_rule.target_type,\n        price_rule.title,\n        price_rule.usage_limit,\n        price_rule.value,\n        price_rule.value_type,\n        price_rule.allocation_limit,\n        price_rule.allocation_method,\n        price_rule.is_once_per_customer,\n        price_rule.customer_selection,\n        -- the below are NULL if customer_selection = all\n        price_rule.prereq_min_quantity,\n        price_rule.prereq_max_shipping_price,\n        price_rule.prereq_min_subtotal,\n        price_rule.prereq_min_purchase_quantity_for_entitlement,\n        price_rule.prereq_buy_x_get_this,\n        price_rule.prereq_buy_this_get_y,\n        price_rule.starts_at,\n        price_rule.ends_at,\n        price_rule.created_at as price_rule_created_at,\n        price_rule.updated_at as price_rule_updated_at\n\n    from discount\n    left join price_rule\n        on discount.price_rule_id = price_rule.price_rule_id\n        and discount.source_relation = price_rule.source_relation\n),\n\naggregates_joined as (\n\n    select \n        discount_price_rule_joined.*,\n        coalesce(orders_aggregated.count_orders, 0) as count_orders,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        orders_aggregated.avg_order_discount_amount,\n        coalesce(orders_aggregated.total_order_discount_amount, 0) as total_order_discount_amount,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_discount_amount, 0) as total_abandoned_checkout_discount_amount,\n        coalesce(orders_aggregated.total_order_line_items_price, 0) as total_order_line_items_price,\n        coalesce(orders_aggregated.total_order_shipping_cost, 0) as total_order_shipping_cost,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_shipping_price, 0) as total_abandoned_checkout_shipping_price,\n        coalesce(orders_aggregated.total_order_refund_amount, 0) as total_order_refund_amount,\n        coalesce(orders_aggregated.count_customers, 0) as count_customers,\n        coalesce(orders_aggregated.count_customer_emails, 0) as count_customer_emails,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customers, 0) as count_abandoned_checkout_customers,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customer_emails, 0) as count_abandoned_checkout_customer_emails\n\n    from discount_price_rule_joined\n    left join orders_aggregated\n        on discount_price_rule_joined.code = orders_aggregated.code\n        and discount_price_rule_joined.source_relation = orders_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = orders_aggregated.type\n        \n    left join abandoned_checkouts_aggregated\n        on discount_price_rule_joined.code = abandoned_checkouts_aggregated.code\n        and discount_price_rule_joined.source_relation = abandoned_checkouts_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = abandoned_checkouts_aggregated.type \n)\n\nselect * \nfrom aggregates_joined", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__discounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.460249Z", "completed_at": "2024-03-05T04:40:12.480039Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.480610Z", "completed_at": "2024-03-05T04:40:12.480617Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04136514663696289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__products", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_variant\"\n),\n\nproduct_image as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__product_image\"\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    listagg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    listagg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), products as (\n\n    select *\n    from __dbt__cte__int_shopify__products_with_aggregates\n\n), product_order_lines as (\n\n    select *\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(product_order_lines.quantity_sold,0) as total_quantity_sold,\n        coalesce(product_order_lines.subtotal_sold,0) as subtotal_sold,\n        coalesce(product_order_lines.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(product_order_lines.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        product_order_lines.first_order_timestamp,\n        product_order_lines.most_recent_order_timestamp,\n        product_order_lines.avg_quantity_per_order_line as avg_quantity_per_order_line,\n        coalesce(product_order_lines.product_total_discount,0) as product_total_discount,\n        product_order_lines.product_avg_discount_per_order_line as product_avg_discount_per_order_line,\n        coalesce(product_order_lines.product_total_tax,0) as product_total_tax,\n        product_order_lines.product_avg_tax_per_order_line as product_avg_tax_per_order_line\n\n    from products\n    left join product_order_lines\n        on products.product_id = product_order_lines.product_id\n        and products.source_relation = product_order_lines.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.442092Z", "completed_at": "2024-03-05T04:40:12.488451Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.489835Z", "completed_at": "2024-03-05T04:40:12.489841Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05143022537231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__daily_shop", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__daily_orders as (\nwith orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__orders\"\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__order_lines\"\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_timestamp) as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast(date_trunc('day', orders.created_timestamp) as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_shopify__daily_abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_at) as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates\n),  __dbt__cte__int_shopify__daily_fulfillment as (\n\n\nwith fulfillment_event as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__fulfillment_event\"\n),\n\nfulfillment_aggregates as (\n\n    select \n        source_relation,\n        cast(date_trunc('day', happened_at) as date) as date_day\n\n        \n        , count(distinct case when lower(status) = 'attempted_delivery' then fulfillment_id end) as count_fulfillment_attempted_delivery\n        \n        , count(distinct case when lower(status) = 'delivered' then fulfillment_id end) as count_fulfillment_delivered\n        \n        , count(distinct case when lower(status) = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n        , count(distinct case when lower(status) = 'in_transit' then fulfillment_id end) as count_fulfillment_in_transit\n        \n        , count(distinct case when lower(status) = 'out_for_delivery' then fulfillment_id end) as count_fulfillment_out_for_delivery\n        \n        , count(distinct case when lower(status) = 'ready_for_pickup' then fulfillment_id end) as count_fulfillment_ready_for_pickup\n        \n        , count(distinct case when lower(status) = 'picked_up' then fulfillment_id end) as count_fulfillment_picked_up\n        \n        , count(distinct case when lower(status) = 'label_printed' then fulfillment_id end) as count_fulfillment_label_printed\n        \n        , count(distinct case when lower(status) = 'label_purchased' then fulfillment_id end) as count_fulfillment_label_purchased\n        \n        , count(distinct case when lower(status) = 'confirmed' then fulfillment_id end) as count_fulfillment_confirmed\n        \n    \n    from fulfillment_event\n    group by 1,2\n\n)\n\nselect *\nfrom fulfillment_aggregates\n), shop as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__shop\"\n),\n\ncalendar as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__calendar\"\n    where cast(date_trunc('day', date_day) as date) = date_day\n),\n\ndaily_orders as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_orders\n),\n\ndaily_abandoned_checkouts as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_abandoned_checkouts\n),\n\n\ndaily_fulfillment as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_fulfillment\n),\n\n\nshop_calendar as (\n\n    select\n        cast(date_trunc('day', calendar.date_day) as date) as date_day,\n        shop.shop_id,\n        shop.name,\n        shop.domain,\n        shop.is_deleted,\n        shop.currency,\n        shop.enabled_presentment_currencies,\n        shop.iana_timezone,\n        shop.created_at,\n        shop.source_relation\n\n    from calendar\n    join shop \n        on cast(shop.created_at as date) <= calendar.date_day\n),\n\nfinal as (\n\n    select \n        shop_calendar.*,\n\n        coalesce(daily_orders.count_orders, 0) as count_orders,\n        coalesce(daily_orders.count_line_items, 0) as count_line_items,\n        daily_orders.avg_line_item_count,\n        coalesce(daily_orders.count_customers, 0) as count_customers,\n        coalesce(daily_orders.count_customer_emails, 0) as count_customer_emails,\n        coalesce(daily_orders.order_adjusted_total, 0) as order_adjusted_total,\n        daily_orders.avg_order_value,\n        coalesce(daily_orders.shipping_cost, 0) as shipping_cost,\n        coalesce(daily_orders.order_adjustment_amount, 0) as order_adjustment_amount,\n        coalesce(daily_orders.order_adjustment_tax_amount, 0) as order_adjustment_tax_amount,\n        coalesce(daily_orders.refund_subtotal, 0) as refund_subtotal,\n        coalesce(daily_orders.refund_total_tax, 0) as refund_total_tax,\n        coalesce(daily_orders.total_discounts, 0) as total_discounts,\n        daily_orders.avg_discount,\n        coalesce(daily_orders.shipping_discount_amount, 0) as shipping_discount_amount,\n        daily_orders.avg_shipping_discount_amount,\n        coalesce(daily_orders.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        daily_orders.avg_percentage_calc_discount_amount,\n        coalesce(daily_orders.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        daily_orders.avg_fixed_amount_discount_amount,\n        coalesce(daily_orders.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(daily_orders.count_locations_ordered_from, 0) as count_locations_ordered_from,\n        coalesce(daily_orders.count_orders_with_discounts, 0) as count_orders_with_discounts,\n        coalesce(daily_orders.count_orders_with_refunds, 0) as count_orders_with_refunds,\n        daily_orders.first_order_timestamp,\n        daily_orders.last_order_timestamp,\n\n        coalesce(daily_orders.quantity_sold, 0) as quantity_sold,\n        coalesce(daily_orders.quantity_refunded, 0) as quantity_refunded,\n        coalesce(daily_orders.quantity_net, 0) as quantity_net,\n        daily_orders.avg_quantity_sold,\n        daily_orders.avg_quantity_net,\n        coalesce(daily_orders.count_variants_sold, 0) as count_variants_sold,\n        coalesce(daily_orders.count_products_sold, 0) as count_products_sold,\n        coalesce(daily_orders.quantity_gift_cards_sold, 0) as quantity_gift_cards_sold,\n        coalesce(daily_orders.quantity_requiring_shipping, 0) as quantity_requiring_shipping,\n\n        coalesce(daily_abandoned_checkouts.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(daily_abandoned_checkouts.count_customers_abandoned_checkout, 0) as count_customers_abandoned_checkout,\n        coalesce(daily_abandoned_checkouts.count_customer_emails_abandoned_checkout, 0) as count_customer_emails_abandoned_checkout\n\n        \n            \n        , coalesce(count_fulfillment_attempted_delivery, 0) as count_fulfillment_attempted_delivery\n            \n        , coalesce(count_fulfillment_delivered, 0) as count_fulfillment_delivered\n            \n        , coalesce(count_fulfillment_failure, 0) as count_fulfillment_failure\n            \n        , coalesce(count_fulfillment_in_transit, 0) as count_fulfillment_in_transit\n            \n        , coalesce(count_fulfillment_out_for_delivery, 0) as count_fulfillment_out_for_delivery\n            \n        , coalesce(count_fulfillment_ready_for_pickup, 0) as count_fulfillment_ready_for_pickup\n            \n        , coalesce(count_fulfillment_picked_up, 0) as count_fulfillment_picked_up\n            \n        , coalesce(count_fulfillment_label_printed, 0) as count_fulfillment_label_printed\n            \n        , coalesce(count_fulfillment_label_purchased, 0) as count_fulfillment_label_purchased\n            \n        , coalesce(count_fulfillment_confirmed, 0) as count_fulfillment_confirmed\n            \n        \n\n    from shop_calendar\n    left join daily_orders \n        on shop_calendar.source_relation = daily_orders.source_relation\n        and shop_calendar.date_day = daily_orders.date_day\n    left join daily_abandoned_checkouts \n        on shop_calendar.source_relation = daily_abandoned_checkouts.source_relation\n        and shop_calendar.date_day = daily_abandoned_checkouts.date_day\n    \n    left join daily_fulfillment \n        on shop_calendar.source_relation = daily_fulfillment.source_relation\n        and shop_calendar.date_day = daily_fulfillment.date_day\n    \n    \n)\n\n\nselect *\nfrom final", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__daily_shop\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.482185Z", "completed_at": "2024-03-05T04:40:12.495112Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.495941Z", "completed_at": "2024-03-05T04:40:12.495947Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015049934387207031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.491341Z", "completed_at": "2024-03-05T04:40:12.496253Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.498563Z", "completed_at": "2024-03-05T04:40:12.498566Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008665084838867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        code, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__discounts\"\n    group by code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.501435Z", "completed_at": "2024-03-05T04:40:12.510643Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.511252Z", "completed_at": "2024-03-05T04:40:12.511259Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012857913970947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_discount_code_id__source_relation.ddf4da9206", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__discounts\"\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.507535Z", "completed_at": "2024-03-05T04:40:12.512021Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.513348Z", "completed_at": "2024-03-05T04:40:12.513351Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008524894714355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__discounts\"\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.514467Z", "completed_at": "2024-03-05T04:40:12.521501Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.521985Z", "completed_at": "2024-03-05T04:40:12.521991Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009699106216430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__products\"\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.518664Z", "completed_at": "2024-03-05T04:40:12.522201Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.523158Z", "completed_at": "2024-03-05T04:40:12.523161Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005620002746582031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__daily_shop\"\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.281321Z", "completed_at": "2024-03-05T04:40:12.936436Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.937197Z", "completed_at": "2024-03-05T04:40:12.937213Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7130863666534424, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_emails", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n),  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n\n), tax as (\n\n    select\n        *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line\"\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_line_aggregates\n\n), transactions as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), customer_emails as (\n\n    select \n        \"email\",\n  \"source_relation\",\n  \"customer_ids\",\n  \"phone_numbers\",\n  \"customer_tags\",\n  \"first_account_created_at\",\n  \"last_account_created_at\",\n  \"last_updated_at\",\n  \"marketing_consent_updated_at\",\n  \"last_fivetran_synced\",\n  \"is_tax_exempt\",\n  \"is_verified_email\",\n  \"first_name\",\n  \"last_name\",\n  \"default_address_id\",\n  \"account_state\",\n  \"note\",\n  \"currency\",\n  \"marketing_consent_state\",\n  \"marketing_opt_in_level\"\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"int_shopify__customer_email_rollup\"\n\n), orders as (\n\n    select *\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    where email is not null\n\n), abandoned as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n    where email is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customer_emails.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customer_emails\n    left join orders\n        on customer_emails.email = orders.email\n        and customer_emails.source_relation = orders.source_relation\n    left join abandoned\n        on customer_emails.email = abandoned.email\n        and customer_emails.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customer_emails\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.996635Z", "completed_at": "2024-03-05T04:40:13.011054Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:13.012085Z", "completed_at": "2024-03-05T04:40:13.012092Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01829075813293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_email_cohorts", "compiled": true, "compiled_code": "with calendar as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__calendar\"\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n), customers as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customer_emails\"\n\n), orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__orders\"\n\n), customer_calendar as (\n\n    select\n        calendar.date_day as date_month,\n        customers.email,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        date_trunc('month', first_order_timestamp) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.email, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.email = orders.email\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by email, source_relation order by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by email, source_relation order by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by email, source_relation order by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over (partition by email, source_relation order by date_month asc) as cohort_month_number\n    from orders_joined\n        \n), surrogate_key as (\n\n    select \n        *, \n        md5(cast(coalesce(cast(date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customer_email_cohorts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:13.007438Z", "completed_at": "2024-03-05T04:40:13.011325Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:13.012349Z", "completed_at": "2024-03-05T04:40:13.012352Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018458843231201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customer_emails\"\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:13.015698Z", "completed_at": "2024-03-05T04:40:13.024031Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:13.024760Z", "completed_at": "2024-03-05T04:40:13.024765Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01094818115234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customer_email_cohorts\"\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:13.019829Z", "completed_at": "2024-03-05T04:40:13.024525Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:13.025698Z", "completed_at": "2024-03-05T04:40:13.025701Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011313199996948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customer_email_cohorts\"\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:12.379842Z", "completed_at": "2024-03-05T04:40:12.994229Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:12.996313Z", "completed_at": "2024-03-05T04:40:12.996319Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6821508407592773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customers", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n),  __dbt__cte__shopify__orders__order_line_aggregates as (\nwith order_line as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order_line\"\n\n), tax as (\n\n    select\n        *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__tax_line\"\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_line_aggregates\n\n), transactions as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer_tag\"\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    listagg(distinct cast(value as TEXT), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), customers as (\n\n    select \n        \"customer_id\",\n  \"email\",\n  \"first_name\",\n  \"last_name\",\n  \"default_address_id\",\n  \"phone\",\n  \"account_state\",\n  \"is_tax_exempt\",\n  \"is_verified_email\",\n  \"note\",\n  \"currency\",\n  \"marketing_consent_state\",\n  \"marketing_opt_in_level\",\n  \"marketing_consent_updated_at\",\n  \"created_timestamp\",\n  \"updated_timestamp\",\n  \"_fivetran_synced\",\n  \"source_relation\"\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__customer\"\n\n), orders as (\n\n    select *\n    from __dbt__cte__shopify__customers__order_aggregates\n\n), abandoned as (\n\n    select \n        customer_id,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from \"dev\".\"shopify_integration_tests_6_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n    where customer_id is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customers.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.customer_tags,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customers\n    left join orders\n        on customers.customer_id = orders.customer_id\n        and customers.source_relation = orders.source_relation\n    left join abandoned\n        on customers.customer_id = abandoned.customer_id\n        and customers.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:13.057711Z", "completed_at": "2024-03-05T04:40:13.066846Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:13.067847Z", "completed_at": "2024-03-05T04:40:13.067853Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012045145034790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_cohorts", "compiled": true, "compiled_code": "with calendar as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__calendar\"\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n), customers as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customers\"\n\n), orders as (\n\n    select *\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__orders\"\n\n), customer_calendar as (\n\n    select\n        calendar.date_day as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        date_trunc('month', first_order_timestamp) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by customer_id, source_relation order by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over (partition by customer_id, source_relation order by date_month asc) as cohort_month_number\n    from orders_joined\n        \n), surrogate_key as (\n\n    select \n        *, \n        md5(cast(coalesce(cast(date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(customer_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customer_cohorts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:13.063487Z", "completed_at": "2024-03-05T04:40:13.067124Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:13.068101Z", "completed_at": "2024-03-05T04:40:13.068103Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012111186981201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customers\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:13.071146Z", "completed_at": "2024-03-05T04:40:13.078015Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:13.078937Z", "completed_at": "2024-03-05T04:40:13.078942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009608030319213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customer_cohorts\"\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T04:40:13.074967Z", "completed_at": "2024-03-05T04:40:13.078251Z"}, {"name": "execute", "started_at": "2024-03-05T04:40:13.079171Z", "completed_at": "2024-03-05T04:40:13.079174Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009662151336669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"shopify_integration_tests_6_shopify\".\"shopify__customer_cohorts\"\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 12.945242166519165, "args": {"log_level": "info", "populate_cache": true, "cache_selected_only": false, "log_format_file": "debug", "enable_legacy_logger": false, "show_resource_report": false, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests/logs", "strict_mode": false, "invocation_command": "dbt docs generate -t redshift", "warn_error_options": {"include": [], "exclude": []}, "target": "redshift", "version_check": true, "partial_parse": true, "indirect_selection": "eager", "quiet": false, "partial_parse_file_diff": true, "send_anonymous_usage_stats": true, "introspect": true, "use_colors_file": true, "printer_width": 80, "compile": true, "static": false, "favor_state": false, "log_level_file": "debug", "select": [], "profiles_dir": "/Users/avinash.kunnath/.dbt", "static_parser": true, "empty_catalog": false, "macro_debugging": false, "use_colors": true, "vars": {}, "log_format": "default", "log_file_max_bytes": 10485760, "print": true, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "write_json": true, "defer": false, "which": "generate", "exclude": []}}
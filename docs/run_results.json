{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-03-20T17:30:38.703050Z", "invocation_id": "89875267-7b06-4a37-b3d3-dc409ca2ea4d", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.355755Z", "completed_at": "2024-03-20T17:30:33.392144Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.398258Z", "completed_at": "2024-03-20T17:30:33.398266Z"}], "thread_id": "Thread-2", "execution_time": 0.06474709510803223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_abandoned_checkout_discount_code_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.375841Z", "completed_at": "2024-03-20T17:30:33.395357Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.399269Z", "completed_at": "2024-03-20T17:30:33.399273Z"}], "thread_id": "Thread-3", "execution_time": 0.06507301330566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_abandoned_checkout_shipping_line_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.379263Z", "completed_at": "2024-03-20T17:30:33.395760Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.399555Z", "completed_at": "2024-03-20T17:30:33.399559Z"}], "thread_id": "Thread-4", "execution_time": 0.06453299522399902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_abandoned_checkout_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.389258Z", "completed_at": "2024-03-20T17:30:33.396635Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.400640Z", "completed_at": "2024-03-20T17:30:33.400643Z"}], "thread_id": "Thread-7", "execution_time": 0.04187202453613281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_customer_tag_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.386284Z", "completed_at": "2024-03-20T17:30:33.396927Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.400923Z", "completed_at": "2024-03-20T17:30:33.400926Z"}], "thread_id": "Thread-6", "execution_time": 0.048573970794677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_collection_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.383302Z", "completed_at": "2024-03-20T17:30:33.397216Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.401193Z", "completed_at": "2024-03-20T17:30:33.401197Z"}], "thread_id": "Thread-5", "execution_time": 0.04987287521362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_collection_product_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.392483Z", "completed_at": "2024-03-20T17:30:33.398000Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.402520Z", "completed_at": "2024-03-20T17:30:33.402523Z"}], "thread_id": "Thread-8", "execution_time": 0.030608177185058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_customer_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.410663Z", "completed_at": "2024-03-20T17:30:33.430660Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.435909Z", "completed_at": "2024-03-20T17:30:33.435917Z"}], "thread_id": "Thread-2", "execution_time": 0.0321497917175293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_discount_code_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__discount_code_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.415248Z", "completed_at": "2024-03-20T17:30:33.434561Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.438613Z", "completed_at": "2024-03-20T17:30:33.438617Z"}], "thread_id": "Thread-3", "execution_time": 0.03359508514404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_event_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_fulfillment_event_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment_event_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.421474Z", "completed_at": "2024-03-20T17:30:33.434905Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.438890Z", "completed_at": "2024-03-20T17:30:33.438894Z"}], "thread_id": "Thread-7", "execution_time": 0.03256106376647949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_inventory_item_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.418333Z", "completed_at": "2024-03-20T17:30:33.435216Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.439401Z", "completed_at": "2024-03-20T17:30:33.439404Z"}], "thread_id": "Thread-4", "execution_time": 0.03446507453918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_fulfillment_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.424351Z", "completed_at": "2024-03-20T17:30:33.435542Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.439661Z", "completed_at": "2024-03-20T17:30:33.439664Z"}], "thread_id": "Thread-6", "execution_time": 0.033454179763793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_inventory_level_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_level_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.427838Z", "completed_at": "2024-03-20T17:30:33.436279Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.440277Z", "completed_at": "2024-03-20T17:30:33.440279Z"}], "thread_id": "Thread-5", "execution_time": 0.033966064453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_location_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__location_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.431050Z", "completed_at": "2024-03-20T17:30:33.437069Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.441575Z", "completed_at": "2024-03-20T17:30:33.441578Z"}], "thread_id": "Thread-8", "execution_time": 0.034208059310913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_metafield_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__metafield_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.448042Z", "completed_at": "2024-03-20T17:30:33.460269Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.474400Z", "completed_at": "2024-03-20T17:30:33.474407Z"}], "thread_id": "Thread-2", "execution_time": 0.03371691703796387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_adjustment_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_adjustment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.456608Z", "completed_at": "2024-03-20T17:30:33.473466Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.477145Z", "completed_at": "2024-03-20T17:30:33.477149Z"}], "thread_id": "Thread-7", "execution_time": 0.03273606300354004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_line_refund_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_refund_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.453573Z", "completed_at": "2024-03-20T17:30:33.473814Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.477431Z", "completed_at": "2024-03-20T17:30:33.477434Z"}], "thread_id": "Thread-3", "execution_time": 0.0336918830871582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_discount_code_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_discount_code_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.460799Z", "completed_at": "2024-03-20T17:30:33.474087Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.477933Z", "completed_at": "2024-03-20T17:30:33.477936Z"}], "thread_id": "Thread-4", "execution_time": 0.03329896926879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_line_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.463663Z", "completed_at": "2024-03-20T17:30:33.474716Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.478780Z", "completed_at": "2024-03-20T17:30:33.478783Z"}], "thread_id": "Thread-6", "execution_time": 0.034088134765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_note_attribute_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_note_attribute_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.466452Z", "completed_at": "2024-03-20T17:30:33.475571Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.480044Z", "completed_at": "2024-03-20T17:30:33.480048Z"}], "thread_id": "Thread-5", "execution_time": 0.03133988380432129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_shipping_line_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.469648Z", "completed_at": "2024-03-20T17:30:33.476071Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.480871Z", "completed_at": "2024-03-20T17:30:33.480875Z"}], "thread_id": "Thread-8", "execution_time": 0.03126382827758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_shipping_tax_line_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_tax_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.486363Z", "completed_at": "2024-03-20T17:30:33.497965Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.550595Z", "completed_at": "2024-03-20T17:30:33.550602Z"}], "thread_id": "Thread-2", "execution_time": 0.07204389572143555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_tag_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.491870Z", "completed_at": "2024-03-20T17:30:33.546814Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.553845Z", "completed_at": "2024-03-20T17:30:33.553848Z"}], "thread_id": "Thread-7", "execution_time": 0.07140898704528809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.494837Z", "completed_at": "2024-03-20T17:30:33.547125Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.554401Z", "completed_at": "2024-03-20T17:30:33.554404Z"}], "thread_id": "Thread-3", "execution_time": 0.07175016403198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_order_url_tag_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_url_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.498255Z", "completed_at": "2024-03-20T17:30:33.550903Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.555463Z", "completed_at": "2024-03-20T17:30:33.555467Z"}], "thread_id": "Thread-4", "execution_time": 0.07254600524902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_price_rule_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__price_rule_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.501398Z", "completed_at": "2024-03-20T17:30:33.552404Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.557052Z", "completed_at": "2024-03-20T17:30:33.557055Z"}], "thread_id": "Thread-6", "execution_time": 0.069976806640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_product_image_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_image_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.543466Z", "completed_at": "2024-03-20T17:30:33.552676Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.557322Z", "completed_at": "2024-03-20T17:30:33.557325Z"}], "thread_id": "Thread-5", "execution_time": 0.06962203979492188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_product_tag_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.547412Z", "completed_at": "2024-03-20T17:30:33.554138Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.558773Z", "completed_at": "2024-03-20T17:30:33.558776Z"}], "thread_id": "Thread-8", "execution_time": 0.07040691375732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_product_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.562766Z", "completed_at": "2024-03-20T17:30:33.575538Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.589041Z", "completed_at": "2024-03-20T17:30:33.589048Z"}], "thread_id": "Thread-2", "execution_time": 0.033709049224853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_product_variant_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_variant_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.571683Z", "completed_at": "2024-03-20T17:30:33.586144Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.591874Z", "completed_at": "2024-03-20T17:30:33.591878Z"}], "thread_id": "Thread-3", "execution_time": 0.03218388557434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_shop_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__shop_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.568259Z", "completed_at": "2024-03-20T17:30:33.586420Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.592605Z", "completed_at": "2024-03-20T17:30:33.592609Z"}], "thread_id": "Thread-7", "execution_time": 0.034114837646484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a refund in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_refund_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__refund_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.586761Z", "completed_at": "2024-03-20T17:30:33.588733Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.592893Z", "completed_at": "2024-03-20T17:30:33.592897Z"}], "thread_id": "Thread-8", "execution_time": 0.024219751358032227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.576299Z", "completed_at": "2024-03-20T17:30:33.589481Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.593517Z", "completed_at": "2024-03-20T17:30:33.593520Z"}], "thread_id": "Thread-4", "execution_time": 0.030323028564453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_tax_line_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tax_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.580064Z", "completed_at": "2024-03-20T17:30:33.590081Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.594289Z", "completed_at": "2024-03-20T17:30:33.594293Z"}], "thread_id": "Thread-6", "execution_time": 0.0299072265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_tender_transaction_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tender_transaction_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.583194Z", "completed_at": "2024-03-20T17:30:33.590332Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.594568Z", "completed_at": "2024-03-20T17:30:33.594571Z"}], "thread_id": "Thread-5", "execution_time": 0.030055999755859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_56\".\"shopify_transaction_data\"", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__transaction_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.600868Z", "completed_at": "2024-03-20T17:30:33.602298Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.609677Z", "completed_at": "2024-03-20T17:30:33.609682Z"}], "thread_id": "Thread-2", "execution_time": 0.01999497413635254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_discount_code_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.604884Z", "completed_at": "2024-03-20T17:30:33.606101Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.616347Z", "completed_at": "2024-03-20T17:30:33.616350Z"}], "thread_id": "Thread-3", "execution_time": 0.01918482780456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.606829Z", "completed_at": "2024-03-20T17:30:33.607977Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.617053Z", "completed_at": "2024-03-20T17:30:33.617056Z"}], "thread_id": "Thread-7", "execution_time": 0.019220829010009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_collection_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.608258Z", "completed_at": "2024-03-20T17:30:33.609404Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.617304Z", "completed_at": "2024-03-20T17:30:33.617306Z"}], "thread_id": "Thread-8", "execution_time": 0.019298076629638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_collection_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.609949Z", "completed_at": "2024-03-20T17:30:33.611826Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.617804Z", "completed_at": "2024-03-20T17:30:33.617806Z"}], "thread_id": "Thread-4", "execution_time": 0.01799297332763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.612336Z", "completed_at": "2024-03-20T17:30:33.613450Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.618574Z", "completed_at": "2024-03-20T17:30:33.618577Z"}], "thread_id": "Thread-6", "execution_time": 0.018078088760375977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_customer_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.613757Z", "completed_at": "2024-03-20T17:30:33.614868Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.618827Z", "completed_at": "2024-03-20T17:30:33.618830Z"}], "thread_id": "Thread-5", "execution_time": 0.0182039737701416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_discount_code_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.624895Z", "completed_at": "2024-03-20T17:30:33.626298Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.634371Z", "completed_at": "2024-03-20T17:30:33.634376Z"}], "thread_id": "Thread-2", "execution_time": 0.0202486515045166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_fulfillment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.628836Z", "completed_at": "2024-03-20T17:30:33.630032Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.640841Z", "completed_at": "2024-03-20T17:30:33.640844Z"}], "thread_id": "Thread-3", "execution_time": 0.019551992416381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_fulfillment_event_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.630765Z", "completed_at": "2024-03-20T17:30:33.632707Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.641527Z", "completed_at": "2024-03-20T17:30:33.641530Z"}], "thread_id": "Thread-7", "execution_time": 0.019613027572631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_inventory_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.632993Z", "completed_at": "2024-03-20T17:30:33.634097Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.641784Z", "completed_at": "2024-03-20T17:30:33.641787Z"}], "thread_id": "Thread-8", "execution_time": 0.019655942916870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_inventory_level_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.634629Z", "completed_at": "2024-03-20T17:30:33.635757Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.642281Z", "completed_at": "2024-03-20T17:30:33.642283Z"}], "thread_id": "Thread-4", "execution_time": 0.01839303970336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_location_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.636257Z", "completed_at": "2024-03-20T17:30:33.637374Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.643050Z", "completed_at": "2024-03-20T17:30:33.643053Z"}], "thread_id": "Thread-6", "execution_time": 0.01848602294921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_metafield_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.637645Z", "completed_at": "2024-03-20T17:30:33.639400Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.643304Z", "completed_at": "2024-03-20T17:30:33.643306Z"}], "thread_id": "Thread-5", "execution_time": 0.01858997344970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_adjustment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.649099Z", "completed_at": "2024-03-20T17:30:33.650407Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.657626Z", "completed_at": "2024-03-20T17:30:33.657631Z"}], "thread_id": "Thread-2", "execution_time": 0.019344806671142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.652886Z", "completed_at": "2024-03-20T17:30:33.654087Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.664368Z", "completed_at": "2024-03-20T17:30:33.664372Z"}], "thread_id": "Thread-3", "execution_time": 0.01888895034790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_discount_code_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.654807Z", "completed_at": "2024-03-20T17:30:33.655932Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.665058Z", "completed_at": "2024-03-20T17:30:33.665061Z"}], "thread_id": "Thread-7", "execution_time": 0.018971920013427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.656210Z", "completed_at": "2024-03-20T17:30:33.657347Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.665379Z", "completed_at": "2024-03-20T17:30:33.665382Z"}], "thread_id": "Thread-8", "execution_time": 0.0190579891204834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_line_refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.657887Z", "completed_at": "2024-03-20T17:30:33.659748Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.665886Z", "completed_at": "2024-03-20T17:30:33.665889Z"}], "thread_id": "Thread-4", "execution_time": 0.017935991287231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_note_attribute_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.660310Z", "completed_at": "2024-03-20T17:30:33.661499Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.666656Z", "completed_at": "2024-03-20T17:30:33.666659Z"}], "thread_id": "Thread-6", "execution_time": 0.018046140670776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.661780Z", "completed_at": "2024-03-20T17:30:33.662896Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.666908Z", "completed_at": "2024-03-20T17:30:33.666911Z"}], "thread_id": "Thread-5", "execution_time": 0.01817488670349121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_shipping_tax_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.672706Z", "completed_at": "2024-03-20T17:30:33.673989Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.681944Z", "completed_at": "2024-03-20T17:30:33.681948Z"}], "thread_id": "Thread-2", "execution_time": 0.019136905670166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.676453Z", "completed_at": "2024-03-20T17:30:33.677670Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.687782Z", "completed_at": "2024-03-20T17:30:33.687786Z"}], "thread_id": "Thread-3", "execution_time": 0.01873469352722168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_url_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.678388Z", "completed_at": "2024-03-20T17:30:33.680252Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.688568Z", "completed_at": "2024-03-20T17:30:33.688571Z"}], "thread_id": "Thread-7", "execution_time": 0.01891779899597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_price_rule_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.680540Z", "completed_at": "2024-03-20T17:30:33.681675Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.688834Z", "completed_at": "2024-03-20T17:30:33.688837Z"}], "thread_id": "Thread-8", "execution_time": 0.019035816192626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.682205Z", "completed_at": "2024-03-20T17:30:33.683319Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.689349Z", "completed_at": "2024-03-20T17:30:33.689352Z"}], "thread_id": "Thread-4", "execution_time": 0.018787145614624023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_image_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.683815Z", "completed_at": "2024-03-20T17:30:33.684947Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.690196Z", "completed_at": "2024-03-20T17:30:33.690200Z"}], "thread_id": "Thread-6", "execution_time": 0.018986940383911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.685219Z", "completed_at": "2024-03-20T17:30:33.686343Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.690475Z", "completed_at": "2024-03-20T17:30:33.690478Z"}], "thread_id": "Thread-5", "execution_time": 0.019129276275634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_variant_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.697463Z", "completed_at": "2024-03-20T17:30:33.698748Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.706339Z", "completed_at": "2024-03-20T17:30:33.706344Z"}], "thread_id": "Thread-2", "execution_time": 0.030939102172851562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.701419Z", "completed_at": "2024-03-20T17:30:33.702711Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.723206Z", "completed_at": "2024-03-20T17:30:33.723210Z"}], "thread_id": "Thread-3", "execution_time": 0.03000617027282715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_shop_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.703478Z", "completed_at": "2024-03-20T17:30:33.704622Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.723939Z", "completed_at": "2024-03-20T17:30:33.723942Z"}], "thread_id": "Thread-7", "execution_time": 0.030103206634521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_tax_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.704902Z", "completed_at": "2024-03-20T17:30:33.706056Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.724202Z", "completed_at": "2024-03-20T17:30:33.724205Z"}], "thread_id": "Thread-8", "execution_time": 0.03019881248474121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_tender_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.706607Z", "completed_at": "2024-03-20T17:30:33.708531Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.725294Z", "completed_at": "2024-03-20T17:30:33.725297Z"}], "thread_id": "Thread-4", "execution_time": 0.029059171676635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.338473Z", "completed_at": "2024-03-20T17:30:33.961266Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:33.961816Z", "completed_at": "2024-03-20T17:30:33.961821Z"}], "thread_id": "Thread-1", "execution_time": 0.6852951049804688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__calendar", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1905\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2019-01-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date\n\n)\n\nselect * from filtered\n\n", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__calendar\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.709081Z", "completed_at": "2024-03-20T17:30:34.370050Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:34.428944Z", "completed_at": "2024-03-20T17:30:34.428950Z"}], "thread_id": "Thread-6", "execution_time": 0.7827911376953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    discount_id\n    \n as \n    \n    discount_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        checkout_id,\n        upper(code) as code,\n        discount_id,\n        amount,\n        type,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation, \n        case when checkout_id is null and code is null and index is null\n            then row_number() over(partition by source_relation order by source_relation)\n            else row_number() over(partition by checkout_id, upper(code), source_relation order by index desc)\n        end as index\n\n    from fields\n    \n)\n\nselect *\nfrom final\nwhere index = 1", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.731340Z", "completed_at": "2024-03-20T17:30:34.430415Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:34.433646Z", "completed_at": "2024-03-20T17:30:34.433650Z"}], "thread_id": "Thread-2", "execution_time": 0.7638227939605713, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    abandoned_checkout_url\n    \n as \n    \n    abandoned_checkout_url\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    cast(null as TEXT) as \n    \n    billing_address_address_2\n    \n , \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_locale\n    \n as \n    \n    customer_locale\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    presentment_currency\n    \n as \n    \n    presentment_currency\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    cast(null as TEXT) as \n    \n    shipping_address_address_2\n    \n , \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_duties\n    \n as \n    \n    total_duties\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted as is_deleted,\n        abandoned_checkout_url,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        cart_token,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(closed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as closed_at,\n        currency as shop_currency,\n        customer_id,\n        customer_locale,\n        device_id,\n        email,\n        gateway,\n        id as checkout_id,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        phone,\n        presentment_currency,\n        referring_site,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        token,\n        total_discounts,\n        total_duties,\n        total_line_items_price,\n        total_price,\n        total_tax,\n        total_weight,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        user_id,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.739642Z", "completed_at": "2024-03-20T17:30:34.428300Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:34.432089Z", "completed_at": "2024-03-20T17:30:34.432093Z"}], "thread_id": "Thread-3", "execution_time": 0.7638683319091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        index,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.717228Z", "completed_at": "2024-03-20T17:30:34.416910Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:34.430684Z", "completed_at": "2024-03-20T17:30:34.430689Z"}], "thread_id": "Thread-5", "execution_time": 0.7944698333740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    delivery_expectation_range\n    \n as \n    \n    delivery_expectation_range\n    \n, \n    \n    \n    delivery_expectation_range_max\n    \n as \n    \n    delivery_expectation_range_max\n    \n, \n    \n    \n    delivery_expectation_range_min\n    \n as \n    \n    delivery_expectation_range_min\n    \n, \n    \n    \n    delivery_expectation_type\n    \n as \n    \n    delivery_expectation_type\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as abandoned_checkout_shipping_line_id,\n        checkout_id,\n        index,\n        carrier_identifier,\n        code as shipping_code,\n        delivery_category,\n        delivery_expectation_range,\n        delivery_expectation_range_max,\n        delivery_expectation_range_min,\n        delivery_expectation_type,\n        discounted_price,\n        phone,\n        price,\n        requested_fulfillment_service_id,\n        source,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.750391Z", "completed_at": "2024-03-20T17:30:34.389267Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:34.429264Z", "completed_at": "2024-03-20T17:30:34.429271Z"}], "thread_id": "Thread-8", "execution_time": 0.7646911144256592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    collection_id\n    \n as \n    \n    collection_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        collection_id,\n        product_id,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.755013Z", "completed_at": "2024-03-20T17:30:34.429575Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:34.432895Z", "completed_at": "2024-03-20T17:30:34.432899Z"}], "thread_id": "Thread-4", "execution_time": 0.7596311569213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepts_marketing\n    \n as \n    \n    accepts_marketing\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    default_address_id\n    \n as \n    \n    default_address_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    orders_count\n    \n as \n    \n    orders_count\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    total_spent\n    \n as \n    \n    total_spent\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    verified_email\n    \n as \n    \n    verified_email\n    \n, \n    cast(null as timestamp) as \n    \n    email_marketing_consent_consent_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_state\n    \n , \n    cast(null as TEXT) as \n    \n    note\n    \n , \n    cast(null as timestamp) as \n    \n    accepts_marketing_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    marketing_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as customer_id,\n        lower(email) as email,\n        first_name,\n        last_name,\n        orders_count,\n        default_address_id,\n        phone,\n        lower(state) as account_state,\n        tax_exempt as is_tax_exempt,\n        total_spent,\n        verified_email as is_verified_email,\n        note,\n        currency,\n        case \n            when email_marketing_consent_state is null then\n                case \n                    when accepts_marketing is null then null\n                    when accepts_marketing then 'subscribed (legacy)' \n                    else 'not_subscribed (legacy)' end\n            else lower(email_marketing_consent_state) end as marketing_consent_state,\n        lower(coalesce(email_marketing_consent_opt_in_level, marketing_opt_in_level)) as marketing_opt_in_level,\n\n        cast(\n    cast(cast(coalesce(accepts_marketing_updated_at, email_marketing_consent_consent_updated_at) as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as marketing_consent_updated_at,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:33.744375Z", "completed_at": "2024-03-20T17:30:34.427947Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:34.431792Z", "completed_at": "2024-03-20T17:30:34.431797Z"}], "thread_id": "Thread-7", "execution_time": 0.7671430110931396, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    disjunctive\n    \n as \n    \n    disjunctive\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    rules\n    \n as \n    \n    rules\n    \n, \n    \n    \n    sort_order\n    \n as \n    \n    sort_order\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as collection_id,\n        _fivetran_deleted as is_deleted,\n        case \n            when disjunctive is null then null\n            when disjunctive then 'disjunctive'\n            else 'conjunctive' end as rule_logic,\n        handle,\n        published_scope,\n        rules,\n        sort_order,\n        title,\n        cast(\n    cast(cast(published_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as published_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:34.021450Z", "completed_at": "2024-03-20T17:30:34.548627Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:34.549795Z", "completed_at": "2024-03-20T17:30:34.549800Z"}], "thread_id": "Thread-1", "execution_time": 0.5720491409301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    price_rule_id\n    \n as \n    \n    price_rule_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    usage_count\n    \n as \n    \n    usage_count\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as discount_code_id,\n        upper(code) as code,\n        price_rule_id,\n        usage_count,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__discount_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:34.483784Z", "completed_at": "2024-03-20T17:30:35.096244Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.096770Z", "completed_at": "2024-03-20T17:30:35.096775Z"}], "thread_id": "Thread-6", "execution_time": 0.6680738925933838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment_event_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    estimated_delivery_at\n    \n as \n    \n    estimated_delivery_at\n    \n, \n    \n    \n    fulfillment_id\n    \n as \n    \n    fulfillment_id\n    \n, \n    \n    \n    happened_at\n    \n as \n    \n    happened_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    shop_id\n    \n as \n    \n    shop_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_event_id,\n        fulfillment_id,\n        shop_id,\n        order_id,\n        status,\n        message,\n        cast(\n    cast(cast(estimated_delivery_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as estimated_delivery_at,\n        cast(\n    cast(cast(happened_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as happened_at,\n        address_1,\n        city,\n        province,\n        country,\n        zip,\n        latitude,\n        longitude,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:34.520897Z", "completed_at": "2024-03-20T17:30:35.150573Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.160653Z", "completed_at": "2024-03-20T17:30:35.160658Z"}], "thread_id": "Thread-8", "execution_time": 0.7292690277099609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__location_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    legacy\n    \n as \n    \n    legacy\n    \n, \n    \n    \n    localized_country_name\n    \n as \n    \n    localized_country_name\n    \n, \n    \n    \n    localized_province_name\n    \n as \n    \n    localized_province_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as location_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        active as is_active,\n        address_1,\n        address_2,\n        city,\n        country,\n        country_code,\n        country_name,\n        legacy as is_legacy,\n        localized_country_name,\n        localized_province_name,\n        phone,\n        province,\n        province_code,\n        zip,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:34.508567Z", "completed_at": "2024-03-20T17:30:35.198221Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.200243Z", "completed_at": "2024-03-20T17:30:35.200248Z"}], "thread_id": "Thread-3", "execution_time": 0.7533109188079834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    service\n    \n as \n    \n    service\n    \n, \n    \n    \n    shipment_status\n    \n as \n    \n    shipment_status\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tracking_company\n    \n as \n    \n    tracking_company\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    tracking_numbers\n    \n as \n    \n    tracking_numbers\n    \n, \n    \n    \n    tracking_urls\n    \n as \n    \n    tracking_urls\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_id,\n        location_id,\n        order_id,\n        name,\n        service,\n        shipment_status,\n        lower(status) as status,\n        tracking_company,\n        tracking_number,\n        tracking_numbers,\n        tracking_urls,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:34.527130Z", "completed_at": "2024-03-20T17:30:35.159963Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.163343Z", "completed_at": "2024-03-20T17:30:35.163347Z"}], "thread_id": "Thread-4", "execution_time": 0.757411003112793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__metafield_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    namespace\n    \n as \n    \n    namespace\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    owner_resource\n    \n as \n    \n    owner_resource\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as metafield_id,\n        description,\n        namespace,\n        key,\n        value,\n        lower(coalesce(type, value_type)) as value_type,\n        owner_id as owner_resource_id,\n        lower(owner_resource) as owner_resource,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        lower(namespace || '_' || key) as metafield_reference,\n        case when id is null and updated_at is null\n            then row_number() over(partition by source_relation order by source_relation) = 1\n            else row_number() over(partition by id, source_relation order by updated_at desc) = 1\n        end as is_most_recent_record,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__metafield\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:34.594156Z", "completed_at": "2024-03-20T17:30:35.199872Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.201499Z", "completed_at": "2024-03-20T17:30:35.201502Z"}], "thread_id": "Thread-1", "execution_time": 0.6677062511444092, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_refund_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    subtotal_set\n    \n as \n    \n    subtotal_set\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_tax_set\n    \n as \n    \n    total_tax_set\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    restock_type\n    \n as \n    \n    restock_type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as order_line_refund_id,\n        location_id,\n        order_line_id,\n        subtotal,\n        subtotal_set,\n        total_tax,\n        total_tax_set,\n        quantity,\n        refund_id,\n        restock_type,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_refund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:34.501866Z", "completed_at": "2024-03-20T17:30:35.198524Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.200523Z", "completed_at": "2024-03-20T17:30:35.200526Z"}], "thread_id": "Thread-2", "execution_time": 0.7646291255950928, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    cost\n    \n as \n    \n    cost\n    \n, \n    \n    \n    country_code_of_origin\n    \n as \n    \n    country_code_of_origin\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    province_code_of_origin\n    \n as \n    \n    province_code_of_origin\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    tracked\n    \n as \n    \n    tracked\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as inventory_item_id,\n        sku,\n        _fivetran_deleted as is_deleted, -- won't filter out for now\n        cost,\n        country_code_of_origin,\n        province_code_of_origin,\n        requires_shipping as is_shipping_required,\n        tracked as is_inventory_quantity_tracked,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:34.515001Z", "completed_at": "2024-03-20T17:30:35.160276Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.163619Z", "completed_at": "2024-03-20T17:30:35.163622Z"}], "thread_id": "Thread-5", "execution_time": 0.7634272575378418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_level_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    available\n    \n as \n    \n    available\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        inventory_item_id,\n        location_id,\n        available as available_quantity,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_level\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:34.541637Z", "completed_at": "2024-03-20T17:30:35.162087Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.189155Z", "completed_at": "2024-03-20T17:30:35.189160Z"}], "thread_id": "Thread-7", "execution_time": 0.7558321952819824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_adjustment_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_set\n    \n as \n    \n    amount_set\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_amount_set\n    \n as \n    \n    tax_amount_set\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as order_adjustment_id,\n        order_id,\n        refund_id,\n        amount,\n        amount_set,\n        tax_amount,\n        tax_amount_set,\n        kind,\n        reason,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_adjustment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.183456Z", "completed_at": "2024-03-20T17:30:35.767116Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.767637Z", "completed_at": "2024-03-20T17:30:35.767643Z"}], "thread_id": "Thread-6", "execution_time": 0.7150881290435791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        upper(code) as code,\n        type,\n        amount,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where index = 1 -- Sanity check. index should not > 1 but open an issue if that's not the case in your data\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_discount_code\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.266210Z", "completed_at": "2024-03-20T17:30:35.804312Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.804845Z", "completed_at": "2024-03-20T17:30:35.804851Z"}], "thread_id": "Thread-4", "execution_time": 0.6212961673736572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    discounted_price_set\n    \n as \n    \n    discounted_price_set\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_shipping_line_id,\n        order_id,\n        carrier_identifier,\n        code,\n        delivery_category,\n        discounted_price,\n        discounted_price_set,\n        phone,\n        price,\n        price_set,\n        requested_fulfillment_service_id is not null as is_third_party_required,\n        source,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.253167Z", "completed_at": "2024-03-20T17:30:35.892365Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.951035Z", "completed_at": "2024-03-20T17:30:35.951041Z"}], "thread_id": "Thread-3", "execution_time": 0.7954440116882324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_note_attribute_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        name,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_note_attribute\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.278375Z", "completed_at": "2024-03-20T17:30:35.966623Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.970131Z", "completed_at": "2024-03-20T17:30:35.970135Z"}], "thread_id": "Thread-2", "execution_time": 0.7904927730560303, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.291311Z", "completed_at": "2024-03-20T17:30:35.960385Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.969632Z", "completed_at": "2024-03-20T17:30:35.969636Z"}], "thread_id": "Thread-7", "execution_time": 0.7850339412689209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_url_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        key,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_url_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.272951Z", "completed_at": "2024-03-20T17:30:35.966906Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.970395Z", "completed_at": "2024-03-20T17:30:35.970397Z"}], "thread_id": "Thread-1", "execution_time": 0.7924351692199707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_shipping_line_id\n    \n as \n    \n    order_shipping_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_shipping_line_id,\n        index,\n        price,\n        price_set,\n        rate,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_tax_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.283249Z", "completed_at": "2024-03-20T17:30:35.958197Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.969144Z", "completed_at": "2024-03-20T17:30:35.969147Z"}], "thread_id": "Thread-5", "execution_time": 0.7868301868438721, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    cast(null as TEXT) as \n    \n    total_discounts_set\n    \n , \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    cast(null as TEXT) as \n    \n    total_line_items_price_set\n    \n , \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    cast(null as TEXT) as \n    \n    total_price_set\n    \n , \n    cast(null as TEXT) as \n    \n    total_tax_set\n    \n , \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    cast(null as float) as \n    \n    total_tip_received\n    \n , \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    cancel_reason\n    \n as \n    \n    cancel_reason\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    checkout_token\n    \n as \n    \n    checkout_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    financial_status\n    \n as \n    \n    financial_status\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    \n    \n    billing_address_address_2\n    \n as \n    \n    billing_address_address_2\n    \n, \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    browser_ip\n    \n as \n    \n    browser_ip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    cast(null as TEXT) as \n    \n    total_shipping_price_set\n    \n , \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    \n    \n    shipping_address_address_2\n    \n as \n    \n    shipping_address_address_2\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as integer) as \n    \n    app_id\n    \n , \n    cast(null as integer) as \n    \n    checkout_id\n    \n , \n    cast(null as TEXT) as \n    \n    client_details_user_agent\n    \n , \n    cast(null as TEXT) as \n    \n    customer_locale\n    \n , \n    cast(null as TEXT) as \n    \n    order_status_url\n    \n , \n    cast(null as TEXT) as \n    \n    presentment_currency\n    \n , \n    cast(null as boolean) as \n    \n    confirmed\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as order_id,\n        user_id,\n        total_discounts,\n        total_discounts_set,\n        total_line_items_price,\n        total_line_items_price_set,\n        total_price,\n        total_price_set,\n        total_tax_set,\n        total_tax,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        total_weight,\n        total_tip_received,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        number,\n        order_number,\n        cancel_reason,\n        cart_token,\n        checkout_token,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(cancelled_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as cancelled_timestamp,\n        cast(\n    cast(cast(closed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as closed_timestamp,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        currency,\n        customer_id,\n        lower(email) as email,\n        financial_status,\n        fulfillment_status,\n        referring_site,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        browser_ip,\n        total_shipping_price_set,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        token,\n        app_id,\n        checkout_id,\n        client_details_user_agent,\n        customer_locale,\n        order_status_url,\n        presentment_currency,\n        test as is_test_order,\n        _fivetran_deleted as is_deleted,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        confirmed as is_confirmed,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(is_test_order, false)\nand not coalesce(is_deleted, false)", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.231108Z", "completed_at": "2024-03-20T17:30:35.957843Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:35.968873Z", "completed_at": "2024-03-20T17:30:35.968878Z"}], "thread_id": "Thread-8", "execution_time": 0.8283190727233887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fulfillable_quantity\n    \n as \n    \n    fulfillable_quantity\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    gift_card\n    \n as \n    \n    gift_card\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    pre_tax_price\n    \n as \n    \n    pre_tax_price\n    \n, \n    cast(null as TEXT) as \n    \n    pre_tax_price_set\n    \n , \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    cast(null as TEXT) as \n    \n    price_set\n    \n , \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    cast(null as TEXT) as \n    \n    tax_code\n    \n , \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    total_discount\n    \n as \n    \n    total_discount\n    \n, \n    cast(null as TEXT) as \n    \n    total_discount_set\n    \n , \n    \n    \n    variant_id\n    \n as \n    \n    variant_id\n    \n, \n    cast(null as TEXT) as \n    \n    variant_title\n    \n , \n    cast(null as TEXT) as \n    \n    variant_inventory_management\n    \n , \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    cast(null as TEXT) as \n    \n    properties\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        id as order_line_id,\n        index,\n        name,\n        order_id,\n        fulfillable_quantity,\n        fulfillment_status,\n        gift_card as is_gift_card,\n        grams,\n        pre_tax_price,\n        pre_tax_price_set,\n        price,\n        price_set,\n        product_id,\n        quantity,\n        requires_shipping as is_shipping_required,\n        sku,\n        taxable as is_taxable,\n        tax_code,\n        title,\n        total_discount,\n        total_discount_set,\n        variant_id,\n        variant_title,\n        variant_inventory_management,\n        vendor,\n        properties,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.951956Z", "completed_at": "2024-03-20T17:30:36.609746Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.610279Z", "completed_at": "2024-03-20T17:30:36.610286Z"}], "thread_id": "Thread-6", "execution_time": 0.7390499114990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__price_rule_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allocation_limit\n    \n as \n    \n    allocation_limit\n    \n, \n    \n    \n    allocation_method\n    \n as \n    \n    allocation_method\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    customer_selection\n    \n as \n    \n    customer_selection\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    once_per_customer\n    \n as \n    \n    once_per_customer\n    \n, \n    \n    \n    prerequisite_quantity_range\n    \n as \n    \n    prerequisite_quantity_range\n    \n, \n    \n    \n    prerequisite_shipping_price_range\n    \n as \n    \n    prerequisite_shipping_price_range\n    \n, \n    \n    \n    prerequisite_subtotal_range\n    \n as \n    \n    prerequisite_subtotal_range\n    \n, \n    \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n as \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n, \n    \n    \n    quantity_ratio_entitled_quantity\n    \n as \n    \n    quantity_ratio_entitled_quantity\n    \n, \n    \n    \n    quantity_ratio_prerequisite_quantity\n    \n as \n    \n    quantity_ratio_prerequisite_quantity\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    target_selection\n    \n as \n    \n    target_selection\n    \n, \n    \n    \n    target_type\n    \n as \n    \n    target_type\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    usage_limit\n    \n as \n    \n    usage_limit\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as price_rule_id,\n        allocation_limit,\n        allocation_method,\n        customer_selection,\n        once_per_customer as is_once_per_customer,\n        prerequisite_quantity_range as prereq_min_quantity,\n        prerequisite_shipping_price_range as prereq_max_shipping_price,\n        prerequisite_subtotal_range as prereq_min_subtotal,\n        prerequisite_to_entitlement_purchase_prerequisite_amount as prereq_min_purchase_quantity_for_entitlement,\n        quantity_ratio_entitled_quantity as prereq_buy_x_get_this,\n        quantity_ratio_prerequisite_quantity as prereq_buy_this_get_y,\n        target_selection,\n        target_type,\n        title,\n        usage_limit,\n        value,\n        value_type,\n        cast(\n    cast(cast(starts_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as starts_at,\n        cast(\n    cast(cast(ends_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as ends_at,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__price_rule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:35.960709Z", "completed_at": "2024-03-20T17:30:36.655232Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.655759Z", "completed_at": "2024-03-20T17:30:36.655764Z"}], "thread_id": "Thread-4", "execution_time": 0.7557990550994873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_image_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    height\n    \n as \n    \n    height\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    src\n    \n as \n    \n    src\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    variant_ids\n    \n as \n    \n    variant_ids\n    \n, \n    \n    \n    width\n    \n as \n    \n    width\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_image_id,\n        product_id,\n        height,\n        position,\n        src,\n        variant_ids,\n        width,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_image\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.064015Z", "completed_at": "2024-03-20T17:30:36.786381Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.789016Z", "completed_at": "2024-03-20T17:30:36.789022Z"}], "thread_id": "Thread-2", "execution_time": 0.7840209007263184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    cast(null as TEXT) as \n    \n    status\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select\n        id as product_id,\n        handle,\n        product_type,\n        published_scope,\n        title,\n        vendor,\n        status,\n        _fivetran_deleted as is_deleted,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        cast(\n    cast(cast(published_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as published_timestamp,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\nfrom fields\n\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.846176Z", "completed_at": "2024-03-20T17:30:36.853518Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.854060Z", "completed_at": "2024-03-20T17:30:36.854065Z"}], "thread_id": "Thread-2", "execution_time": 0.008975982666015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, code, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n    group by checkout_id, code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.076810Z", "completed_at": "2024-03-20T17:30:36.790304Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.792771Z", "completed_at": "2024-03-20T17:30:36.792774Z"}], "thread_id": "Thread-1", "execution_time": 0.8011798858642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__shop_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    checkout_api_supported\n    \n as \n    \n    checkout_api_supported\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    cookie_consent_level\n    \n as \n    \n    cookie_consent_level\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    county_taxes\n    \n as \n    \n    county_taxes\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_email\n    \n as \n    \n    customer_email\n    \n, \n    \n    \n    domain\n    \n as \n    \n    domain\n    \n, \n    \n    \n    eligible_for_card_reader_giveaway\n    \n as \n    \n    eligible_for_card_reader_giveaway\n    \n, \n    \n    \n    eligible_for_payments\n    \n as \n    \n    eligible_for_payments\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    enabled_presentment_currencies\n    \n as \n    \n    enabled_presentment_currencies\n    \n, \n    \n    \n    google_apps_domain\n    \n as \n    \n    google_apps_domain\n    \n, \n    \n    \n    google_apps_login_enabled\n    \n as \n    \n    google_apps_login_enabled\n    \n, \n    \n    \n    has_discounts\n    \n as \n    \n    has_discounts\n    \n, \n    \n    \n    has_gift_cards\n    \n as \n    \n    has_gift_cards\n    \n, \n    \n    \n    has_storefront\n    \n as \n    \n    has_storefront\n    \n, \n    \n    \n    iana_timezone\n    \n as \n    \n    iana_timezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    money_format\n    \n as \n    \n    money_format\n    \n, \n    \n    \n    money_in_emails_format\n    \n as \n    \n    money_in_emails_format\n    \n, \n    \n    \n    money_with_currency_format\n    \n as \n    \n    money_with_currency_format\n    \n, \n    \n    \n    money_with_currency_in_emails_format\n    \n as \n    \n    money_with_currency_in_emails_format\n    \n, \n    \n    \n    myshopify_domain\n    \n as \n    \n    myshopify_domain\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    password_enabled\n    \n as \n    \n    password_enabled\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    plan_display_name\n    \n as \n    \n    plan_display_name\n    \n, \n    \n    \n    plan_name\n    \n as \n    \n    plan_name\n    \n, \n    \n    \n    pre_launch_enabled\n    \n as \n    \n    pre_launch_enabled\n    \n, \n    \n    \n    primary_locale\n    \n as \n    \n    primary_locale\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    requires_extra_payments_agreement\n    \n as \n    \n    requires_extra_payments_agreement\n    \n, \n    \n    \n    setup_required\n    \n as \n    \n    setup_required\n    \n, \n    \n    \n    shop_owner\n    \n as \n    \n    shop_owner\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    tax_shipping\n    \n as \n    \n    tax_shipping\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as shop_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        address_1,\n        address_2,\n        city,\n        province,\n        province_code,\n        country,\n        country_code,\n        country_name,\n        zip,\n        latitude,\n        longitude,\n        case when county_taxes is null then false else county_taxes end as has_county_taxes,\n        currency,\n        enabled_presentment_currencies,\n        customer_email,\n        email,\n        domain,\n        phone,\n        timezone,\n        iana_timezone,\n        primary_locale,\n        weight_unit,\n        myshopify_domain,\n        cookie_consent_level,\n        shop_owner,\n        source,\n        tax_shipping as has_shipping_taxes,\n        case when taxes_included is null then false else taxes_included end as has_taxes_included_in_price,\n        has_discounts,\n        has_gift_cards,\n        has_storefront,\n        checkout_api_supported as has_checkout_api_supported,\n        eligible_for_card_reader_giveaway as is_eligible_for_card_reader_giveaway,\n        eligible_for_payments as is_eligible_for_payments,\n        google_apps_domain,\n        case when google_apps_login_enabled is null then false else google_apps_login_enabled end as is_google_apps_login_enabled,\n        money_format,\n        money_in_emails_format,\n        money_with_currency_format,\n        money_with_currency_in_emails_format,\n        plan_display_name,\n        plan_name,\n        password_enabled as is_password_enabled,\n        pre_launch_enabled as is_pre_launch_enabled,\n        requires_extra_payments_agreement as is_extra_payments_agreement_required,\n        setup_required as is_setup_required,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__shop\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.088756Z", "completed_at": "2024-03-20T17:30:36.787351Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.790033Z", "completed_at": "2024-03-20T17:30:36.790037Z"}], "thread_id": "Thread-8", "execution_time": 0.8014161586761475, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        index,\n        order_line_id,\n        price,\n        price_set,\n        rate,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tax_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.049270Z", "completed_at": "2024-03-20T17:30:36.788403Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.791304Z", "completed_at": "2024-03-20T17:30:36.791307Z"}], "thread_id": "Thread-3", "execution_time": 0.8160851001739502, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        product_id,\n        index,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.083175Z", "completed_at": "2024-03-20T17:30:36.788034Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.791039Z", "completed_at": "2024-03-20T17:30:36.791042Z"}], "thread_id": "Thread-5", "execution_time": 0.803596019744873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made a refund in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__refund_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    restock\n    \n as \n    \n    restock\n    \n, \n    \n    \n    total_duties_set\n    \n as \n    \n    total_duties_set\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as refund_id,\n        note,\n        order_id,\n        restock,\n        total_duties_set,\n        user_id,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__refund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.070332Z", "completed_at": "2024-03-20T17:30:36.789272Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.792023Z", "completed_at": "2024-03-20T17:30:36.792026Z"}], "thread_id": "Thread-7", "execution_time": 0.8052690029144287, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_variant_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    image_id\n    \n as \n    \n    image_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    inventory_policy\n    \n as \n    \n    inventory_policy\n    \n, \n    \n    \n    compare_at_price\n    \n as \n    \n    compare_at_price\n    \n, \n    \n    \n    fulfillment_service\n    \n as \n    \n    fulfillment_service\n    \n, \n    \n    \n    inventory_management\n    \n as \n    \n    inventory_management\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    barcode\n    \n as \n    \n    barcode\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    old_inventory_quantity\n    \n as \n    \n    old_inventory_quantity\n    \n, \n    \n    \n    inventory_quantity\n    \n as \n    \n    inventory_quantity\n    \n, \n    \n    \n    weight\n    \n as \n    \n    weight\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    option_1\n    \n as \n    \n    option_1\n    \n, \n    \n    \n    option_2\n    \n as \n    \n    option_2\n    \n, \n    \n    \n    option_3\n    \n as \n    \n    option_3\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as variant_id,\n        product_id,\n        inventory_item_id,\n        image_id,\n        title,\n        price,\n        sku,\n        position,\n        inventory_policy,\n        compare_at_price,\n        fulfillment_service,\n        inventory_management,\n        taxable as is_taxable,\n        barcode,\n        grams,\n        coalesce(inventory_quantity, old_inventory_quantity) as inventory_quantity,\n        weight,\n        weight_unit,\n        option_1,\n        option_2,\n        option_3,\n        tax_code,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_variant\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.855760Z", "completed_at": "2024-03-20T17:30:36.865178Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.869778Z", "completed_at": "2024-03-20T17:30:36.869782Z"}], "thread_id": "Thread-2", "execution_time": 0.021432876586914062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.877147Z", "completed_at": "2024-03-20T17:30:36.892165Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.899751Z", "completed_at": "2024-03-20T17:30:36.899756Z"}], "thread_id": "Thread-8", "execution_time": 0.03322911262512207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n    group by checkout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.880564Z", "completed_at": "2024-03-20T17:30:36.892500Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.900044Z", "completed_at": "2024-03-20T17:30:36.900048Z"}], "thread_id": "Thread-3", "execution_time": 0.03269314765930176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout\"\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.888132Z", "completed_at": "2024-03-20T17:30:36.894422Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.902437Z", "completed_at": "2024-03-20T17:30:36.902441Z"}], "thread_id": "Thread-7", "execution_time": 0.03369402885437012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n    group by checkout_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.895564Z", "completed_at": "2024-03-20T17:30:36.902731Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.909432Z", "completed_at": "2024-03-20T17:30:36.909437Z"}], "thread_id": "Thread-2", "execution_time": 0.02236485481262207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tag\"\n    group by customer_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.904938Z", "completed_at": "2024-03-20T17:30:36.918080Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.927676Z", "completed_at": "2024-03-20T17:30:36.927681Z"}], "thread_id": "Thread-1", "execution_time": 0.028851985931396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tag\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.909752Z", "completed_at": "2024-03-20T17:30:36.922153Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.927943Z", "completed_at": "2024-03-20T17:30:36.927947Z"}], "thread_id": "Thread-5", "execution_time": 0.02674102783203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tag\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.918425Z", "completed_at": "2024-03-20T17:30:36.927126Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.944015Z", "completed_at": "2024-03-20T17:30:36.944022Z"}], "thread_id": "Thread-3", "execution_time": 0.037306785583496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_product\"\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.914335Z", "completed_at": "2024-03-20T17:30:36.927397Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.944344Z", "completed_at": "2024-03-20T17:30:36.944373Z"}], "thread_id": "Thread-8", "execution_time": 0.038268089294433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, product_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_product\"\n    group by collection_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.923631Z", "completed_at": "2024-03-20T17:30:36.928991Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:36.947016Z", "completed_at": "2024-03-20T17:30:36.947022Z"}], "thread_id": "Thread-7", "execution_time": 0.03585004806518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_product\"\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.951166Z", "completed_at": "2024-03-20T17:30:37.008907Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.013723Z", "completed_at": "2024-03-20T17:30:37.013729Z"}], "thread_id": "Thread-1", "execution_time": 0.06772971153259277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection\"\n    group by collection_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.955198Z", "completed_at": "2024-03-20T17:30:37.009193Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.014015Z", "completed_at": "2024-03-20T17:30:37.014018Z"}], "thread_id": "Thread-5", "execution_time": 0.06781291961669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.002762Z", "completed_at": "2024-03-20T17:30:37.013451Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.016457Z", "completed_at": "2024-03-20T17:30:37.016461Z"}], "thread_id": "Thread-3", "execution_time": 0.06794285774230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection\"\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.005932Z", "completed_at": "2024-03-20T17:30:37.014275Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.017608Z", "completed_at": "2024-03-20T17:30:37.017612Z"}], "thread_id": "Thread-8", "execution_time": 0.06911802291870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_discount_code_id__source_relation.cdfb802172", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__discount_code\"\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.010372Z", "completed_at": "2024-03-20T17:30:37.015936Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.019213Z", "completed_at": "2024-03-20T17:30:37.019216Z"}], "thread_id": "Thread-7", "execution_time": 0.018728971481323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_discount_code_id.a5590b867e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__discount_code\"\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.026415Z", "completed_at": "2024-03-20T17:30:37.040122Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.049809Z", "completed_at": "2024-03-20T17:30:37.049815Z"}], "thread_id": "Thread-5", "execution_time": 0.0326688289642334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed.c0ab202601", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment_event\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'attempted_delivery','delivered','failure','in_transit','out_for_delivery','ready_for_pickup','picked_up','label_printed','label_purchased','confirmed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.036580Z", "completed_at": "2024-03-20T17:30:37.049034Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.051885Z", "completed_at": "2024-03-20T17:30:37.051890Z"}], "thread_id": "Thread-3", "execution_time": 0.03196310997009277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation.bbccfe999a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_event_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment_event\"\n    group by fulfillment_event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.040715Z", "completed_at": "2024-03-20T17:30:37.050971Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.058725Z", "completed_at": "2024-03-20T17:30:37.058730Z"}], "thread_id": "Thread-8", "execution_time": 0.02546095848083496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__location\"\n    group by location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.045065Z", "completed_at": "2024-03-20T17:30:37.052212Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.059743Z", "completed_at": "2024-03-20T17:30:37.059747Z"}], "thread_id": "Thread-7", "execution_time": 0.025880098342895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__location\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.054091Z", "completed_at": "2024-03-20T17:30:37.061830Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.071301Z", "completed_at": "2024-03-20T17:30:37.071307Z"}], "thread_id": "Thread-1", "execution_time": 0.02202296257019043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'pending','open','success','cancelled','error','failure'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.062412Z", "completed_at": "2024-03-20T17:30:37.071606Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.094114Z", "completed_at": "2024-03-20T17:30:37.094120Z"}], "thread_id": "Thread-5", "execution_time": 0.036689043045043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment\"\n    group by fulfillment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.067461Z", "completed_at": "2024-03-20T17:30:37.090161Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.096392Z", "completed_at": "2024-03-20T17:30:37.096396Z"}], "thread_id": "Thread-3", "execution_time": 0.03681206703186035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fulfillment_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment\"\nwhere fulfillment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.098152Z", "completed_at": "2024-03-20T17:30:37.106398Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.111344Z", "completed_at": "2024-03-20T17:30:37.111349Z"}], "thread_id": "Thread-1", "execution_time": 0.016785860061645508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metafield_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__metafield\"\n    group by metafield_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.103309Z", "completed_at": "2024-03-20T17:30:37.112575Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.114041Z", "completed_at": "2024-03-20T17:30:37.114046Z"}], "thread_id": "Thread-5", "execution_time": 0.016510963439941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metafield_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__metafield\"\nwhere metafield_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.107219Z", "completed_at": "2024-03-20T17:30:37.113485Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.118652Z", "completed_at": "2024-03-20T17:30:37.118656Z"}], "thread_id": "Thread-3", "execution_time": 0.016604900360107422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_item\"\n    group by inventory_item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.114555Z", "completed_at": "2024-03-20T17:30:37.120497Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.125112Z", "completed_at": "2024-03-20T17:30:37.125120Z"}], "thread_id": "Thread-1", "execution_time": 0.016131877899169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_refund_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_refund\"\n    group by order_line_refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.121643Z", "completed_at": "2024-03-20T17:30:37.129716Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.131247Z", "completed_at": "2024-03-20T17:30:37.131251Z"}], "thread_id": "Thread-5", "execution_time": 0.015285015106201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_item\"\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.125470Z", "completed_at": "2024-03-20T17:30:37.130717Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.135445Z", "completed_at": "2024-03-20T17:30:37.135448Z"}], "thread_id": "Thread-3", "execution_time": 0.015245914459228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_item_id__location_id__source_relation.30e02799e7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_level\"\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.131765Z", "completed_at": "2024-03-20T17:30:37.137275Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.143069Z", "completed_at": "2024-03-20T17:30:37.143073Z"}], "thread_id": "Thread-1", "execution_time": 0.017096996307373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_inventory_item_id.fccf494b8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_level\"\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.138434Z", "completed_at": "2024-03-20T17:30:37.147911Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.149545Z", "completed_at": "2024-03-20T17:30:37.149549Z"}], "thread_id": "Thread-5", "execution_time": 0.013912200927734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_location_id.92e79be57f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_level\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.143623Z", "completed_at": "2024-03-20T17:30:37.148824Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.150860Z", "completed_at": "2024-03-20T17:30:37.150863Z"}], "thread_id": "Thread-3", "execution_time": 0.017351865768432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_adjustment_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_adjustment\"\n    group by order_adjustment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.151143Z", "completed_at": "2024-03-20T17:30:37.160214Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.164864Z", "completed_at": "2024-03-20T17:30:37.164869Z"}], "thread_id": "Thread-1", "execution_time": 0.0162961483001709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__code__source_relation.0b164cd5b1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, code, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_discount_code\"\n    group by order_id, code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.156955Z", "completed_at": "2024-03-20T17:30:37.166081Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.167606Z", "completed_at": "2024-03-20T17:30:37.167610Z"}], "thread_id": "Thread-5", "execution_time": 0.016195297241210938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_discount_code\"\nwhere code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.161037Z", "completed_at": "2024-03-20T17:30:37.167356Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.172109Z", "completed_at": "2024-03-20T17:30:37.172113Z"}], "thread_id": "Thread-3", "execution_time": 0.019926071166992188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_discount_code\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.167893Z", "completed_at": "2024-03-20T17:30:37.177344Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.186712Z", "completed_at": "2024-03-20T17:30:37.186719Z"}], "thread_id": "Thread-1", "execution_time": 0.02149796485900879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by order_shipping_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.179510Z", "completed_at": "2024-03-20T17:30:37.192519Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.193797Z", "completed_at": "2024-03-20T17:30:37.193802Z"}], "thread_id": "Thread-5", "execution_time": 0.02170109748840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_line\"\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.188233Z", "completed_at": "2024-03-20T17:30:37.194081Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.199520Z", "completed_at": "2024-03-20T17:30:37.199525Z"}], "thread_id": "Thread-3", "execution_time": 0.02147817611694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, name, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_note_attribute\"\n    group by order_id, name, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.194349Z", "completed_at": "2024-03-20T17:30:37.200978Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.205470Z", "completed_at": "2024-03-20T17:30:37.205476Z"}], "thread_id": "Thread-1", "execution_time": 0.013440847396850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_note_attribute\"\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.201531Z", "completed_at": "2024-03-20T17:30:37.210289Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.211553Z", "completed_at": "2024-03-20T17:30:37.211557Z"}], "thread_id": "Thread-5", "execution_time": 0.0162198543548584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_note_attribute\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.206638Z", "completed_at": "2024-03-20T17:30:37.211826Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.238599Z", "completed_at": "2024-03-20T17:30:37.238605Z"}], "thread_id": "Thread-3", "execution_time": 0.034838199615478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_tag\"\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.212080Z", "completed_at": "2024-03-20T17:30:37.238875Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.241241Z", "completed_at": "2024-03-20T17:30:37.241245Z"}], "thread_id": "Thread-1", "execution_time": 0.03502607345581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, key, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_url_tag\"\n    group by order_id, key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.241525Z", "completed_at": "2024-03-20T17:30:37.250730Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.256143Z", "completed_at": "2024-03-20T17:30:37.256150Z"}], "thread_id": "Thread-5", "execution_time": 0.018080949783325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_tag\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.246881Z", "completed_at": "2024-03-20T17:30:37.251588Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.256550Z", "completed_at": "2024-03-20T17:30:37.256556Z"}], "thread_id": "Thread-3", "execution_time": 0.013183832168579102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_tag\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.252197Z", "completed_at": "2024-03-20T17:30:37.259105Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.261240Z", "completed_at": "2024-03-20T17:30:37.261245Z"}], "thread_id": "Thread-1", "execution_time": 0.01955389976501465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_url_tag\"\nwhere key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.261534Z", "completed_at": "2024-03-20T17:30:37.279679Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.285206Z", "completed_at": "2024-03-20T17:30:37.285211Z"}], "thread_id": "Thread-5", "execution_time": 0.027113914489746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_url_tag\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.289141Z", "completed_at": "2024-03-20T17:30:37.296887Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.298027Z", "completed_at": "2024-03-20T17:30:37.298032Z"}], "thread_id": "Thread-3", "execution_time": 0.011591911315917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\"\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.292940Z", "completed_at": "2024-03-20T17:30:37.297200Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.298306Z", "completed_at": "2024-03-20T17:30:37.298310Z"}], "thread_id": "Thread-5", "execution_time": 0.010725975036621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by order_shipping_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.304758Z", "completed_at": "2024-03-20T17:30:37.308476Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.309717Z", "completed_at": "2024-03-20T17:30:37.309722Z"}], "thread_id": "Thread-5", "execution_time": 0.009776115417480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.301590Z", "completed_at": "2024-03-20T17:30:37.308782Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.309995Z", "completed_at": "2024-03-20T17:30:37.309999Z"}], "thread_id": "Thread-3", "execution_time": 0.010692119598388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.313212Z", "completed_at": "2024-03-20T17:30:37.322179Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.322730Z", "completed_at": "2024-03-20T17:30:37.322735Z"}], "thread_id": "Thread-5", "execution_time": 0.011224031448364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line\"\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.707221Z", "completed_at": "2024-03-20T17:30:37.240946Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.246283Z", "completed_at": "2024-03-20T17:30:37.246288Z"}], "thread_id": "Thread-4", "execution_time": 0.6219000816345215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__transaction_tmp\"\n\n),\n\nfields as (\n\n    select\n\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    payment_avs_result_code\n    \n as \n    \n    payment_avs_result_code\n    \n, \n    \n    \n    payment_credit_card_bin\n    \n as \n    \n    payment_credit_card_bin\n    \n, \n    \n    \n    payment_cvv_result_code\n    \n as \n    \n    payment_cvv_result_code\n    \n, \n    \n    \n    payment_credit_card_number\n    \n as \n    \n    payment_credit_card_number\n    \n, \n    \n    \n    payment_credit_card_company\n    \n as \n    \n    payment_credit_card_company\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    receipt\n    \n as \n    \n    receipt\n    \n, \n    \n    \n    currency_exchange_id\n    \n as \n    \n    currency_exchange_id\n    \n, \n    \n    \n    currency_exchange_adjustment\n    \n as \n    \n    currency_exchange_adjustment\n    \n, \n    \n    \n    currency_exchange_original_amount\n    \n as \n    \n    currency_exchange_original_amount\n    \n, \n    \n    \n    currency_exchange_final_amount\n    \n as \n    \n    currency_exchange_final_amount\n    \n, \n    \n    \n    currency_exchange_currency\n    \n as \n    \n    currency_exchange_currency\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as timestamp) as \n    \n    authorization_expires_at\n    \n , \n    \n    \n        \n            \n            \"authorization\"\n            \n        \n    \n as authorization_code \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as transaction_id,\n        order_id,\n        refund_id,\n        amount,\n        device_id,\n        gateway,\n        source_name,\n        message,\n        currency,\n        location_id,\n        parent_id,\n        payment_avs_result_code,\n        payment_credit_card_bin,\n        payment_cvv_result_code,\n        payment_credit_card_number,\n        payment_credit_card_company,\n        kind,\n        receipt,\n        currency_exchange_id,\n        currency_exchange_adjustment,\n        currency_exchange_original_amount,\n        currency_exchange_final_amount,\n        currency_exchange_currency,\n        error_code,\n        status,\n        user_id,\n        authorization_code,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_timestamp,\n        cast(\n    cast(cast(authorization_expires_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as authorization_expires_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__transaction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.317297Z", "completed_at": "2024-03-20T17:30:37.328886Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.330598Z", "completed_at": "2024-03-20T17:30:37.330603Z"}], "thread_id": "Thread-3", "execution_time": 0.01928400993347168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_target_type__line_item__shipping_line.921059c008", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        target_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__price_rule\"\n    group by target_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'line_item','shipping_line'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.324374Z", "completed_at": "2024-03-20T17:30:37.330289Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.335467Z", "completed_at": "2024-03-20T17:30:37.335473Z"}], "thread_id": "Thread-5", "execution_time": 0.012703895568847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_value_type__percentage__fixed_amount.65eceed909", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        value_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__price_rule\"\n    group by value_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'percentage','fixed_amount'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.332080Z", "completed_at": "2024-03-20T17:30:37.337581Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.342413Z", "completed_at": "2024-03-20T17:30:37.342418Z"}], "thread_id": "Thread-4", "execution_time": 0.016527175903320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__price_rule_price_rule_id__source_relation.56ce313bee", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_rule_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__price_rule\"\n    group by price_rule_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.338786Z", "completed_at": "2024-03-20T17:30:37.347123Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.348764Z", "completed_at": "2024-03-20T17:30:37.348769Z"}], "thread_id": "Thread-3", "execution_time": 0.012609004974365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__price_rule_price_rule_id.a7160b00e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price_rule_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__price_rule\"\nwhere price_rule_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.657864Z", "completed_at": "2024-03-20T17:30:37.284104Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.286934Z", "completed_at": "2024-03-20T17:30:37.286937Z"}], "thread_id": "Thread-6", "execution_time": 0.6986980438232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tender_transaction_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    payment_method\n    \n as \n    \n    payment_method\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    remote_reference\n    \n as \n    \n    remote_reference\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as transaction_id,\n        order_id,\n        amount,\n        currency,\n        payment_method,\n        remote_reference,\n        user_id,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tender_transaction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.349819Z", "completed_at": "2024-03-20T17:30:37.356508Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.361140Z", "completed_at": "2024-03-20T17:30:37.361146Z"}], "thread_id": "Thread-4", "execution_time": 0.013677120208740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_image_product_image_id__source_relation.9614191ead", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_image_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_image\"\n    group by product_image_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.357131Z", "completed_at": "2024-03-20T17:30:37.365576Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.367359Z", "completed_at": "2024-03-20T17:30:37.367364Z"}], "thread_id": "Thread-3", "execution_time": 0.012828826904296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_image_product_image_id.911df72b9c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_image_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_image\"\nwhere product_image_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.368474Z", "completed_at": "2024-03-20T17:30:37.377690Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.378365Z", "completed_at": "2024-03-20T17:30:37.378370Z"}], "thread_id": "Thread-4", "execution_time": 0.012229204177856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product\"\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.380237Z", "completed_at": "2024-03-20T17:30:37.384556Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.385216Z", "completed_at": "2024-03-20T17:30:37.385221Z"}], "thread_id": "Thread-4", "execution_time": 0.006219148635864258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        shop_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__shop\"\n    group by shop_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.386990Z", "completed_at": "2024-03-20T17:30:37.391564Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.392138Z", "completed_at": "2024-03-20T17:30:37.392143Z"}], "thread_id": "Thread-4", "execution_time": 0.006233930587768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__shop\"\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.393895Z", "completed_at": "2024-03-20T17:30:37.397626Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.398161Z", "completed_at": "2024-03-20T17:30:37.398166Z"}], "thread_id": "Thread-4", "execution_time": 0.00538182258605957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tax_line\"\n    group by order_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.399862Z", "completed_at": "2024-03-20T17:30:37.404528Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.405066Z", "completed_at": "2024-03-20T17:30:37.405071Z"}], "thread_id": "Thread-4", "execution_time": 0.006272077560424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tag\"\n    group by product_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.406729Z", "completed_at": "2024-03-20T17:30:37.410333Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.410966Z", "completed_at": "2024-03-20T17:30:37.410971Z"}], "thread_id": "Thread-4", "execution_time": 0.005339145660400391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tag\"\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.412869Z", "completed_at": "2024-03-20T17:30:37.416857Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.417411Z", "completed_at": "2024-03-20T17:30:37.417416Z"}], "thread_id": "Thread-4", "execution_time": 0.0057299137115478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tag\"\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.424622Z", "completed_at": "2024-03-20T17:30:37.428471Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.429001Z", "completed_at": "2024-03-20T17:30:37.429006Z"}], "thread_id": "Thread-4", "execution_time": 0.0055599212646484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__refund\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:36.930289Z", "completed_at": "2024-03-20T17:30:37.560156Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.560718Z", "completed_at": "2024-03-20T17:30:37.560724Z"}], "thread_id": "Thread-2", "execution_time": 0.6828358173370361, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.int_shopify__customer_email_rollup", "compiled": true, "compiled_code": "with customers as (\n\n    select \n        *,\n        row_number() over(\n            partition by \n\n\n    email\n\n\n            order by created_timestamp desc) \n            as customer_index\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer\"\n    where email is not null -- nonsensical to include any null emails here\n\n), customer_tags as (\n\n    select \n        *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tag\"\n\n), rollup_customers as (\n\n    select\n        -- fields to group by\n        lower(customers.email) as email,\n        customers.source_relation,\n\n        -- fields to string agg together\n        \n    string_agg(distinct cast(customers.customer_id as TEXT), ', ')\n\n as customer_ids,\n        \n    string_agg(distinct cast(customers.phone as TEXT), ', ')\n\n as phone_numbers,\n        \n    string_agg(distinct cast(customer_tags.value as TEXT), ', ')\n\n as customer_tags,\n\n        -- fields to take aggregates of\n        min(customers.created_timestamp) as first_account_created_at,\n        max(customers.created_timestamp) as last_account_created_at,\n        max(customers.updated_timestamp) as last_updated_at,\n        max(customers.marketing_consent_updated_at) as marketing_consent_updated_at,\n        max(customers._fivetran_synced) as last_fivetran_synced,\n\n        -- take true if ever given for boolean fields\n        \n\n    bool_or( case when customers.customer_index = 1 then customers.is_tax_exempt else null end )\n\n as is_tax_exempt, -- since this changes every year\n        \n\n    bool_or( customers.is_verified_email )\n\n as is_verified_email\n\n        -- for all other fields, just take the latest value\n        \n        \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.first_name else null end) as first_name\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.last_name else null end) as last_name\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.default_address_id else null end) as default_address_id\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.account_state else null end) as account_state\n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.note else null end) as note\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.currency else null end) as currency\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_consent_state else null end) as marketing_consent_state\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_opt_in_level else null end) as marketing_opt_in_level\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n    from customers \n    left join customer_tags\n        on customers.customer_id = customer_tags.customer_id\n        and customers.source_relation = customer_tags.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom rollup_customers", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"int_shopify__customer_email_rollup\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.610840Z", "completed_at": "2024-03-20T17:30:37.615135Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.615700Z", "completed_at": "2024-03-20T17:30:37.615704Z"}], "thread_id": "Thread-2", "execution_time": 0.005949974060058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variant_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_variant\"\n    group by variant_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.617404Z", "completed_at": "2024-03-20T17:30:37.622490Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.623046Z", "completed_at": "2024-03-20T17:30:37.623052Z"}], "thread_id": "Thread-2", "execution_time": 0.006726980209350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.624732Z", "completed_at": "2024-03-20T17:30:37.636841Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.637349Z", "completed_at": "2024-03-20T17:30:37.637353Z"}], "thread_id": "Thread-2", "execution_time": 0.013664007186889648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders__order_line_aggregates", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), order_line as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line\"\n\n), tax as (\n\n    select\n        *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tax_line\"\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) as price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders__order_line_aggregates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.638967Z", "completed_at": "2024-03-20T17:30:37.643562Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.644099Z", "completed_at": "2024-03-20T17:30:37.644104Z"}], "thread_id": "Thread-2", "execution_time": 0.0061740875244140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.645762Z", "completed_at": "2024-03-20T17:30:37.649835Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.650406Z", "completed_at": "2024-03-20T17:30:37.650410Z"}], "thread_id": "Thread-2", "execution_time": 0.005702972412109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__transaction\"\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.652078Z", "completed_at": "2024-03-20T17:30:37.665068Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.665606Z", "completed_at": "2024-03-20T17:30:37.665611Z"}], "thread_id": "Thread-2", "execution_time": 0.014594078063964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__transactions", "compiled": true, "compiled_code": "\n\nwith transactions as (\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transactions_unique_id\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__transaction\"\n\n    \n-- use created_timestamp instead of processed_at since a record could be created but not processed\n    where cast(created_timestamp as date) >= \n\n\n\n    coalesce(\n        (select \n\n    max(cast(created_timestamp as date)) + ((interval '1 day') * (-7))\n\n \n            from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__transactions\"), \n        '2010-01-01'\n        )\n\n\n    \n\n), tender_transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tender_transaction\"\n\n), joined as (\n    select \n        transactions.*,\n        tender_transactions.payment_method,\n        parent_transactions.created_timestamp as parent_created_timestamp,\n        parent_transactions.kind as parent_kind,\n        parent_transactions.amount as parent_amount,\n        parent_transactions.status as parent_status\n    from transactions\n    left join tender_transactions\n        on transactions.transaction_id = tender_transactions.transaction_id\n        and transactions.source_relation = tender_transactions.source_relation\n    left join transactions as parent_transactions\n        on transactions.parent_id = parent_transactions.transaction_id\n        and transactions.source_relation = parent_transactions.source_relation\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif(\n\n  receipt::json #>> '{charges,data,0,balance_transaction,exchange_rate}'\n\n, '') as numeric(28,6) ),1) as exchange_rate,\n        coalesce(cast(nullif(\n\n  receipt::json #>> '{charges,data,0,balance_transaction,exchange_rate}'\n\n, '') as numeric(28,6) ),1) * amount as currency_exchange_calculated_amount\n    from joined\n\n)\n\nselect *\nfrom exchange_rate", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.667267Z", "completed_at": "2024-03-20T17:30:37.670854Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.671401Z", "completed_at": "2024-03-20T17:30:37.671405Z"}], "thread_id": "Thread-2", "execution_time": 0.005196094512939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tender_transaction\"\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.673062Z", "completed_at": "2024-03-20T17:30:37.676254Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.677013Z", "completed_at": "2024-03-20T17:30:37.677018Z"}], "thread_id": "Thread-2", "execution_time": 0.005237102508544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tender_transaction\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.705059Z", "completed_at": "2024-03-20T17:30:37.773383Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.773889Z", "completed_at": "2024-03-20T17:30:37.773895Z"}], "thread_id": "Thread-2", "execution_time": 0.06987380981445312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__order_lines", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), order_lines as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_line_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as order_lines_unique_key\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line\"\n\n    \n    where cast(_fivetran_synced as date) >= \n\n\n\n    coalesce(\n        (select \n\n    max(cast(_fivetran_synced as date)) + ((interval '1 day') * (-3))\n\n \n            from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__order_lines\"), \n        '2010-01-01'\n        )\n\n\n    \n\n), product_variants as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_variant\"\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal,\n        \n    string_agg(distinct cast(refunds.restock_type as TEXT), ', ')\n\n as restock_types\n    from refunds\n    group by 1,2\n\n), tax_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__tax_line\"\n\n), tax_lines_aggregated as (\n\n    select\n        tax_lines.order_line_id,\n        tax_lines.source_relation,\n        sum(tax_lines.price) as order_line_tax\n\n    from tax_lines\n    group by 1,2\n\n), joined as (\n\n    select\n        order_lines.*,\n        \n        refunds_aggregated.restock_types,\n\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n\n        tax_lines_aggregated.order_line_tax\n\n    from order_lines\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n    left join tax_lines_aggregated\n        on tax_lines_aggregated.order_line_id = order_lines.order_line_id\n        and tax_lines_aggregated.source_relation = order_lines.source_relation\n\n\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__order_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.775638Z", "completed_at": "2024-03-20T17:30:37.783635Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.784161Z", "completed_at": "2024-03-20T17:30:37.784166Z"}], "thread_id": "Thread-2", "execution_time": 0.009680032730102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_variant\"\n),\n\nproduct_image as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_image\"\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__products_with_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.785868Z", "completed_at": "2024-03-20T17:30:37.789878Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.790410Z", "completed_at": "2024-03-20T17:30:37.790415Z"}], "thread_id": "Thread-2", "execution_time": 0.005656003952026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"int_shopify__customer_email_rollup\"\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.792054Z", "completed_at": "2024-03-20T17:30:37.836978Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.837577Z", "completed_at": "2024-03-20T17:30:37.837583Z"}], "thread_id": "Thread-2", "execution_time": 0.04661202430725098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), orders as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as orders_unique_key\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\"\n\n    \n    where cast(coalesce(updated_timestamp, created_timestamp) as date) >= \n\n\n\n    coalesce(\n        (select \n\n    max(cast(coalesce(updated_timestamp, created_timestamp) as date)) + ((interval '1 day') * (-7))\n\n \n            from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"), \n        '2010-01-01'\n        )\n\n\n    \n\n), order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), order_adjustments as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_adjustment\"\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n), order_discount_code as (\n    \n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_discount_code\"\n\n), discount_aggregates as (\n\n    select \n        order_id,\n        source_relation,\n        sum(case when type = 'shipping' then amount else 0 end) as shipping_discount_amount,\n        sum(case when type = 'percentage' then amount else 0 end) as percentage_calc_discount_amount,\n        sum(case when type = 'shipping' then amount else 0 end) as fixed_amount_discount_amount,\n        count(distinct code) as count_discount_codes_applied\n\n    from order_discount_code\n    group by 1,2\n\n), order_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as order_tags\n    \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_tag\"\n    group by 1,2\n\n), order_url_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as order_url_tags\n    \n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_url_tag\"\n    group by 1,2\n\n), fulfillments as (\n\n    select \n        order_id,\n        source_relation,\n        count(fulfillment_id) as number_of_fulfillments,\n        \n    string_agg(distinct cast(service as TEXT), ', ')\n\n as fulfillment_services,\n        \n    string_agg(distinct cast(tracking_company as TEXT), ', ')\n\n as tracking_companies,\n        \n    string_agg(distinct cast(tracking_number as TEXT), ', ')\n\n as tracking_numbers\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment\"\n    group by 1,2\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast(\n\n  total_shipping_price_set::json #>> '{shop_money,amount}'\n\n as float) ,0) as shipping_cost,\n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n\n        (orders.total_price\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)) as order_adjusted_total,\n        order_lines.line_item_count,\n\n        coalesce(discount_aggregates.shipping_discount_amount, 0) as shipping_discount_amount,\n        coalesce(discount_aggregates.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        coalesce(discount_aggregates.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        coalesce(discount_aggregates.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(order_lines.order_total_shipping_tax, 0) as order_total_shipping_tax,\n        order_tag.order_tags,\n        order_url_tag.order_url_tags,\n        fulfillments.number_of_fulfillments,\n        fulfillments.fulfillment_services,\n        fulfillments.tracking_companies,\n        fulfillments.tracking_numbers\n\n\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    left join discount_aggregates\n        on orders.order_id = discount_aggregates.order_id \n        and orders.source_relation = discount_aggregates.source_relation\n    left join order_tag\n        on orders.order_id = order_tag.order_id\n        and orders.source_relation = order_tag.source_relation\n    left join order_url_tag\n        on orders.order_id = order_url_tag.order_id\n        and orders.source_relation = order_url_tag.source_relation\n    left join fulfillments\n        on orders.order_id = fulfillments.order_id\n        and orders.source_relation = fulfillments.source_relation\n\n), windows as (\n\n    select \n        *,\n        row_number() over (\n            partition by \n\n\n    customer_id\n\n\n            order by created_timestamp) \n            as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.840976Z", "completed_at": "2024-03-20T17:30:37.845558Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.846400Z", "completed_at": "2024-03-20T17:30:37.846410Z"}], "thread_id": "Thread-2", "execution_time": 0.007961034774780273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders__order_line_aggregates\"\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.848442Z", "completed_at": "2024-03-20T17:30:37.853507Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.854058Z", "completed_at": "2024-03-20T17:30:37.854063Z"}], "thread_id": "Thread-2", "execution_time": 0.0071430206298828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transactions_unique_id\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__transactions\"\nwhere transactions_unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.856863Z", "completed_at": "2024-03-20T17:30:37.861333Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.861845Z", "completed_at": "2024-03-20T17:30:37.861849Z"}], "thread_id": "Thread-2", "execution_time": 0.006328105926513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transactions_unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__transactions\"\nwhere transactions_unique_id is not null\ngroup by transactions_unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.073170Z", "completed_at": "2024-03-20T17:30:37.844688Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.845258Z", "completed_at": "2024-03-20T17:30:37.845264Z"}], "thread_id": "Thread-8", "execution_time": 0.8420450687408447, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__collection_metafields", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection\"\n)\n\n\n\nselect *\nfrom source_table\n\n", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__collection_metafields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.090446Z", "completed_at": "2024-03-20T17:30:37.854326Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.855686Z", "completed_at": "2024-03-20T17:30:37.855689Z"}], "thread_id": "Thread-7", "execution_time": 0.8464231491088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_metafields", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer\"\n)\n\n\n\nselect *\nfrom source_table\n\n", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_metafields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.878401Z", "completed_at": "2024-03-20T17:30:37.917644Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.919277Z", "completed_at": "2024-03-20T17:30:37.919281Z"}], "thread_id": "Thread-2", "execution_time": 0.042500972747802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__inventory_levels", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), inventory_level as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_level\"\n), \n\ninventory_item as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__inventory_item\"\n),\n\nlocation as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__location\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_variant\"\n),\n\nproduct as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product\"\n),\n\ninventory_level_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n),\n\njoined_info as (\n\n    select \n        inventory_level.*,\n        inventory_item.sku,\n        inventory_item.is_deleted as is_inventory_item_deleted,\n        inventory_item.cost,\n        inventory_item.country_code_of_origin,\n        inventory_item.province_code_of_origin,\n        inventory_item.is_shipping_required,\n        inventory_item.is_inventory_quantity_tracked,\n        inventory_item.created_at as inventory_item_created_at,\n        inventory_item.updated_at as inventory_item_updated_at,\n\n        location.name as location_name, \n        location.is_deleted as is_location_deleted,\n        location.is_active as is_location_active,\n        location.address_1,\n        location.address_2,\n        location.city,\n        location.country,\n        location.country_code,\n        location.is_legacy as is_legacy_location,\n        location.province,\n        location.province_code,\n        location.phone,\n        location.zip,\n        location.created_at as location_created_at,\n        location.updated_at as location_updated_at,\n\n        product_variant.variant_id,\n        product_variant.product_id,\n        product_variant.title as variant_title,\n        product_variant.inventory_policy as variant_inventory_policy,\n        product_variant.price as variant_price,\n        product_variant.image_id as variant_image_id,\n        product_variant.fulfillment_service as variant_fulfillment_service,\n        product_variant.inventory_management as variant_inventory_management,\n        product_variant.is_taxable as is_variant_taxable,\n        product_variant.barcode as variant_barcode,\n        product_variant.grams as variant_grams, \n        product_variant.inventory_quantity as variant_inventory_quantity,\n        product_variant.weight as variant_weight,\n        product_variant.weight_unit as variant_weight_unit,\n        product_variant.option_1 as variant_option_1,\n        product_variant.option_2 as variant_option_2,\n        product_variant.option_3 as variant_option_3,\n        product_variant.tax_code as variant_tax_code,\n        product_variant.created_timestamp as variant_created_at,\n        product_variant.updated_timestamp as variant_updated_at\n\n        \n\n\n\n\n\n    from inventory_level\n    join inventory_item \n        on inventory_level.inventory_item_id = inventory_item.inventory_item_id \n        and inventory_level.source_relation = inventory_item.source_relation \n    join location \n        on inventory_level.location_id = location.location_id \n        and inventory_level.source_relation = location.source_relation \n    join product_variant \n        on inventory_item.inventory_item_id = product_variant.inventory_item_id \n        and inventory_item.source_relation = product_variant.source_relation\n\n),\n\njoined_aggregates as (\n\n    select \n        joined_info.*,\n        coalesce(inventory_level_aggregated.subtotal_sold, 0) as subtotal_sold,\n        coalesce(inventory_level_aggregated.quantity_sold, 0) as quantity_sold,\n        coalesce(inventory_level_aggregated.count_distinct_orders, 0) as count_distinct_orders,\n        coalesce(inventory_level_aggregated.count_distinct_customers, 0) as count_distinct_customers,\n        coalesce(inventory_level_aggregated.count_distinct_customer_emails, 0) as count_distinct_customer_emails,\n        inventory_level_aggregated.first_order_timestamp,\n        inventory_level_aggregated.last_order_timestamp,\n        coalesce(inventory_level_aggregated.subtotal_sold_refunds, 0) as subtotal_sold_refunds,\n        coalesce(inventory_level_aggregated.quantity_sold_refunds, 0) as quantity_sold_refunds\n\n        \n        , coalesce(count_fulfillment_pending, 0) as count_fulfillment_pending\n        \n        , coalesce(count_fulfillment_open, 0) as count_fulfillment_open\n        \n        , coalesce(count_fulfillment_success, 0) as count_fulfillment_success\n        \n        , coalesce(count_fulfillment_cancelled, 0) as count_fulfillment_cancelled\n        \n        , coalesce(count_fulfillment_error, 0) as count_fulfillment_error\n        \n        , coalesce(count_fulfillment_failure, 0) as count_fulfillment_failure\n        \n\n    from joined_info\n    left join inventory_level_aggregated\n        on joined_info.location_id = inventory_level_aggregated.location_id\n        and joined_info.variant_id = inventory_level_aggregated.variant_id\n        and joined_info.source_relation = inventory_level_aggregated.source_relation\n),\n\nfinal as (\n\n    select \n        *,\n        subtotal_sold - subtotal_sold_refunds as net_subtotal_sold,\n        quantity_sold - quantity_sold_refunds as net_quantity_sold\n    from joined_aggregates\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__inventory_levels\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.911002Z", "completed_at": "2024-03-20T17:30:37.918563Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.920584Z", "completed_at": "2024-03-20T17:30:37.920587Z"}], "thread_id": "Thread-8", "execution_time": 0.014609813690185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        variant_id, location_id, source_relation\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n    group by variant_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.920864Z", "completed_at": "2024-03-20T17:30:37.926859Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.934160Z", "completed_at": "2024-03-20T17:30:37.934167Z"}], "thread_id": "Thread-7", "execution_time": 0.015863895416259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_lines_unique_key\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__order_lines\"\nwhere order_lines_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.927130Z", "completed_at": "2024-03-20T17:30:37.935066Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.936547Z", "completed_at": "2024-03-20T17:30:37.936551Z"}], "thread_id": "Thread-2", "execution_time": 0.012272834777832031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_lines_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__order_lines\"\nwhere order_lines_unique_key is not null\ngroup by order_lines_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.946648Z", "completed_at": "2024-03-20T17:30:37.954173Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.957500Z", "completed_at": "2024-03-20T17:30:37.957505Z"}], "thread_id": "Thread-2", "execution_time": 0.016609907150268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect orders_unique_key\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"\nwhere orders_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.959312Z", "completed_at": "2024-03-20T17:30:37.979727Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.985674Z", "completed_at": "2024-03-20T17:30:37.985680Z"}], "thread_id": "Thread-7", "execution_time": 0.029408931732177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    orders_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"\nwhere orders_unique_key is not null\ngroup by orders_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.980273Z", "completed_at": "2024-03-20T17:30:37.986900Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:37.988127Z", "completed_at": "2024-03-20T17:30:37.988131Z"}], "thread_id": "Thread-2", "execution_time": 0.03112506866455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        email, source_relation\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.996011Z", "completed_at": "2024-03-20T17:30:38.000563Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.001077Z", "completed_at": "2024-03-20T17:30:38.001081Z"}], "thread_id": "Thread-2", "execution_time": 0.0062520503997802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tag\"\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        customer_id, source_relation\n    from __dbt__cte__shopify__customers__order_aggregates\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.002720Z", "completed_at": "2024-03-20T17:30:38.006015Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.006539Z", "completed_at": "2024-03-20T17:30:38.006542Z"}], "thread_id": "Thread-2", "execution_time": 0.004852771759033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__inventory_levels\"\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.008182Z", "completed_at": "2024-03-20T17:30:38.011639Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.012175Z", "completed_at": "2024-03-20T17:30:38.012179Z"}], "thread_id": "Thread-2", "execution_time": 0.005045175552368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__inventory_levels\"\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.013958Z", "completed_at": "2024-03-20T17:30:38.017771Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.018281Z", "completed_at": "2024-03-20T17:30:38.018285Z"}], "thread_id": "Thread-2", "execution_time": 0.00548100471496582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__inventory_levels\"\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.019891Z", "completed_at": "2024-03-20T17:30:38.075428Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.076448Z", "completed_at": "2024-03-20T17:30:38.076451Z"}], "thread_id": "Thread-2", "execution_time": 0.05765509605407715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__daily_shop", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__daily_orders as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__order_lines\"\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_timestamp) as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast(date_trunc('day', orders.created_timestamp) as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_shopify__daily_abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_at) as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates\n),  __dbt__cte__int_shopify__daily_fulfillment as (\n\n\nwith fulfillment_event as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__fulfillment_event\"\n),\n\nfulfillment_aggregates as (\n\n    select \n        source_relation,\n        cast(date_trunc('day', happened_at) as date) as date_day\n\n        \n        , count(distinct case when lower(status) = 'attempted_delivery' then fulfillment_id end) as count_fulfillment_attempted_delivery\n        \n        , count(distinct case when lower(status) = 'delivered' then fulfillment_id end) as count_fulfillment_delivered\n        \n        , count(distinct case when lower(status) = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n        , count(distinct case when lower(status) = 'in_transit' then fulfillment_id end) as count_fulfillment_in_transit\n        \n        , count(distinct case when lower(status) = 'out_for_delivery' then fulfillment_id end) as count_fulfillment_out_for_delivery\n        \n        , count(distinct case when lower(status) = 'ready_for_pickup' then fulfillment_id end) as count_fulfillment_ready_for_pickup\n        \n        , count(distinct case when lower(status) = 'picked_up' then fulfillment_id end) as count_fulfillment_picked_up\n        \n        , count(distinct case when lower(status) = 'label_printed' then fulfillment_id end) as count_fulfillment_label_printed\n        \n        , count(distinct case when lower(status) = 'label_purchased' then fulfillment_id end) as count_fulfillment_label_purchased\n        \n        , count(distinct case when lower(status) = 'confirmed' then fulfillment_id end) as count_fulfillment_confirmed\n        \n    \n    from fulfillment_event\n    group by 1,2\n\n)\n\nselect *\nfrom fulfillment_aggregates\n), shop as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__shop\"\n),\n\ncalendar as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__calendar\"\n    where cast(date_trunc('day', date_day) as date) = date_day\n),\n\ndaily_orders as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_orders\n),\n\ndaily_abandoned_checkouts as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_abandoned_checkouts\n),\n\n\ndaily_fulfillment as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_fulfillment\n),\n\n\nshop_calendar as (\n\n    select\n        cast(date_trunc('day', calendar.date_day) as date) as date_day,\n        shop.shop_id,\n        shop.name,\n        shop.domain,\n        shop.is_deleted,\n        shop.currency,\n        shop.enabled_presentment_currencies,\n        shop.iana_timezone,\n        shop.created_at,\n        shop.source_relation\n\n    from calendar\n    join shop \n        on cast(shop.created_at as date) <= calendar.date_day\n),\n\nfinal as (\n\n    select \n        shop_calendar.*,\n\n        coalesce(daily_orders.count_orders, 0) as count_orders,\n        coalesce(daily_orders.count_line_items, 0) as count_line_items,\n        daily_orders.avg_line_item_count,\n        coalesce(daily_orders.count_customers, 0) as count_customers,\n        coalesce(daily_orders.count_customer_emails, 0) as count_customer_emails,\n        coalesce(daily_orders.order_adjusted_total, 0) as order_adjusted_total,\n        daily_orders.avg_order_value,\n        coalesce(daily_orders.shipping_cost, 0) as shipping_cost,\n        coalesce(daily_orders.order_adjustment_amount, 0) as order_adjustment_amount,\n        coalesce(daily_orders.order_adjustment_tax_amount, 0) as order_adjustment_tax_amount,\n        coalesce(daily_orders.refund_subtotal, 0) as refund_subtotal,\n        coalesce(daily_orders.refund_total_tax, 0) as refund_total_tax,\n        coalesce(daily_orders.total_discounts, 0) as total_discounts,\n        daily_orders.avg_discount,\n        coalesce(daily_orders.shipping_discount_amount, 0) as shipping_discount_amount,\n        daily_orders.avg_shipping_discount_amount,\n        coalesce(daily_orders.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        daily_orders.avg_percentage_calc_discount_amount,\n        coalesce(daily_orders.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        daily_orders.avg_fixed_amount_discount_amount,\n        coalesce(daily_orders.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(daily_orders.count_locations_ordered_from, 0) as count_locations_ordered_from,\n        coalesce(daily_orders.count_orders_with_discounts, 0) as count_orders_with_discounts,\n        coalesce(daily_orders.count_orders_with_refunds, 0) as count_orders_with_refunds,\n        daily_orders.first_order_timestamp,\n        daily_orders.last_order_timestamp,\n\n        coalesce(daily_orders.quantity_sold, 0) as quantity_sold,\n        coalesce(daily_orders.quantity_refunded, 0) as quantity_refunded,\n        coalesce(daily_orders.quantity_net, 0) as quantity_net,\n        daily_orders.avg_quantity_sold,\n        daily_orders.avg_quantity_net,\n        coalesce(daily_orders.count_variants_sold, 0) as count_variants_sold,\n        coalesce(daily_orders.count_products_sold, 0) as count_products_sold,\n        coalesce(daily_orders.quantity_gift_cards_sold, 0) as quantity_gift_cards_sold,\n        coalesce(daily_orders.quantity_requiring_shipping, 0) as quantity_requiring_shipping,\n\n        coalesce(daily_abandoned_checkouts.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(daily_abandoned_checkouts.count_customers_abandoned_checkout, 0) as count_customers_abandoned_checkout,\n        coalesce(daily_abandoned_checkouts.count_customer_emails_abandoned_checkout, 0) as count_customer_emails_abandoned_checkout\n\n        \n            \n        , coalesce(count_fulfillment_attempted_delivery, 0) as count_fulfillment_attempted_delivery\n            \n        , coalesce(count_fulfillment_delivered, 0) as count_fulfillment_delivered\n            \n        , coalesce(count_fulfillment_failure, 0) as count_fulfillment_failure\n            \n        , coalesce(count_fulfillment_in_transit, 0) as count_fulfillment_in_transit\n            \n        , coalesce(count_fulfillment_out_for_delivery, 0) as count_fulfillment_out_for_delivery\n            \n        , coalesce(count_fulfillment_ready_for_pickup, 0) as count_fulfillment_ready_for_pickup\n            \n        , coalesce(count_fulfillment_picked_up, 0) as count_fulfillment_picked_up\n            \n        , coalesce(count_fulfillment_label_printed, 0) as count_fulfillment_label_printed\n            \n        , coalesce(count_fulfillment_label_purchased, 0) as count_fulfillment_label_purchased\n            \n        , coalesce(count_fulfillment_confirmed, 0) as count_fulfillment_confirmed\n            \n        \n\n    from shop_calendar\n    left join daily_orders \n        on shop_calendar.source_relation = daily_orders.source_relation\n        and shop_calendar.date_day = daily_orders.date_day\n    left join daily_abandoned_checkouts \n        on shop_calendar.source_relation = daily_abandoned_checkouts.source_relation\n        and shop_calendar.date_day = daily_abandoned_checkouts.date_day\n    \n    left join daily_fulfillment \n        on shop_calendar.source_relation = daily_fulfillment.source_relation\n        and shop_calendar.date_day = daily_fulfillment.date_day\n    \n    \n)\n\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__daily_shop\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.078267Z", "completed_at": "2024-03-20T17:30:38.105505Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.106056Z", "completed_at": "2024-03-20T17:30:38.106062Z"}], "thread_id": "Thread-2", "execution_time": 0.028870820999145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__discounts", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n),  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), discount as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(discount_code_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as discounts_unique_key\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__discount_code\"\n\n    \n    where cast(coalesce(updated_at, created_at) as date) >= \n\n\n\n    coalesce(\n        (select \n\n    max(cast(coalesce(updated_at, created_at) as date)) + ((interval '1 day') * (-7))\n\n \n            from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__discounts\"), \n        '2010-01-01'\n        )\n\n\n    \n),\n\nprice_rule as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__price_rule\"\n),\n\norders_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n),\n\nabandoned_checkouts_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n),\n\ndiscount_price_rule_joined as (\n\n    select\n        discount.*,\n        price_rule.target_selection,\n        price_rule.target_type,\n        price_rule.title,\n        price_rule.usage_limit,\n        price_rule.value,\n        price_rule.value_type,\n        price_rule.allocation_limit,\n        price_rule.allocation_method,\n        price_rule.is_once_per_customer,\n        price_rule.customer_selection,\n        -- the below are NULL if customer_selection = all\n        price_rule.prereq_min_quantity,\n        price_rule.prereq_max_shipping_price,\n        price_rule.prereq_min_subtotal,\n        price_rule.prereq_min_purchase_quantity_for_entitlement,\n        price_rule.prereq_buy_x_get_this,\n        price_rule.prereq_buy_this_get_y,\n        price_rule.starts_at,\n        price_rule.ends_at,\n        price_rule.created_at as price_rule_created_at,\n        price_rule.updated_at as price_rule_updated_at\n\n    from discount\n    left join price_rule\n        on discount.price_rule_id = price_rule.price_rule_id\n        and discount.source_relation = price_rule.source_relation\n),\n\naggregates_joined as (\n\n    select \n        discount_price_rule_joined.*,\n        coalesce(orders_aggregated.count_orders, 0) as count_orders,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        orders_aggregated.avg_order_discount_amount,\n        coalesce(orders_aggregated.total_order_discount_amount, 0) as total_order_discount_amount,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_discount_amount, 0) as total_abandoned_checkout_discount_amount,\n        coalesce(orders_aggregated.total_order_line_items_price, 0) as total_order_line_items_price,\n        coalesce(orders_aggregated.total_order_shipping_cost, 0) as total_order_shipping_cost,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_shipping_price, 0) as total_abandoned_checkout_shipping_price,\n        coalesce(orders_aggregated.total_order_refund_amount, 0) as total_order_refund_amount,\n        coalesce(orders_aggregated.count_customers, 0) as count_customers,\n        coalesce(orders_aggregated.count_customer_emails, 0) as count_customer_emails,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customers, 0) as count_abandoned_checkout_customers,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customer_emails, 0) as count_abandoned_checkout_customer_emails\n\n    from discount_price_rule_joined\n    left join orders_aggregated\n        on discount_price_rule_joined.code = orders_aggregated.code\n        and discount_price_rule_joined.source_relation = orders_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = orders_aggregated.type\n        \n    left join abandoned_checkouts_aggregated\n        on discount_price_rule_joined.code = abandoned_checkouts_aggregated.code\n        and discount_price_rule_joined.source_relation = abandoned_checkouts_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = abandoned_checkouts_aggregated.type \n)\n\nselect * \nfrom aggregates_joined", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__discounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.108125Z", "completed_at": "2024-03-20T17:30:38.113716Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.114217Z", "completed_at": "2024-03-20T17:30:38.114221Z"}], "thread_id": "Thread-2", "execution_time": 0.007501125335693359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.115851Z", "completed_at": "2024-03-20T17:30:38.125380Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.126161Z", "completed_at": "2024-03-20T17:30:38.126167Z"}], "thread_id": "Thread-2", "execution_time": 0.011615991592407227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__products", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_variant\"\n),\n\nproduct_image as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_image\"\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), products as (\n\n    select *\n    from __dbt__cte__int_shopify__products_with_aggregates\n\n), product_order_lines as (\n\n    select *\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(product_order_lines.quantity_sold,0) as total_quantity_sold,\n        coalesce(product_order_lines.subtotal_sold,0) as subtotal_sold,\n        coalesce(product_order_lines.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(product_order_lines.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        product_order_lines.first_order_timestamp,\n        product_order_lines.most_recent_order_timestamp,\n        product_order_lines.avg_quantity_per_order_line as avg_quantity_per_order_line,\n        coalesce(product_order_lines.product_total_discount,0) as product_total_discount,\n        product_order_lines.product_avg_discount_per_order_line as product_avg_discount_per_order_line,\n        coalesce(product_order_lines.product_total_tax,0) as product_total_tax,\n        product_order_lines.product_avg_tax_per_order_line as product_avg_tax_per_order_line\n\n    from products\n    left join product_order_lines\n        on products.product_id = product_order_lines.product_id\n        and products.source_relation = product_order_lines.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.128732Z", "completed_at": "2024-03-20T17:30:38.133267Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.133801Z", "completed_at": "2024-03-20T17:30:38.133805Z"}], "thread_id": "Thread-2", "execution_time": 0.0061817169189453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.280281Z", "completed_at": "2024-03-20T17:30:38.074789Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.075700Z", "completed_at": "2024-03-20T17:30:38.075707Z"}], "thread_id": "Thread-1", "execution_time": 0.8608217239379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__order_metafields", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\"\n)\n\n,\nlookup_object as (\n    select \n        *,\n        \n  \n    (\n      \n      case\n      when metafield_reference = 'blade_runner_returnauthorizations'\n        then value\n      else null\n      end\n    )\n    \n      \n        as blade_runner_returnauthorizations\n      \n    \n    \n  \n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__metafield\"\n    where is_most_recent_record\n),\n\nfinal as (\n    select\n        \n            source_table.order_id,\n        \n            source_table.user_id,\n        \n            source_table.total_discounts,\n        \n            source_table.total_discounts_set,\n        \n            source_table.total_line_items_price,\n        \n            source_table.total_line_items_price_set,\n        \n            source_table.total_price,\n        \n            source_table.total_price_set,\n        \n            source_table.total_tax_set,\n        \n            source_table.total_tax,\n        \n            source_table.source_name,\n        \n            source_table.subtotal_price,\n        \n            source_table.has_taxes_included,\n        \n            source_table.total_weight,\n        \n            source_table.total_tip_received,\n        \n            source_table.landing_site_base_url,\n        \n            source_table.location_id,\n        \n            source_table.name,\n        \n            source_table.note,\n        \n            source_table.number,\n        \n            source_table.order_number,\n        \n            source_table.cancel_reason,\n        \n            source_table.cart_token,\n        \n            source_table.checkout_token,\n        \n            source_table.created_timestamp,\n        \n            source_table.cancelled_timestamp,\n        \n            source_table.closed_timestamp,\n        \n            source_table.processed_timestamp,\n        \n            source_table.updated_timestamp,\n        \n            source_table.currency,\n        \n            source_table.customer_id,\n        \n            source_table.email,\n        \n            source_table.financial_status,\n        \n            source_table.fulfillment_status,\n        \n            source_table.referring_site,\n        \n            source_table.billing_address_address_1,\n        \n            source_table.billing_address_address_2,\n        \n            source_table.billing_address_city,\n        \n            source_table.billing_address_company,\n        \n            source_table.billing_address_country,\n        \n            source_table.billing_address_country_code,\n        \n            source_table.billing_address_first_name,\n        \n            source_table.billing_address_last_name,\n        \n            source_table.billing_address_latitude,\n        \n            source_table.billing_address_longitude,\n        \n            source_table.billing_address_name,\n        \n            source_table.billing_address_phone,\n        \n            source_table.billing_address_province,\n        \n            source_table.billing_address_province_code,\n        \n            source_table.billing_address_zip,\n        \n            source_table.browser_ip,\n        \n            source_table.total_shipping_price_set,\n        \n            source_table.shipping_address_address_1,\n        \n            source_table.shipping_address_address_2,\n        \n            source_table.shipping_address_city,\n        \n            source_table.shipping_address_company,\n        \n            source_table.shipping_address_country,\n        \n            source_table.shipping_address_country_code,\n        \n            source_table.shipping_address_first_name,\n        \n            source_table.shipping_address_last_name,\n        \n            source_table.shipping_address_latitude,\n        \n            source_table.shipping_address_longitude,\n        \n            source_table.shipping_address_name,\n        \n            source_table.shipping_address_phone,\n        \n            source_table.shipping_address_province,\n        \n            source_table.shipping_address_province_code,\n        \n            source_table.shipping_address_zip,\n        \n            source_table.token,\n        \n            source_table.app_id,\n        \n            source_table.checkout_id,\n        \n            source_table.client_details_user_agent,\n        \n            source_table.customer_locale,\n        \n            source_table.order_status_url,\n        \n            source_table.presentment_currency,\n        \n            source_table.is_test_order,\n        \n            source_table.is_deleted,\n        \n            source_table.has_buyer_accepted_marketing,\n        \n            source_table.is_confirmed,\n        \n            source_table._fivetran_synced,\n        \n            source_table.source_relation\n        \n        \n            , max(lookup_object.blade_runner_returnauthorizations) as metafield_blade_runner_returnauthorizations\n        \n    from source_table\n    left join lookup_object \n        on lookup_object.owner_resource_id = source_table.order_id\n        and lookup_object.owner_resource = 'order'\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80\n)\n\nselect *\nfrom final\n\n", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__order_metafields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.135458Z", "completed_at": "2024-03-20T17:30:38.140430Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.141605Z", "completed_at": "2024-03-20T17:30:38.141609Z"}], "thread_id": "Thread-2", "execution_time": 0.010501861572265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__daily_shop\"\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.141874Z", "completed_at": "2024-03-20T17:30:38.153567Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.154724Z", "completed_at": "2024-03-20T17:30:38.154731Z"}], "thread_id": "Thread-1", "execution_time": 0.015157938003540039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        code, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__discounts\"\n    group by code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.146727Z", "completed_at": "2024-03-20T17:30:38.155006Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.157411Z", "completed_at": "2024-03-20T17:30:38.157416Z"}], "thread_id": "Thread-2", "execution_time": 0.01275181770324707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__discounts\"\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.160610Z", "completed_at": "2024-03-20T17:30:38.168949Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.169741Z", "completed_at": "2024-03-20T17:30:38.169747Z"}], "thread_id": "Thread-1", "execution_time": 0.011973857879638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discounts_unique_key\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__discounts\"\nwhere discounts_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.165461Z", "completed_at": "2024-03-20T17:30:38.175620Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.176401Z", "completed_at": "2024-03-20T17:30:38.176406Z"}], "thread_id": "Thread-2", "execution_time": 0.012424945831298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    discounts_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__discounts\"\nwhere discounts_unique_key is not null\ngroup by discounts_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.171566Z", "completed_at": "2024-03-20T17:30:38.177419Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.178095Z", "completed_at": "2024-03-20T17:30:38.178100Z"}], "thread_id": "Thread-1", "execution_time": 0.007822036743164062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__products\"\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.362287Z", "completed_at": "2024-03-20T17:30:38.107852Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.113117Z", "completed_at": "2024-03-20T17:30:38.113122Z"}], "thread_id": "Thread-6", "execution_time": 0.8245720863342285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__product_metafields", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product\"\n)\n\n\n\nselect *\nfrom source_table\n\n", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__product_metafields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.372713Z", "completed_at": "2024-03-20T17:30:38.125909Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.127213Z", "completed_at": "2024-03-20T17:30:38.127216Z"}], "thread_id": "Thread-3", "execution_time": 0.8142380714416504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__shop_metafields", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__shop\"\n)\n\n\n\nselect *\nfrom source_table\n\n", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__shop_metafields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.342814Z", "completed_at": "2024-03-20T17:30:38.154378Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.156789Z", "completed_at": "2024-03-20T17:30:38.156794Z"}], "thread_id": "Thread-5", "execution_time": 0.8847930431365967, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__product_image_metafields", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_image\"\n)\n\n\n\nselect *\nfrom source_table\n\n", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__product_image_metafields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.439784Z", "completed_at": "2024-03-20T17:30:38.156475Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.159163Z", "completed_at": "2024-03-20T17:30:38.159167Z"}], "thread_id": "Thread-4", "execution_time": 0.785454273223877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__product_variant_metafields", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__product_variant\"\n)\n\n\n\nselect *\nfrom source_table\n\n", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__product_variant_metafields\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.963444Z", "completed_at": "2024-03-20T17:30:38.584346Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.585598Z", "completed_at": "2024-03-20T17:30:38.585606Z"}], "thread_id": "Thread-8", "execution_time": 0.683225154876709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_emails", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), customer_emails as (\n\n    select \n        \"email\",\n  \"source_relation\",\n  \"customer_ids\",\n  \"phone_numbers\",\n  \"customer_tags\",\n  \"first_account_created_at\",\n  \"last_account_created_at\",\n  \"last_updated_at\",\n  \"marketing_consent_updated_at\",\n  \"last_fivetran_synced\",\n  \"is_tax_exempt\",\n  \"is_verified_email\",\n  \"first_name\",\n  \"last_name\",\n  \"default_address_id\",\n  \"account_state\",\n  \"note\",\n  \"currency\",\n  \"marketing_consent_state\",\n  \"marketing_opt_in_level\"\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"int_shopify__customer_email_rollup\"\n\n), orders as (\n\n    select *\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    where email is not null\n\n), abandoned as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n    where email is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customer_emails.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customer_emails\n    left join orders\n        on customer_emails.email = orders.email\n        and customer_emails.source_relation = orders.source_relation\n    left join abandoned\n        on customer_emails.email = abandoned.email\n        and customer_emails.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_emails\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:37.988411Z", "completed_at": "2024-03-20T17:30:38.584775Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.585883Z", "completed_at": "2024-03-20T17:30:38.585887Z"}], "thread_id": "Thread-7", "execution_time": 0.6555531024932861, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customers", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer_tag\"\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), customers as (\n\n    select \n        \"customer_id\",\n  \"email\",\n  \"first_name\",\n  \"last_name\",\n  \"default_address_id\",\n  \"phone\",\n  \"account_state\",\n  \"is_tax_exempt\",\n  \"is_verified_email\",\n  \"note\",\n  \"currency\",\n  \"marketing_consent_state\",\n  \"marketing_opt_in_level\",\n  \"marketing_consent_updated_at\",\n  \"created_timestamp\",\n  \"updated_timestamp\",\n  \"_fivetran_synced\",\n  \"source_relation\"\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__customer\"\n\n), orders as (\n\n    select *\n    from __dbt__cte__shopify__customers__order_aggregates\n\n), abandoned as (\n\n    select \n        customer_id,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from \"postgres\".\"shopify_integration_tests_56_stg_shopify\".\"stg_shopify__abandoned_checkout\"\n    where customer_id is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customers.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.customer_tags,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customers\n    left join orders\n        on customers.customer_id = orders.customer_id\n        and customers.source_relation = orders.source_relation\n    left join abandoned\n        on customers.customer_id = abandoned.customer_id\n        and customers.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.644188Z", "completed_at": "2024-03-20T17:30:38.666069Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.674577Z", "completed_at": "2024-03-20T17:30:38.674590Z"}], "thread_id": "Thread-2", "execution_time": 0.031900882720947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__calendar\"\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n    \n    and cast(date_day as date) >= \n\n\n\n    coalesce(\n        (select \n\n    max(date_month) + ((interval '1 month') * (-1))\n\n \n            from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_cohorts\"), \n        '2010-01-01'\n        )\n\n\n    \n\n), customers as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customers\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        cast(date_trunc('month', first_order_timestamp) as date) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    customer_id\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        customer_id,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_cohorts\"\n    where date_month < \n\n\n\n    coalesce(\n        (select \n\n    max(date_month) + ((interval '1 month') * (-1))\n\n \n            from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_cohorts\"), \n        '2010-01-01'\n        )\n\n\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.customer_id, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        backfill_lifetime_sums.previous_cohort_month_number + windows.cohort_month_number as cohort_month_number,\n        backfill_lifetime_sums.previous_total_price_lifetime + windows.total_price_lifetime as total_price_lifetime,\n        backfill_lifetime_sums.previous_order_count_lifetime + windows.order_count_lifetime as order_count_lifetime,\n        backfill_lifetime_sums.previous_line_item_count_lifetime + windows.line_item_count_lifetime as line_item_count_lifetime,\n        md5(cast(coalesce(cast(windows.date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.customer_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.customer_id = windows.customer_id\n\n\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_cohorts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.651197Z", "completed_at": "2024-03-20T17:30:38.670767Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.674939Z", "completed_at": "2024-03-20T17:30:38.674943Z"}], "thread_id": "Thread-1", "execution_time": 0.02576279640197754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_email_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__calendar\"\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n    \n    and cast(date_day as date) >= \n\n\n\n    coalesce(\n        (select \n\n    max(date_month) + ((interval '1 month') * (-1))\n\n \n            from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_email_cohorts\"), \n        '2010-01-01'\n        )\n\n\n    \n\n), customers as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_emails\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__orders\"\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.email,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        date_trunc('month', first_order_timestamp) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.email, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.email = orders.email\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    email\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        email,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_email_cohorts\"\n    where date_month < \n\n\n\n    coalesce(\n        (select \n\n    max(date_month) + ((interval '1 month') * (-1))\n\n \n            from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_email_cohorts\"), \n        '2010-01-01'\n        )\n\n\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.email, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        backfill_lifetime_sums.previous_cohort_month_number + windows.cohort_month_number as cohort_month_number,\n        backfill_lifetime_sums.previous_total_price_lifetime + windows.total_price_lifetime as total_price_lifetime,\n        backfill_lifetime_sums.previous_order_count_lifetime + windows.order_count_lifetime as order_count_lifetime,\n        backfill_lifetime_sums.previous_line_item_count_lifetime + windows.line_item_count_lifetime as line_item_count_lifetime,\n        md5(cast(coalesce(cast(windows.date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.email as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.email = windows.email\n\n\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_email_cohorts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.666603Z", "completed_at": "2024-03-20T17:30:38.675813Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.678090Z", "completed_at": "2024-03-20T17:30:38.678094Z"}], "thread_id": "Thread-6", "execution_time": 0.015108823776245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_emails\"\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.671262Z", "completed_at": "2024-03-20T17:30:38.676654Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.678826Z", "completed_at": "2024-03-20T17:30:38.678830Z"}], "thread_id": "Thread-3", "execution_time": 0.0158689022064209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customers\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.682674Z", "completed_at": "2024-03-20T17:30:38.695692Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.696239Z", "completed_at": "2024-03-20T17:30:38.696245Z"}], "thread_id": "Thread-4", "execution_time": 0.017609834671020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_cohorts\"\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.688894Z", "completed_at": "2024-03-20T17:30:38.697097Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.697588Z", "completed_at": "2024-03-20T17:30:38.697591Z"}], "thread_id": "Thread-7", "execution_time": 0.017667055130004883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_email_cohorts\"\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.686053Z", "completed_at": "2024-03-20T17:30:38.698351Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.698878Z", "completed_at": "2024-03-20T17:30:38.698881Z"}], "thread_id": "Thread-8", "execution_time": 0.020112037658691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_cohorts\"\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-20T17:30:38.692486Z", "completed_at": "2024-03-20T17:30:38.699130Z"}, {"name": "execute", "started_at": "2024-03-20T17:30:38.700226Z", "completed_at": "2024-03-20T17:30:38.700229Z"}], "thread_id": "Thread-5", "execution_time": 0.01994490623474121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_56_shopify\".\"shopify__customer_email_cohorts\"\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 7.471864223480225, "args": {"write_json": true, "log_level": "info", "populate_cache": true, "print": true, "version_check": true, "log_format": "default", "introspect": true, "warn_error_options": {"include": [], "exclude": []}, "static": false, "use_colors": true, "cache_selected_only": false, "show_resource_report": false, "vars": {}, "strict_mode": false, "send_anonymous_usage_stats": true, "which": "generate", "invocation_command": "dbt docs generate", "log_format_file": "debug", "select": [], "macro_debugging": false, "exclude": [], "indirect_selection": "eager", "static_parser": true, "quiet": false, "empty_catalog": false, "favor_state": false, "defer": false, "project_dir": "/Users/catherinefritz/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "compile": true, "profiles_dir": "/Users/catherinefritz/.dbt", "use_colors_file": true, "log_path": "/Users/catherinefritz/Documents/dbt_packages/shopify/dbt_shopify/integration_tests/logs", "partial_parse": true, "printer_width": 80, "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "enable_legacy_logger": false, "log_level_file": "debug"}}
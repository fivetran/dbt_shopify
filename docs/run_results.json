{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.2", "generated_at": "2024-06-07T22:52:27.182988Z", "invocation_id": "147f2aaf-2b3a-435d-b90b-c67c698409be", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:17.324449Z", "completed_at": "2024-06-07T22:52:17.702286Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:17.702541Z", "completed_at": "2024-06-07T22:52:17.702584Z"}], "thread_id": "Thread-4", "execution_time": 0.4184131622314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_abandoned_checkout_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:17.311366Z", "completed_at": "2024-06-07T22:52:17.750458Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:17.750713Z", "completed_at": "2024-06-07T22:52:17.750720Z"}], "thread_id": "Thread-2", "execution_time": 0.4685630798339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_abandoned_checkout_discount_code_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:17.353880Z", "completed_at": "2024-06-07T22:52:17.755058Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:17.755808Z", "completed_at": "2024-06-07T22:52:17.755815Z"}], "thread_id": "Thread-3", "execution_time": 0.4724750518798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_abandoned_checkout_shipping_line_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:17.703765Z", "completed_at": "2024-06-07T22:52:18.075601Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.075838Z", "completed_at": "2024-06-07T22:52:18.075845Z"}], "thread_id": "Thread-4", "execution_time": 0.3726167678833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_collection_product_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_product_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:17.758137Z", "completed_at": "2024-06-07T22:52:18.080621Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.080875Z", "completed_at": "2024-06-07T22:52:18.080880Z"}], "thread_id": "Thread-3", "execution_time": 0.3237287998199463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_customer_tag_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tag_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:17.751823Z", "completed_at": "2024-06-07T22:52:18.110402Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.110638Z", "completed_at": "2024-06-07T22:52:18.110643Z"}], "thread_id": "Thread-2", "execution_time": 0.35933494567871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_collection_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.081915Z", "completed_at": "2024-06-07T22:52:18.409077Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.409317Z", "completed_at": "2024-06-07T22:52:18.409323Z"}], "thread_id": "Thread-3", "execution_time": 0.32793283462524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_discount_code_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__discount_code_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.076950Z", "completed_at": "2024-06-07T22:52:18.439033Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.440047Z", "completed_at": "2024-06-07T22:52:18.440058Z"}], "thread_id": "Thread-4", "execution_time": 0.36385202407836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_customer_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.111724Z", "completed_at": "2024-06-07T22:52:18.450778Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.451394Z", "completed_at": "2024-06-07T22:52:18.451422Z"}], "thread_id": "Thread-2", "execution_time": 0.3404059410095215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_fulfillment_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__fulfillment_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:17.286227Z", "completed_at": "2024-06-07T22:52:18.564945Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.565207Z", "completed_at": "2024-06-07T22:52:18.565214Z"}], "thread_id": "Thread-1", "execution_time": 1.2847931385040283, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__calendar", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1984\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2019-01-01' as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date\n\n)\n\nselect * from filtered\n\n", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__calendar`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.453420Z", "completed_at": "2024-06-07T22:52:18.754527Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.754768Z", "completed_at": "2024-06-07T22:52:18.754775Z"}], "thread_id": "Thread-2", "execution_time": 0.3022449016571045, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_location_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__location_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.410428Z", "completed_at": "2024-06-07T22:52:18.779084Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.779320Z", "completed_at": "2024-06-07T22:52:18.779325Z"}], "thread_id": "Thread-3", "execution_time": 0.36940693855285645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_inventory_item_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_item_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.444373Z", "completed_at": "2024-06-07T22:52:18.853823Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.854054Z", "completed_at": "2024-06-07T22:52:18.854060Z"}], "thread_id": "Thread-4", "execution_time": 0.411362886428833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_inventory_level_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_level_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.566491Z", "completed_at": "2024-06-07T22:52:18.886925Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:18.887158Z", "completed_at": "2024-06-07T22:52:18.887164Z"}], "thread_id": "Thread-1", "execution_time": 0.32126712799072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_metafield_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__metafield_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.755879Z", "completed_at": "2024-06-07T22:52:19.084711Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.084952Z", "completed_at": "2024-06-07T22:52:19.084959Z"}], "thread_id": "Thread-2", "execution_time": 0.32961201667785645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_adjustment_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_adjustment_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.780352Z", "completed_at": "2024-06-07T22:52:19.132524Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.132766Z", "completed_at": "2024-06-07T22:52:19.132775Z"}], "thread_id": "Thread-3", "execution_time": 0.35294103622436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_discount_code_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_discount_code_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.855132Z", "completed_at": "2024-06-07T22:52:19.205359Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.205591Z", "completed_at": "2024-06-07T22:52:19.205600Z"}], "thread_id": "Thread-4", "execution_time": 0.3509979248046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_line_refund_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_refund_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:18.888248Z", "completed_at": "2024-06-07T22:52:19.241460Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.241686Z", "completed_at": "2024-06-07T22:52:19.241692Z"}], "thread_id": "Thread-1", "execution_time": 0.3539578914642334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_line_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.086079Z", "completed_at": "2024-06-07T22:52:19.431898Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.432133Z", "completed_at": "2024-06-07T22:52:19.432140Z"}], "thread_id": "Thread-2", "execution_time": 0.34659504890441895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_note_attribute_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_note_attribute_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.133882Z", "completed_at": "2024-06-07T22:52:19.442168Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.442391Z", "completed_at": "2024-06-07T22:52:19.442397Z"}], "thread_id": "Thread-3", "execution_time": 0.3090219497680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_shipping_line_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.242771Z", "completed_at": "2024-06-07T22:52:19.489973Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.490241Z", "completed_at": "2024-06-07T22:52:19.490247Z"}], "thread_id": "Thread-1", "execution_time": 0.2480030059814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_tag_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_tag_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.206705Z", "completed_at": "2024-06-07T22:52:19.568193Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.568473Z", "completed_at": "2024-06-07T22:52:19.568481Z"}], "thread_id": "Thread-4", "execution_time": 0.3623192310333252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_shipping_tax_line_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_tax_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.443476Z", "completed_at": "2024-06-07T22:52:19.752308Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.752544Z", "completed_at": "2024-06-07T22:52:19.752551Z"}], "thread_id": "Thread-3", "execution_time": 0.30963993072509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_url_tag_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_url_tag_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.433310Z", "completed_at": "2024-06-07T22:52:19.763485Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.763732Z", "completed_at": "2024-06-07T22:52:19.763739Z"}], "thread_id": "Thread-2", "execution_time": 0.3310370445251465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_order_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.491345Z", "completed_at": "2024-06-07T22:52:19.840543Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.840822Z", "completed_at": "2024-06-07T22:52:19.840829Z"}], "thread_id": "Thread-1", "execution_time": 0.35001492500305176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_price_rule_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__price_rule_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.570019Z", "completed_at": "2024-06-07T22:52:19.915717Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:19.915953Z", "completed_at": "2024-06-07T22:52:19.915962Z"}], "thread_id": "Thread-4", "execution_time": 0.3467731475830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_product_image_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_image_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.753666Z", "completed_at": "2024-06-07T22:52:20.065031Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.065269Z", "completed_at": "2024-06-07T22:52:20.065276Z"}], "thread_id": "Thread-3", "execution_time": 0.3121500015258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_product_tag_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tag_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.765049Z", "completed_at": "2024-06-07T22:52:20.073798Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.074018Z", "completed_at": "2024-06-07T22:52:20.074023Z"}], "thread_id": "Thread-2", "execution_time": 0.30962085723876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_product_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.842009Z", "completed_at": "2024-06-07T22:52:20.285326Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.285583Z", "completed_at": "2024-06-07T22:52:20.285590Z"}], "thread_id": "Thread-1", "execution_time": 0.4441521167755127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_product_variant_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_variant_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:19.917135Z", "completed_at": "2024-06-07T22:52:20.289816Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.290464Z", "completed_at": "2024-06-07T22:52:20.290469Z"}], "thread_id": "Thread-4", "execution_time": 0.37392091751098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund_tmp", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a refund in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_refund_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__refund_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.066382Z", "completed_at": "2024-06-07T22:52:20.491822Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.492054Z", "completed_at": "2024-06-07T22:52:20.492061Z"}], "thread_id": "Thread-3", "execution_time": 0.42619895935058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_shop_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__shop_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.493271Z", "completed_at": "2024-06-07T22:52:20.495501Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.495742Z", "completed_at": "2024-06-07T22:52:20.495746Z"}], "thread_id": "Thread-3", "execution_time": 0.0030248165130615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.496865Z", "completed_at": "2024-06-07T22:52:20.498359Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.498591Z", "completed_at": "2024-06-07T22:52:20.498595Z"}], "thread_id": "Thread-3", "execution_time": 0.002290010452270508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_discount_code_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.499594Z", "completed_at": "2024-06-07T22:52:20.501015Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.501231Z", "completed_at": "2024-06-07T22:52:20.501235Z"}], "thread_id": "Thread-3", "execution_time": 0.0021109580993652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.502269Z", "completed_at": "2024-06-07T22:52:20.503694Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.503922Z", "completed_at": "2024-06-07T22:52:20.503926Z"}], "thread_id": "Thread-3", "execution_time": 0.0021543502807617188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_collection_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.504920Z", "completed_at": "2024-06-07T22:52:20.506396Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.506602Z", "completed_at": "2024-06-07T22:52:20.506606Z"}], "thread_id": "Thread-3", "execution_time": 0.002148151397705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_collection_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.507548Z", "completed_at": "2024-06-07T22:52:20.509727Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.509963Z", "completed_at": "2024-06-07T22:52:20.509967Z"}], "thread_id": "Thread-3", "execution_time": 0.0028748512268066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.511096Z", "completed_at": "2024-06-07T22:52:20.512551Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.512776Z", "completed_at": "2024-06-07T22:52:20.512781Z"}], "thread_id": "Thread-3", "execution_time": 0.002209186553955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_customer_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.513809Z", "completed_at": "2024-06-07T22:52:20.515217Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.515437Z", "completed_at": "2024-06-07T22:52:20.515441Z"}], "thread_id": "Thread-3", "execution_time": 0.0020983219146728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_discount_code_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.516407Z", "completed_at": "2024-06-07T22:52:20.517881Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.518107Z", "completed_at": "2024-06-07T22:52:20.518111Z"}], "thread_id": "Thread-3", "execution_time": 0.0021648406982421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_fulfillment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.519082Z", "completed_at": "2024-06-07T22:52:20.521226Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.521445Z", "completed_at": "2024-06-07T22:52:20.521449Z"}], "thread_id": "Thread-3", "execution_time": 0.0028400421142578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_fulfillment_event_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.522405Z", "completed_at": "2024-06-07T22:52:20.523803Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.524014Z", "completed_at": "2024-06-07T22:52:20.524018Z"}], "thread_id": "Thread-3", "execution_time": 0.0020589828491210938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_inventory_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.524984Z", "completed_at": "2024-06-07T22:52:20.526353Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.526567Z", "completed_at": "2024-06-07T22:52:20.526571Z"}], "thread_id": "Thread-3", "execution_time": 0.0020689964294433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_inventory_level_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.527504Z", "completed_at": "2024-06-07T22:52:20.528918Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.529188Z", "completed_at": "2024-06-07T22:52:20.529192Z"}], "thread_id": "Thread-3", "execution_time": 0.002126932144165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_location_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.530123Z", "completed_at": "2024-06-07T22:52:20.532226Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.532457Z", "completed_at": "2024-06-07T22:52:20.532461Z"}], "thread_id": "Thread-3", "execution_time": 0.002785205841064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_metafield_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.533433Z", "completed_at": "2024-06-07T22:52:20.534837Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.535046Z", "completed_at": "2024-06-07T22:52:20.535050Z"}], "thread_id": "Thread-3", "execution_time": 0.0020689964294433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_adjustment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.536038Z", "completed_at": "2024-06-07T22:52:20.537462Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.537669Z", "completed_at": "2024-06-07T22:52:20.537673Z"}], "thread_id": "Thread-3", "execution_time": 0.0020911693572998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.538618Z", "completed_at": "2024-06-07T22:52:20.540033Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.540231Z", "completed_at": "2024-06-07T22:52:20.540234Z"}], "thread_id": "Thread-3", "execution_time": 0.0020689964294433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_discount_code_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.541146Z", "completed_at": "2024-06-07T22:52:20.542568Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.542768Z", "completed_at": "2024-06-07T22:52:20.542771Z"}], "thread_id": "Thread-3", "execution_time": 0.0020580291748046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.543690Z", "completed_at": "2024-06-07T22:52:20.545837Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.546060Z", "completed_at": "2024-06-07T22:52:20.546064Z"}], "thread_id": "Thread-3", "execution_time": 0.0028181076049804688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_line_refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.547006Z", "completed_at": "2024-06-07T22:52:20.548422Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.548627Z", "completed_at": "2024-06-07T22:52:20.548631Z"}], "thread_id": "Thread-3", "execution_time": 0.0020711421966552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_note_attribute_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.549562Z", "completed_at": "2024-06-07T22:52:20.550972Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.551171Z", "completed_at": "2024-06-07T22:52:20.551174Z"}], "thread_id": "Thread-3", "execution_time": 0.002050161361694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.552097Z", "completed_at": "2024-06-07T22:52:20.553527Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.553736Z", "completed_at": "2024-06-07T22:52:20.553739Z"}], "thread_id": "Thread-3", "execution_time": 0.00208282470703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_shipping_tax_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.554667Z", "completed_at": "2024-06-07T22:52:20.556860Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.557214Z", "completed_at": "2024-06-07T22:52:20.557218Z"}], "thread_id": "Thread-3", "execution_time": 0.003004789352416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.558994Z", "completed_at": "2024-06-07T22:52:20.560558Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.560831Z", "completed_at": "2024-06-07T22:52:20.560836Z"}], "thread_id": "Thread-3", "execution_time": 0.0027480125427246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_order_url_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.562077Z", "completed_at": "2024-06-07T22:52:20.563684Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.563974Z", "completed_at": "2024-06-07T22:52:20.563978Z"}], "thread_id": "Thread-3", "execution_time": 0.0026628971099853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_price_rule_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.075140Z", "completed_at": "2024-06-07T22:52:20.565210Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.567162Z", "completed_at": "2024-06-07T22:52:20.567167Z"}], "thread_id": "Thread-2", "execution_time": 0.49254584312438965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_tax_line_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tax_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.565431Z", "completed_at": "2024-06-07T22:52:20.566879Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.567578Z", "completed_at": "2024-06-07T22:52:20.567581Z"}], "thread_id": "Thread-3", "execution_time": 0.0029566287994384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.569742Z", "completed_at": "2024-06-07T22:52:20.571435Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.574395Z", "completed_at": "2024-06-07T22:52:20.574401Z"}], "thread_id": "Thread-2", "execution_time": 0.005754947662353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_image_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.571702Z", "completed_at": "2024-06-07T22:52:20.574095Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.574845Z", "completed_at": "2024-06-07T22:52:20.574848Z"}], "thread_id": "Thread-3", "execution_time": 0.005816936492919922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_tag_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.576503Z", "completed_at": "2024-06-07T22:52:20.578043Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.580093Z", "completed_at": "2024-06-07T22:52:20.580097Z"}], "thread_id": "Thread-2", "execution_time": 0.004467964172363281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_product_variant_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.578283Z", "completed_at": "2024-06-07T22:52:20.579826Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.580485Z", "completed_at": "2024-06-07T22:52:20.580487Z"}], "thread_id": "Thread-3", "execution_time": 0.004615068435668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.582087Z", "completed_at": "2024-06-07T22:52:20.583554Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.586472Z", "completed_at": "2024-06-07T22:52:20.586477Z"}], "thread_id": "Thread-2", "execution_time": 0.0052490234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_shop_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.583774Z", "completed_at": "2024-06-07T22:52:20.585958Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.587258Z", "completed_at": "2024-06-07T22:52:20.587262Z"}], "thread_id": "Thread-3", "execution_time": 0.005803823471069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_tax_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.286690Z", "completed_at": "2024-06-07T22:52:20.589153Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.592785Z", "completed_at": "2024-06-07T22:52:20.592790Z"}], "thread_id": "Thread-1", "execution_time": 0.3066120147705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_tender_transaction_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tender_transaction_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.589376Z", "completed_at": "2024-06-07T22:52:20.590863Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.593188Z", "completed_at": "2024-06-07T22:52:20.593192Z"}], "thread_id": "Thread-2", "execution_time": 0.005040168762207031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_tender_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.591125Z", "completed_at": "2024-06-07T22:52:20.592557Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.593549Z", "completed_at": "2024-06-07T22:52:20.593552Z"}], "thread_id": "Thread-3", "execution_time": 0.005126237869262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.shopify_integration_tests.shopify_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.292481Z", "completed_at": "2024-06-07T22:52:20.621939Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.622171Z", "completed_at": "2024-06-07T22:52:20.622178Z"}], "thread_id": "Thread-4", "execution_time": 0.3305511474609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`shopify_integration_tests_7`.`shopify_transaction_data`", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__transaction_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.595951Z", "completed_at": "2024-06-07T22:52:20.947786Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.948027Z", "completed_at": "2024-06-07T22:52:20.948035Z"}], "thread_id": "Thread-1", "execution_time": 0.3534259796142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as string) as \n    \n    abandoned_checkout_url\n    \n , \n    cast(null as string) as \n    \n    billing_address_address_1\n    \n , \n    cast(null as string) as \n    \n    billing_address_address_2\n    \n , \n    cast(null as string) as \n    \n    billing_address_city\n    \n , \n    cast(null as string) as \n    \n    billing_address_company\n    \n , \n    cast(null as string) as \n    \n    billing_address_country\n    \n , \n    cast(null as string) as \n    \n    billing_address_country_code\n    \n , \n    cast(null as string) as \n    \n    billing_address_first_name\n    \n , \n    cast(null as string) as \n    \n    billing_address_last_name\n    \n , \n    cast(null as string) as \n    \n    billing_address_latitude\n    \n , \n    cast(null as string) as \n    \n    billing_address_longitude\n    \n , \n    cast(null as string) as \n    \n    billing_address_name\n    \n , \n    cast(null as string) as \n    \n    billing_address_phone\n    \n , \n    cast(null as string) as \n    \n    billing_address_province\n    \n , \n    cast(null as string) as \n    \n    billing_address_province_code\n    \n , \n    cast(null as string) as \n    \n    billing_address_zip\n    \n , \n    cast(null as boolean) as \n    \n    buyer_accepts_marketing\n    \n , \n    cast(null as string) as \n    \n    cart_token\n    \n , \n    cast(null as timestamp) as \n    \n    closed_at\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as string) as \n    \n    currency\n    \n , \n    cast(null as INT64) as \n    \n    customer_id\n    \n , \n    cast(null as string) as \n    \n    customer_locale\n    \n , \n    cast(null as INT64) as \n    \n    device_id\n    \n , \n    cast(null as string) as \n    \n    email\n    \n , \n    cast(null as string) as \n    \n    gateway\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as string) as \n    \n    landing_site_base_url\n    \n , \n    cast(null as INT64) as \n    \n    location_id\n    \n , \n    cast(null as string) as \n    \n    name\n    \n , \n    cast(null as string) as \n    \n    note\n    \n , \n    cast(null as string) as \n    \n    phone\n    \n , \n    cast(null as string) as \n    \n    presentment_currency\n    \n , \n    cast(null as string) as \n    \n    referring_site\n    \n , \n    cast(null as string) as \n    \n    shipping_address_address_1\n    \n , \n    cast(null as string) as \n    \n    shipping_address_address_2\n    \n , \n    cast(null as string) as \n    \n    shipping_address_city\n    \n , \n    cast(null as string) as \n    \n    shipping_address_company\n    \n , \n    cast(null as string) as \n    \n    shipping_address_country\n    \n , \n    cast(null as string) as \n    \n    shipping_address_country_code\n    \n , \n    cast(null as string) as \n    \n    shipping_address_first_name\n    \n , \n    cast(null as string) as \n    \n    shipping_address_last_name\n    \n , \n    cast(null as string) as \n    \n    shipping_address_latitude\n    \n , \n    cast(null as string) as \n    \n    shipping_address_longitude\n    \n , \n    cast(null as string) as \n    \n    shipping_address_name\n    \n , \n    cast(null as string) as \n    \n    shipping_address_phone\n    \n , \n    cast(null as string) as \n    \n    shipping_address_province\n    \n , \n    cast(null as string) as \n    \n    shipping_address_province_code\n    \n , \n    cast(null as string) as \n    \n    shipping_address_zip\n    \n , \n    cast(null as string) as \n    \n    source_name\n    \n , \n    cast(null as FLOAT64) as \n    \n    subtotal_price\n    \n , \n    cast(null as boolean) as \n    \n    taxes_included\n    \n , \n    cast(null as string) as \n    \n    token\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_discounts\n    \n , \n    cast(null as string) as \n    \n    total_duties\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_line_items_price\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_price\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_tax\n    \n , \n    cast(null as INT64) as \n    \n    total_weight\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as INT64) as \n    \n    user_id\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted as is_deleted,\n        abandoned_checkout_url,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        cart_token,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(closed_at as timestamp), 'UTC')) as closed_at,\n        currency as shop_currency,\n        customer_id,\n        customer_locale,\n        device_id,\n        email,\n        gateway,\n        id as checkout_id,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        phone,\n        presentment_currency,\n        referring_site,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        token,\n        total_discounts,\n        total_duties,\n        total_line_items_price,\n        total_price,\n        total_tax,\n        total_weight,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        user_id,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.623391Z", "completed_at": "2024-06-07T22:52:20.963821Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.964053Z", "completed_at": "2024-06-07T22:52:20.964059Z"}], "thread_id": "Thread-4", "execution_time": 0.34122395515441895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection_product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_product_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    collection_id\n    \n , \n    cast(null as INT64) as \n    \n    product_id\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        collection_id,\n        product_id,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_product`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.606522Z", "completed_at": "2024-06-07T22:52:20.970186Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.975332Z", "completed_at": "2024-06-07T22:52:20.975338Z"}], "thread_id": "Thread-3", "execution_time": 0.38025426864624023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as string) as \n    \n    carrier_identifier\n    \n , \n    cast(null as INT64) as \n    \n    checkout_id\n    \n , \n    cast(null as string) as \n    \n    code\n    \n , \n    cast(null as string) as \n    \n    delivery_category\n    \n , \n    cast(null as string) as \n    \n    delivery_expectation_range\n    \n , \n    cast(null as INT64) as \n    \n    delivery_expectation_range_max\n    \n , \n    cast(null as INT64) as \n    \n    delivery_expectation_range_min\n    \n , \n    cast(null as string) as \n    \n    delivery_expectation_type\n    \n , \n    cast(null as FLOAT64) as \n    \n    discounted_price\n    \n , \n    cast(null as string) as \n    \n    id\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as string) as \n    \n    phone\n    \n , \n    cast(null as FLOAT64) as \n    \n    price\n    \n , \n    cast(null as string) as \n    \n    requested_fulfillment_service_id\n    \n , \n    cast(null as string) as \n    \n    source\n    \n , \n    cast(null as string) as \n    \n    title\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as abandoned_checkout_shipping_line_id,\n        checkout_id,\n        index,\n        carrier_identifier,\n        code as shipping_code,\n        delivery_category,\n        delivery_expectation_range,\n        delivery_expectation_range_max,\n        delivery_expectation_range_min,\n        delivery_expectation_type,\n        discounted_price,\n        phone,\n        price,\n        requested_fulfillment_service_id,\n        source,\n        title,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.601045Z", "completed_at": "2024-06-07T22:52:20.981701Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:20.981996Z", "completed_at": "2024-06-07T22:52:20.982001Z"}], "thread_id": "Thread-2", "execution_time": 0.3871598243713379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as FLOAT64) as \n    \n    amount\n    \n , \n    cast(null as INT64) as \n    \n    checkout_id\n    \n , \n    cast(null as string) as \n    \n    code\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as INT64) as \n    \n    discount_id\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as string) as \n    \n    type\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        checkout_id,\n        upper(code) as code,\n        discount_id,\n        amount,\n        type,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation, \n        case when checkout_id is null and code is null and index is null\n            then row_number() over(partition by source_relation order by source_relation)\n            else row_number() over(partition by checkout_id, upper(code), source_relation order by index desc)\n        end as index\n\n    from fields\n    \n)\n\nselect *\nfrom final\nwhere index = 1", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.949112Z", "completed_at": "2024-06-07T22:52:21.263660Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:21.263904Z", "completed_at": "2024-06-07T22:52:21.263911Z"}], "thread_id": "Thread-1", "execution_time": 0.315295934677124, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tag_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as INT64) as \n    \n    customer_id\n    \n , \n    cast(null as string) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        index,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tag`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.983832Z", "completed_at": "2024-06-07T22:52:21.334467Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:21.334736Z", "completed_at": "2024-06-07T22:52:21.334742Z"}], "thread_id": "Thread-2", "execution_time": 0.3518228530883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    accepts_marketing\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as numeric) as \n    \n    default_address_id\n    \n , \n    cast(null as string) as \n    \n    email\n    \n , \n    cast(null as string) as \n    \n    first_name\n    \n , \n    cast(null as numeric) as \n    \n    id\n    \n , \n    cast(null as string) as \n    \n    last_name\n    \n , \n    cast(null as numeric) as \n    \n    orders_count\n    \n , \n    cast(null as string) as \n    \n    phone\n    \n , \n    cast(null as string) as \n    \n    state\n    \n , \n    cast(null as boolean) as \n    \n    tax_exempt\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_spent\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as boolean) as \n    \n    verified_email\n    \n , \n    cast(null as timestamp) as \n    \n    email_marketing_consent_consent_updated_at\n    \n , \n    cast(null as string) as \n    \n    email_marketing_consent_opt_in_level\n    \n , \n    cast(null as string) as \n    \n    email_marketing_consent_state\n    \n , \n    cast(null as string) as \n    \n    note\n    \n , \n    cast(null as timestamp) as \n    \n    accepts_marketing_updated_at\n    \n , \n    cast(null as string) as \n    \n    marketing_opt_in_level\n    \n , \n    cast(null as string) as \n    \n    currency\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as customer_id,\n        lower(email) as email,\n        first_name,\n        last_name,\n        orders_count,\n        default_address_id,\n        phone,\n        lower(state) as account_state,\n        tax_exempt as is_tax_exempt,\n        total_spent,\n        verified_email as is_verified_email,\n        note,\n        currency,\n        case \n            when email_marketing_consent_state is null then\n                case \n                    when accepts_marketing is null then null\n                    when accepts_marketing then 'subscribed (legacy)' \n                    else 'not_subscribed (legacy)' end\n            else lower(email_marketing_consent_state) end as marketing_consent_state,\n        lower(coalesce(email_marketing_consent_opt_in_level, marketing_opt_in_level)) as marketing_opt_in_level,\n\n        timestamp(datetime(cast(coalesce(accepts_marketing_updated_at, email_marketing_consent_consent_updated_at) as timestamp), 'UTC')) as marketing_consent_updated_at,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_timestamp,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    \n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.977321Z", "completed_at": "2024-06-07T22:52:21.340907Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:21.341242Z", "completed_at": "2024-06-07T22:52:21.341248Z"}], "thread_id": "Thread-3", "execution_time": 0.36452770233154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__discount_code", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a discount code in Shopify\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__discount_code_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as string) as \n    \n    code\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as INT64) as \n    \n    price_rule_id\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as FLOAT64) as \n    \n    usage_count\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as discount_code_id,\n        upper(code) as code,\n        price_rule_id,\n        usage_count,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__discount_code`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:20.965069Z", "completed_at": "2024-06-07T22:52:21.347910Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:21.348322Z", "completed_at": "2024-06-07T22:52:21.348328Z"}], "thread_id": "Thread-4", "execution_time": 0.3837602138519287, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__collection", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    disjunctive\n    \n , \n    cast(null as string) as \n    \n    handle\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as timestamp) as \n    \n    published_at\n    \n , \n    cast(null as string) as \n    \n    published_scope\n    \n , \n    cast(null as string) as \n    \n    rules\n    \n , \n    cast(null as string) as \n    \n    sort_order\n    \n , \n    cast(null as string) as \n    \n    title\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as collection_id,\n        _fivetran_deleted as is_deleted,\n        case \n            when disjunctive is null then null\n            when disjunctive then 'disjunctive'\n            else 'conjunctive' end as rule_logic,\n        handle,\n        published_scope,\n        rules,\n        sort_order,\n        title,\n        timestamp(datetime(cast(published_at as timestamp), 'UTC')) as published_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:21.264965Z", "completed_at": "2024-06-07T22:52:21.626225Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:21.626485Z", "completed_at": "2024-06-07T22:52:21.626495Z"}], "thread_id": "Thread-1", "execution_time": 0.36204004287719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__fulfillment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__fulfillment_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as INT64) as \n    \n    location_id\n    \n , \n    cast(null as string) as \n    \n    name\n    \n , \n    cast(null as INT64) as \n    \n    order_id\n    \n , \n    cast(null as string) as \n    \n    service\n    \n , \n    cast(null as string) as \n    \n    shipment_status\n    \n , \n    cast(null as string) as \n    \n    status\n    \n , \n    cast(null as string) as \n    \n    tracking_company\n    \n , \n    cast(null as string) as \n    \n    tracking_number\n    \n , \n    cast(null as string) as \n    \n    tracking_numbers\n    \n , \n    cast(null as string) as \n    \n    tracking_urls\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_id,\n        location_id,\n        order_id,\n        name,\n        service,\n        shipment_status,\n        lower(status) as status,\n        tracking_company,\n        tracking_number,\n        tracking_numbers,\n        tracking_urls,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__fulfillment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:21.335818Z", "completed_at": "2024-06-07T22:52:21.665516Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:21.665755Z", "completed_at": "2024-06-07T22:52:21.665761Z"}], "thread_id": "Thread-2", "execution_time": 0.3304479122161865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__location", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__location_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as string) as \n    \n    address_1\n    \n , \n    cast(null as string) as \n    \n    address_2\n    \n , \n    cast(null as string) as \n    \n    city\n    \n , \n    cast(null as string) as \n    \n    country\n    \n , \n    cast(null as string) as \n    \n    country_code\n    \n , \n    cast(null as string) as \n    \n    country_name\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as boolean) as \n    \n    legacy\n    \n , \n    cast(null as string) as \n    \n    localized_country_name\n    \n , \n    cast(null as string) as \n    \n    localized_province_name\n    \n , \n    cast(null as string) as \n    \n    name\n    \n , \n    cast(null as string) as \n    \n    phone\n    \n , \n    cast(null as string) as \n    \n    province\n    \n , \n    cast(null as string) as \n    \n    province_code\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as string) as \n    \n    zip\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as location_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        active as is_active,\n        address_1,\n        address_2,\n        city,\n        country,\n        country_code,\n        country_name,\n        legacy as is_legacy,\n        localized_country_name,\n        localized_province_name,\n        phone,\n        province,\n        province_code,\n        zip,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__location`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:21.342281Z", "completed_at": "2024-06-07T22:52:21.677267Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:21.677491Z", "completed_at": "2024-06-07T22:52:21.677497Z"}], "thread_id": "Thread-3", "execution_time": 0.33568382263183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_item_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as FLOAT64) as \n    \n    cost\n    \n , \n    cast(null as string) as \n    \n    country_code_of_origin\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as string) as \n    \n    province_code_of_origin\n    \n , \n    cast(null as boolean) as \n    \n    requires_shipping\n    \n , \n    cast(null as string) as \n    \n    sku\n    \n , \n    cast(null as boolean) as \n    \n    tracked\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as inventory_item_id,\n        sku,\n        _fivetran_deleted as is_deleted, -- won't filter out for now\n        cost,\n        country_code_of_origin,\n        province_code_of_origin,\n        requires_shipping as is_shipping_required,\n        tracked as is_inventory_quantity_tracked,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_item`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:21.349904Z", "completed_at": "2024-06-07T22:52:21.688484Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:21.688706Z", "completed_at": "2024-06-07T22:52:21.688711Z"}], "thread_id": "Thread-4", "execution_time": 0.3394169807434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__inventory_level", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_level_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    available\n    \n , \n    cast(null as INT64) as \n    \n    inventory_item_id\n    \n , \n    cast(null as INT64) as \n    \n    location_id\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        inventory_item_id,\n        location_id,\n        available as available_quantity,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_level`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:21.627582Z", "completed_at": "2024-06-07T22:52:22.073173Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.073466Z", "completed_at": "2024-06-07T22:52:22.073475Z"}], "thread_id": "Thread-1", "execution_time": 0.44640207290649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__metafield", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__metafield_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as string) as \n    \n    description\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as string) as \n    \n    key\n    \n , \n    cast(null as string) as \n    \n    namespace\n    \n , \n    cast(null as INT64) as \n    \n    owner_id\n    \n , \n    cast(null as string) as \n    \n    owner_resource\n    \n , \n    cast(null as string) as \n    \n    type\n    \n , \n    cast(null as string) as \n    \n    value_type\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as string) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as metafield_id,\n        description,\n        namespace,\n        key,\n        value,\n        lower(coalesce(type, value_type)) as value_type,\n        owner_id as owner_resource_id,\n        lower(owner_resource) as owner_resource,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        lower(namespace || '_' || key) as metafield_reference,\n        case when id is null and updated_at is null\n            then row_number() over(partition by source_relation order by source_relation) = 1\n            else row_number() over(partition by id, source_relation order by updated_at desc) = 1\n        end as is_most_recent_record,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__metafield`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:21.678491Z", "completed_at": "2024-06-07T22:52:22.079419Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.080219Z", "completed_at": "2024-06-07T22:52:22.080225Z"}], "thread_id": "Thread-3", "execution_time": 0.4022049903869629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_discount_code", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_discount_code_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as FLOAT64) as \n    \n    amount\n    \n , \n    cast(null as string) as \n    \n    code\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as INT64) as \n    \n    order_id\n    \n , \n    cast(null as string) as \n    \n    type\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        upper(code) as code,\n        type,\n        amount,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_discount_code`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:21.689803Z", "completed_at": "2024-06-07T22:52:22.079690Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.080931Z", "completed_at": "2024-06-07T22:52:22.080936Z"}], "thread_id": "Thread-4", "execution_time": 0.39170312881469727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line_refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_refund_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as numeric) as \n    \n    id\n    \n , \n    cast(null as numeric) as \n    \n    location_id\n    \n , \n    cast(null as numeric) as \n    \n    order_line_id\n    \n , \n    cast(null as numeric) as \n    \n    subtotal\n    \n , \n    cast(null as string) as \n    \n    subtotal_set\n    \n , \n    cast(null as numeric) as \n    \n    total_tax\n    \n , \n    cast(null as string) as \n    \n    total_tax_set\n    \n , \n    cast(null as FLOAT64) as \n    \n    quantity\n    \n , \n    cast(null as numeric) as \n    \n    refund_id\n    \n , \n    cast(null as string) as \n    \n    restock_type\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as order_line_refund_id,\n        location_id,\n        order_line_id,\n        subtotal,\n        subtotal_set,\n        total_tax,\n        total_tax_set,\n        quantity,\n        refund_id,\n        restock_type,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_refund`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:21.666813Z", "completed_at": "2024-06-07T22:52:22.080704Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.081960Z", "completed_at": "2024-06-07T22:52:22.081964Z"}], "thread_id": "Thread-2", "execution_time": 0.4156379699707031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_adjustment", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_adjustment_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as numeric) as \n    \n    id\n    \n , \n    cast(null as numeric) as \n    \n    order_id\n    \n , \n    cast(null as numeric) as \n    \n    refund_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    amount\n    \n , \n    cast(null as string) as \n    \n    amount_set\n    \n , \n    cast(null as FLOAT64) as \n    \n    tax_amount\n    \n , \n    cast(null as string) as \n    \n    tax_amount_set\n    \n , \n    cast(null as string) as \n    \n    kind\n    \n , \n    cast(null as string) as \n    \n    reason\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as order_adjustment_id,\n        order_id,\n        refund_id,\n        amount,\n        amount_set,\n        tax_amount,\n        tax_amount_set,\n        kind,\n        reason,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_adjustment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.091953Z", "completed_at": "2024-06-07T22:52:22.372825Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.373071Z", "completed_at": "2024-06-07T22:52:22.373078Z"}], "thread_id": "Thread-2", "execution_time": 0.2893669605255127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_tag_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as INT64) as \n    \n    order_id\n    \n , \n    cast(null as string) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_tag`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.074753Z", "completed_at": "2024-06-07T22:52:22.461766Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.461999Z", "completed_at": "2024-06-07T22:52:22.462006Z"}], "thread_id": "Thread-1", "execution_time": 0.38789987564086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as numeric) as \n    \n    fulfillable_quantity\n    \n , \n    cast(null as string) as \n    \n    fulfillment_status\n    \n , \n    cast(null as boolean) as \n    \n    gift_card\n    \n , \n    cast(null as numeric) as \n    \n    grams\n    \n , \n    cast(null as numeric) as \n    \n    id\n    \n , \n    cast(null as numeric) as \n    \n    index\n    \n , \n    cast(null as string) as \n    \n    name\n    \n , \n    cast(null as numeric) as \n    \n    order_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    pre_tax_price\n    \n , \n    cast(null as string) as \n    \n    pre_tax_price_set\n    \n , \n    cast(null as FLOAT64) as \n    \n    price\n    \n , \n    cast(null as string) as \n    \n    price_set\n    \n , \n    cast(null as numeric) as \n    \n    product_id\n    \n , \n    cast(null as numeric) as \n    \n    quantity\n    \n , \n    cast(null as boolean) as \n    \n    requires_shipping\n    \n , \n    cast(null as string) as \n    \n    sku\n    \n , \n    cast(null as boolean) as \n    \n    taxable\n    \n , \n    cast(null as string) as \n    \n    tax_code\n    \n , \n    cast(null as string) as \n    \n    title\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_discount\n    \n , \n    cast(null as string) as \n    \n    total_discount_set\n    \n , \n    cast(null as numeric) as \n    \n    variant_id\n    \n , \n    cast(null as string) as \n    \n    variant_title\n    \n , \n    cast(null as string) as \n    \n    variant_inventory_management\n    \n , \n    cast(null as string) as \n    \n    vendor\n    \n , \n    cast(null as string) as \n    \n    properties\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        id as order_line_id,\n        index,\n        name,\n        order_id,\n        fulfillable_quantity,\n        fulfillment_status,\n        gift_card as is_gift_card,\n        grams,\n        pre_tax_price,\n        pre_tax_price_set,\n        price,\n        price_set,\n        product_id,\n        quantity,\n        requires_shipping as is_shipping_required,\n        sku,\n        taxable as is_taxable,\n        tax_code,\n        title,\n        total_discount,\n        total_discount_set,\n        variant_id,\n        variant_title,\n        variant_inventory_management,\n        vendor,\n        properties,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.088179Z", "completed_at": "2024-06-07T22:52:22.496541Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.496776Z", "completed_at": "2024-06-07T22:52:22.496782Z"}], "thread_id": "Thread-4", "execution_time": 0.4135739803314209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_line_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as string) as \n    \n    carrier_identifier\n    \n , \n    cast(null as string) as \n    \n    code\n    \n , \n    cast(null as string) as \n    \n    delivery_category\n    \n , \n    cast(null as FLOAT64) as \n    \n    discounted_price\n    \n , \n    cast(null as string) as \n    \n    discounted_price_set\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as INT64) as \n    \n    order_id\n    \n , \n    cast(null as string) as \n    \n    phone\n    \n , \n    cast(null as FLOAT64) as \n    \n    price\n    \n , \n    cast(null as string) as \n    \n    price_set\n    \n , \n    cast(null as string) as \n    \n    requested_fulfillment_service_id\n    \n , \n    cast(null as string) as \n    \n    source\n    \n , \n    cast(null as string) as \n    \n    title\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_shipping_line_id,\n        order_id,\n        carrier_identifier,\n        code,\n        delivery_category,\n        discounted_price,\n        discounted_price_set,\n        phone,\n        price,\n        price_set,\n        requested_fulfillment_service_id is not null as is_third_party_required,\n        source,\n        title,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.084228Z", "completed_at": "2024-06-07T22:52:22.519721Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.519950Z", "completed_at": "2024-06-07T22:52:22.519956Z"}], "thread_id": "Thread-3", "execution_time": 0.43732714653015137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_note_attribute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_note_attribute_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as string) as \n    \n    name\n    \n , \n    cast(null as INT64) as \n    \n    order_id\n    \n , \n    cast(null as string) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        name,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_note_attribute`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.374348Z", "completed_at": "2024-06-07T22:52:22.694100Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.694344Z", "completed_at": "2024-06-07T22:52:22.694351Z"}], "thread_id": "Thread-2", "execution_time": 0.3206338882446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_tax_line_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as INT64) as \n    \n    order_shipping_line_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    price\n    \n , \n    cast(null as string) as \n    \n    price_set\n    \n , \n    cast(null as FLOAT64) as \n    \n    rate\n    \n , \n    cast(null as string) as \n    \n    title\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_shipping_line_id,\n        index,\n        price,\n        price_set,\n        rate,\n        title,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_tax_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.463170Z", "completed_at": "2024-06-07T22:52:22.798977Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.799210Z", "completed_at": "2024-06-07T22:52:22.799216Z"}], "thread_id": "Thread-1", "execution_time": 0.33660411834716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order_url_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_url_tag_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as string) as \n    \n    key\n    \n , \n    cast(null as INT64) as \n    \n    order_id\n    \n , \n    cast(null as string) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        key,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_url_tag`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.521229Z", "completed_at": "2024-06-07T22:52:22.830255Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.830493Z", "completed_at": "2024-06-07T22:52:22.830499Z"}], "thread_id": "Thread-3", "execution_time": 0.3099360466003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__price_rule", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__price_rule_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    allocation_limit\n    \n , \n    cast(null as string) as \n    \n    allocation_method\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as string) as \n    \n    customer_selection\n    \n , \n    cast(null as timestamp) as \n    \n    ends_at\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as boolean) as \n    \n    once_per_customer\n    \n , \n    cast(null as FLOAT64) as \n    \n    prerequisite_quantity_range\n    \n , \n    cast(null as FLOAT64) as \n    \n    prerequisite_shipping_price_range\n    \n , \n    cast(null as FLOAT64) as \n    \n    prerequisite_subtotal_range\n    \n , \n    cast(null as FLOAT64) as \n    \n    prerequisite_to_entitlement_purchase_prerequisite_amount\n    \n , \n    cast(null as INT64) as \n    \n    quantity_ratio_entitled_quantity\n    \n , \n    cast(null as INT64) as \n    \n    quantity_ratio_prerequisite_quantity\n    \n , \n    cast(null as timestamp) as \n    \n    starts_at\n    \n , \n    cast(null as string) as \n    \n    target_selection\n    \n , \n    cast(null as string) as \n    \n    target_type\n    \n , \n    cast(null as string) as \n    \n    title\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as INT64) as \n    \n    usage_limit\n    \n , \n    cast(null as FLOAT64) as \n    \n    value\n    \n , \n    cast(null as string) as \n    \n    value_type\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as price_rule_id,\n        allocation_limit,\n        allocation_method,\n        customer_selection,\n        once_per_customer as is_once_per_customer,\n        prerequisite_quantity_range as prereq_min_quantity,\n        prerequisite_shipping_price_range as prereq_max_shipping_price,\n        prerequisite_subtotal_range as prereq_min_subtotal,\n        prerequisite_to_entitlement_purchase_prerequisite_amount as prereq_min_purchase_quantity_for_entitlement,\n        quantity_ratio_entitled_quantity as prereq_buy_x_get_this,\n        quantity_ratio_prerequisite_quantity as prereq_buy_this_get_y,\n        target_selection,\n        target_type,\n        title,\n        usage_limit,\n        value,\n        value_type,\n        timestamp(datetime(cast(starts_at as timestamp), 'UTC')) as starts_at,\n        timestamp(datetime(cast(ends_at as timestamp), 'UTC')) as ends_at,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__price_rule`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.497912Z", "completed_at": "2024-06-07T22:52:22.872994Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:22.873237Z", "completed_at": "2024-06-07T22:52:22.873243Z"}], "thread_id": "Thread-4", "execution_time": 0.3758871555328369, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__order", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as numeric) as \n    \n    id\n    \n , \n    cast(null as timestamp) as \n    \n    processed_at\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as numeric) as \n    \n    user_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_discounts\n    \n , \n    cast(null as string) as \n    \n    total_discounts_set\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_line_items_price\n    \n , \n    cast(null as string) as \n    \n    total_line_items_price_set\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_price\n    \n , \n    cast(null as string) as \n    \n    total_price_set\n    \n , \n    cast(null as string) as \n    \n    total_tax_set\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_tax\n    \n , \n    cast(null as string) as \n    \n    source_name\n    \n , \n    cast(null as FLOAT64) as \n    \n    subtotal_price\n    \n , \n    cast(null as boolean) as \n    \n    taxes_included\n    \n , \n    cast(null as numeric) as \n    \n    total_weight\n    \n , \n    cast(null as FLOAT64) as \n    \n    total_tip_received\n    \n , \n    cast(null as string) as \n    \n    landing_site_base_url\n    \n , \n    cast(null as numeric) as \n    \n    location_id\n    \n , \n    cast(null as string) as \n    \n    name\n    \n , \n    cast(null as string) as \n    \n    note\n    \n , \n    cast(null as numeric) as \n    \n    number\n    \n , \n    cast(null as numeric) as \n    \n    order_number\n    \n , \n    cast(null as string) as \n    \n    cancel_reason\n    \n , \n    cast(null as timestamp) as \n    \n    cancelled_at\n    \n , \n    cast(null as string) as \n    \n    cart_token\n    \n , \n    cast(null as string) as \n    \n    checkout_token\n    \n , \n    cast(null as timestamp) as \n    \n    closed_at\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as string) as \n    \n    currency\n    \n , \n    cast(null as numeric) as \n    \n    customer_id\n    \n , \n    cast(null as string) as \n    \n    email\n    \n , \n    cast(null as string) as \n    \n    financial_status\n    \n , \n    cast(null as string) as \n    \n    fulfillment_status\n    \n , \n    cast(null as string) as \n    \n    referring_site\n    \n , \n    cast(null as string) as \n    \n    billing_address_address_1\n    \n , \n    cast(null as string) as \n    \n    billing_address_address_2\n    \n , \n    cast(null as string) as \n    \n    billing_address_city\n    \n , \n    cast(null as string) as \n    \n    billing_address_company\n    \n , \n    cast(null as string) as \n    \n    billing_address_country\n    \n , \n    cast(null as string) as \n    \n    billing_address_country_code\n    \n , \n    cast(null as string) as \n    \n    billing_address_first_name\n    \n , \n    cast(null as string) as \n    \n    billing_address_last_name\n    \n , \n    cast(null as string) as \n    \n    billing_address_latitude\n    \n , \n    cast(null as string) as \n    \n    billing_address_longitude\n    \n , \n    cast(null as string) as \n    \n    billing_address_name\n    \n , \n    cast(null as string) as \n    \n    billing_address_phone\n    \n , \n    cast(null as string) as \n    \n    billing_address_province\n    \n , \n    cast(null as string) as \n    \n    billing_address_province_code\n    \n , \n    cast(null as string) as \n    \n    billing_address_zip\n    \n , \n    cast(null as string) as \n    \n    browser_ip\n    \n , \n    cast(null as boolean) as \n    \n    buyer_accepts_marketing\n    \n , \n    cast(null as string) as \n    \n    total_shipping_price_set\n    \n , \n    cast(null as string) as \n    \n    shipping_address_address_1\n    \n , \n    cast(null as string) as \n    \n    shipping_address_address_2\n    \n , \n    cast(null as string) as \n    \n    shipping_address_city\n    \n , \n    cast(null as string) as \n    \n    shipping_address_company\n    \n , \n    cast(null as string) as \n    \n    shipping_address_country\n    \n , \n    cast(null as string) as \n    \n    shipping_address_country_code\n    \n , \n    cast(null as string) as \n    \n    shipping_address_first_name\n    \n , \n    cast(null as string) as \n    \n    shipping_address_last_name\n    \n , \n    cast(null as string) as \n    \n    shipping_address_latitude\n    \n , \n    cast(null as string) as \n    \n    shipping_address_longitude\n    \n , \n    cast(null as string) as \n    \n    shipping_address_name\n    \n , \n    cast(null as string) as \n    \n    shipping_address_phone\n    \n , \n    cast(null as string) as \n    \n    shipping_address_province\n    \n , \n    cast(null as string) as \n    \n    shipping_address_province_code\n    \n , \n    cast(null as string) as \n    \n    shipping_address_zip\n    \n , \n    cast(null as boolean) as \n    \n    test\n    \n , \n    cast(null as string) as \n    \n    token\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as INT64) as \n    \n    app_id\n    \n , \n    cast(null as INT64) as \n    \n    checkout_id\n    \n , \n    cast(null as string) as \n    \n    client_details_user_agent\n    \n , \n    cast(null as string) as \n    \n    customer_locale\n    \n , \n    cast(null as string) as \n    \n    order_status_url\n    \n , \n    cast(null as string) as \n    \n    presentment_currency\n    \n , \n    cast(null as boolean) as \n    \n    confirmed\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as order_id,\n        user_id,\n        total_discounts,\n        total_discounts_set,\n        total_line_items_price,\n        total_line_items_price_set,\n        total_price,\n        total_price_set,\n        total_tax_set,\n        total_tax,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        total_weight,\n        total_tip_received,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        number,\n        order_number,\n        cancel_reason,\n        cart_token,\n        checkout_token,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(cancelled_at as timestamp), 'UTC')) as cancelled_timestamp,\n        timestamp(datetime(cast(closed_at as timestamp), 'UTC')) as closed_timestamp,\n        timestamp(datetime(cast(processed_at as timestamp), 'UTC')) as processed_timestamp,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_timestamp,\n        currency,\n        customer_id,\n        lower(email) as email,\n        financial_status,\n        fulfillment_status,\n        referring_site,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        browser_ip,\n        total_shipping_price_set,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        token,\n        app_id,\n        checkout_id,\n        client_details_user_agent,\n        customer_locale,\n        order_status_url,\n        presentment_currency,\n        test as is_test_order,\n        _fivetran_deleted as is_deleted,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        confirmed as is_confirmed,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(is_test_order, false)\nand not coalesce(is_deleted, false)", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.695541Z", "completed_at": "2024-06-07T22:52:23.061549Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.061792Z", "completed_at": "2024-06-07T22:52:23.061799Z"}], "thread_id": "Thread-2", "execution_time": 0.36684083938598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_image", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_image_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as INT64) as \n    \n    height\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as INT64) as \n    \n    position\n    \n , \n    cast(null as INT64) as \n    \n    product_id\n    \n , \n    cast(null as string) as \n    \n    src\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as string) as \n    \n    variant_ids\n    \n , \n    cast(null as INT64) as \n    \n    width\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_image_id,\n        product_id,\n        height,\n        position,\n        src,\n        variant_ids,\n        width,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_image`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.831648Z", "completed_at": "2024-06-07T22:52:23.189277Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.189517Z", "completed_at": "2024-06-07T22:52:23.189523Z"}], "thread_id": "Thread-3", "execution_time": 0.35843491554260254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as string) as \n    \n    handle\n    \n , \n    cast(null as numeric) as \n    \n    id\n    \n , \n    cast(null as string) as \n    \n    product_type\n    \n , \n    cast(null as timestamp) as \n    \n    published_at\n    \n , \n    cast(null as string) as \n    \n    published_scope\n    \n , \n    cast(null as string) as \n    \n    title\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as string) as \n    \n    vendor\n    \n , \n    cast(null as string) as \n    \n    status\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select\n        id as product_id,\n        handle,\n        product_type,\n        published_scope,\n        title,\n        vendor,\n        status,\n        _fivetran_deleted as is_deleted,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_timestamp,\n        timestamp(datetime(cast(published_at as timestamp), 'UTC')) as published_timestamp,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\nfrom fields\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.800390Z", "completed_at": "2024-06-07T22:52:23.198540Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.199005Z", "completed_at": "2024-06-07T22:52:23.199010Z"}], "thread_id": "Thread-1", "execution_time": 0.3991200923919678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tag_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as INT64) as \n    \n    product_id\n    \n , \n    cast(null as string) as \n    \n    value\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        product_id,\n        index,\n        value,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tag`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:22.874500Z", "completed_at": "2024-06-07T22:52:23.294638Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.294874Z", "completed_at": "2024-06-07T22:52:23.294881Z"}], "thread_id": "Thread-4", "execution_time": 0.4209780693054199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__product_variant", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_variant_tmp`\n\n),\n\nfields as (\n\n    select\n    \n        \n    cast(null as numeric) as \n    \n    id\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as numeric) as \n    \n    product_id\n    \n , \n    cast(null as numeric) as \n    \n    inventory_item_id\n    \n , \n    cast(null as numeric) as \n    \n    image_id\n    \n , \n    cast(null as string) as \n    \n    title\n    \n , \n    cast(null as FLOAT64) as \n    \n    price\n    \n , \n    cast(null as string) as \n    \n    sku\n    \n , \n    cast(null as numeric) as \n    \n    position\n    \n , \n    cast(null as string) as \n    \n    inventory_policy\n    \n , \n    cast(null as FLOAT64) as \n    \n    compare_at_price\n    \n , \n    cast(null as string) as \n    \n    fulfillment_service\n    \n , \n    cast(null as string) as \n    \n    inventory_management\n    \n , \n    cast(null as boolean) as \n    \n    taxable\n    \n , \n    cast(null as string) as \n    \n    barcode\n    \n , \n    cast(null as FLOAT64) as \n    \n    grams\n    \n , \n    cast(null as numeric) as \n    \n    old_inventory_quantity\n    \n , \n    cast(null as numeric) as \n    \n    inventory_quantity\n    \n , \n    cast(null as FLOAT64) as \n    \n    weight\n    \n , \n    cast(null as string) as \n    \n    weight_unit\n    \n , \n    cast(null as string) as \n    \n    option_1\n    \n , \n    cast(null as string) as \n    \n    option_2\n    \n , \n    cast(null as string) as \n    \n    option_3\n    \n , \n    cast(null as string) as \n    \n    tax_code\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as variant_id,\n        product_id,\n        inventory_item_id,\n        image_id,\n        title,\n        price,\n        sku,\n        position,\n        inventory_policy,\n        compare_at_price,\n        fulfillment_service,\n        inventory_management,\n        taxable as is_taxable,\n        barcode,\n        grams,\n        coalesce(inventory_quantity, old_inventory_quantity) as inventory_quantity,\n        weight,\n        weight_unit,\n        option_1,\n        option_2,\n        option_3,\n        tax_code,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_timestamp,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_variant`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.063003Z", "completed_at": "2024-06-07T22:52:23.376866Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.377096Z", "completed_at": "2024-06-07T22:52:23.377103Z"}], "thread_id": "Thread-2", "execution_time": 0.31467390060424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__refund", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made a refund in Shopify\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__refund_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as numeric) as \n    \n    id\n    \n , \n    cast(null as string) as \n    \n    note\n    \n , \n    cast(null as numeric) as \n    \n    order_id\n    \n , \n    cast(null as timestamp) as \n    \n    processed_at\n    \n , \n    cast(null as boolean) as \n    \n    restock\n    \n , \n    cast(null as string) as \n    \n    total_duties_set\n    \n , \n    cast(null as numeric) as \n    \n    user_id\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as refund_id,\n        note,\n        order_id,\n        restock,\n        total_duties_set,\n        user_id,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(processed_at as timestamp), 'UTC')) as processed_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__refund`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.200461Z", "completed_at": "2024-06-07T22:52:23.559291Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.559528Z", "completed_at": "2024-06-07T22:52:23.559535Z"}], "thread_id": "Thread-1", "execution_time": 0.3596038818359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tax_line", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tax_line_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as INT64) as \n    \n    order_line_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    price\n    \n , \n    cast(null as string) as \n    \n    price_set\n    \n , \n    cast(null as FLOAT64) as \n    \n    rate\n    \n , \n    cast(null as string) as \n    \n    title\n    \n \n\n\n    \n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        index,\n        order_line_id,\n        price,\n        price_set,\n        rate,\n        title,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tax_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.193617Z", "completed_at": "2024-06-07T22:52:23.582159Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.582841Z", "completed_at": "2024-06-07T22:52:23.582846Z"}], "thread_id": "Thread-3", "execution_time": 0.3898799419403076, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__shop", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__shop_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as string) as \n    \n    address_1\n    \n , \n    cast(null as string) as \n    \n    address_2\n    \n , \n    cast(null as boolean) as \n    \n    checkout_api_supported\n    \n , \n    cast(null as string) as \n    \n    city\n    \n , \n    cast(null as string) as \n    \n    cookie_consent_level\n    \n , \n    cast(null as string) as \n    \n    country\n    \n , \n    cast(null as string) as \n    \n    country_code\n    \n , \n    cast(null as string) as \n    \n    country_name\n    \n , \n    cast(null as boolean) as \n    \n    county_taxes\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as string) as \n    \n    currency\n    \n , \n    cast(null as string) as \n    \n    customer_email\n    \n , \n    cast(null as string) as \n    \n    domain\n    \n , \n    cast(null as boolean) as \n    \n    eligible_for_card_reader_giveaway\n    \n , \n    cast(null as boolean) as \n    \n    eligible_for_payments\n    \n , \n    cast(null as string) as \n    \n    email\n    \n , \n    cast(null as string) as \n    \n    enabled_presentment_currencies\n    \n , \n    cast(null as string) as \n    \n    google_apps_domain\n    \n , \n    cast(null as boolean) as \n    \n    google_apps_login_enabled\n    \n , \n    cast(null as boolean) as \n    \n    has_discounts\n    \n , \n    cast(null as boolean) as \n    \n    has_gift_cards\n    \n , \n    cast(null as boolean) as \n    \n    has_storefront\n    \n , \n    cast(null as string) as \n    \n    iana_timezone\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as FLOAT64) as \n    \n    latitude\n    \n , \n    cast(null as FLOAT64) as \n    \n    longitude\n    \n , \n    cast(null as string) as \n    \n    money_format\n    \n , \n    cast(null as string) as \n    \n    money_in_emails_format\n    \n , \n    cast(null as string) as \n    \n    money_with_currency_format\n    \n , \n    cast(null as string) as \n    \n    money_with_currency_in_emails_format\n    \n , \n    cast(null as string) as \n    \n    myshopify_domain\n    \n , \n    cast(null as string) as \n    \n    name\n    \n , \n    cast(null as boolean) as \n    \n    password_enabled\n    \n , \n    cast(null as string) as \n    \n    phone\n    \n , \n    cast(null as string) as \n    \n    plan_display_name\n    \n , \n    cast(null as string) as \n    \n    plan_name\n    \n , \n    cast(null as boolean) as \n    \n    pre_launch_enabled\n    \n , \n    cast(null as string) as \n    \n    primary_locale\n    \n , \n    cast(null as string) as \n    \n    province\n    \n , \n    cast(null as string) as \n    \n    province_code\n    \n , \n    cast(null as boolean) as \n    \n    requires_extra_payments_agreement\n    \n , \n    cast(null as boolean) as \n    \n    setup_required\n    \n , \n    cast(null as string) as \n    \n    shop_owner\n    \n , \n    cast(null as string) as \n    \n    source\n    \n , \n    cast(null as boolean) as \n    \n    tax_shipping\n    \n , \n    cast(null as boolean) as \n    \n    taxes_included\n    \n , \n    cast(null as string) as \n    \n    timezone\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as string) as \n    \n    weight_unit\n    \n , \n    cast(null as string) as \n    \n    zip\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as shop_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        address_1,\n        address_2,\n        city,\n        province,\n        province_code,\n        country,\n        country_code,\n        country_name,\n        zip,\n        latitude,\n        longitude,\n        case when county_taxes is null then false else county_taxes end as has_county_taxes,\n        currency,\n        enabled_presentment_currencies,\n        customer_email,\n        email,\n        domain,\n        phone,\n        timezone,\n        iana_timezone,\n        primary_locale,\n        weight_unit,\n        myshopify_domain,\n        cookie_consent_level,\n        shop_owner,\n        source,\n        tax_shipping as has_shipping_taxes,\n        case when taxes_included is null then false else taxes_included end as has_taxes_included_in_price,\n        has_discounts,\n        has_gift_cards,\n        has_storefront,\n        checkout_api_supported as has_checkout_api_supported,\n        eligible_for_card_reader_giveaway as is_eligible_for_card_reader_giveaway,\n        eligible_for_payments as is_eligible_for_payments,\n        google_apps_domain,\n        case when google_apps_login_enabled is null then false else google_apps_login_enabled end as is_google_apps_login_enabled,\n        money_format,\n        money_in_emails_format,\n        money_with_currency_format,\n        money_with_currency_in_emails_format,\n        plan_display_name,\n        plan_name,\n        password_enabled as is_password_enabled,\n        pre_launch_enabled as is_pre_launch_enabled,\n        requires_extra_payments_agreement as is_extra_payments_agreement_required,\n        setup_required as is_setup_required,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_at,\n        timestamp(datetime(cast(updated_at as timestamp), 'UTC')) as updated_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__shop`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.585036Z", "completed_at": "2024-06-07T22:52:23.600115Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.600362Z", "completed_at": "2024-06-07T22:52:23.600369Z"}], "thread_id": "Thread-1", "execution_time": 0.016592025756835938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout`\n    group by checkout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.594320Z", "completed_at": "2024-06-07T22:52:23.601036Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.601529Z", "completed_at": "2024-06-07T22:52:23.601533Z"}], "thread_id": "Thread-3", "execution_time": 0.017399072647094727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout`\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.602380Z", "completed_at": "2024-06-07T22:52:23.609834Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.610056Z", "completed_at": "2024-06-07T22:52:23.610061Z"}], "thread_id": "Thread-1", "execution_time": 0.008844852447509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, product_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_product`\n    group by collection_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.606754Z", "completed_at": "2024-06-07T22:52:23.614917Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.615161Z", "completed_at": "2024-06-07T22:52:23.615165Z"}], "thread_id": "Thread-3", "execution_time": 0.008977890014648438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_product`\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.611055Z", "completed_at": "2024-06-07T22:52:23.615779Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.616253Z", "completed_at": "2024-06-07T22:52:23.616257Z"}], "thread_id": "Thread-1", "execution_time": 0.005666971206665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_product`\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.617068Z", "completed_at": "2024-06-07T22:52:23.624511Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.624754Z", "completed_at": "2024-06-07T22:52:23.624759Z"}], "thread_id": "Thread-3", "execution_time": 0.008819103240966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, index, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line`\n    group by checkout_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.626184Z", "completed_at": "2024-06-07T22:52:23.634672Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.639720Z", "completed_at": "2024-06-07T22:52:23.639726Z"}], "thread_id": "Thread-3", "execution_time": 0.014401912689208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, code, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`\n    group by checkout_id, code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.630536Z", "completed_at": "2024-06-07T22:52:23.644567Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.644796Z", "completed_at": "2024-06-07T22:52:23.644801Z"}], "thread_id": "Thread-1", "execution_time": 0.014860153198242188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.296098Z", "completed_at": "2024-06-07T22:52:23.645418Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.645865Z", "completed_at": "2024-06-07T22:52:23.645870Z"}], "thread_id": "Thread-4", "execution_time": 0.3503539562225342, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__tender_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tender_transaction_tmp`\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as FLOAT64) as \n    \n    amount\n    \n , \n    cast(null as string) as \n    \n    currency\n    \n , \n    cast(null as INT64) as \n    \n    id\n    \n , \n    cast(null as INT64) as \n    \n    order_id\n    \n , \n    cast(null as string) as \n    \n    payment_method\n    \n , \n    cast(null as timestamp) as \n    \n    processed_at\n    \n , \n    cast(null as string) as \n    \n    remote_reference\n    \n , \n    cast(null as boolean) as \n    \n    test\n    \n , \n    cast(null as INT64) as \n    \n    user_id\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as transaction_id,\n        order_id,\n        amount,\n        currency,\n        payment_method,\n        remote_reference,\n        user_id,\n        timestamp(datetime(cast(processed_at as timestamp), 'UTC')) as processed_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tender_transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.640970Z", "completed_at": "2024-06-07T22:52:23.646434Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.650030Z", "completed_at": "2024-06-07T22:52:23.650035Z"}], "thread_id": "Thread-3", "execution_time": 0.009593963623046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, index, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tag`\n    group by customer_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.646906Z", "completed_at": "2024-06-07T22:52:23.654436Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.654887Z", "completed_at": "2024-06-07T22:52:23.654892Z"}], "thread_id": "Thread-1", "execution_time": 0.009328126907348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tag`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.651437Z", "completed_at": "2024-06-07T22:52:23.667266Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.667859Z", "completed_at": "2024-06-07T22:52:23.667865Z"}], "thread_id": "Thread-4", "execution_time": 0.017507076263427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tag`\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.668983Z", "completed_at": "2024-06-07T22:52:23.676387Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.676605Z", "completed_at": "2024-06-07T22:52:23.676610Z"}], "thread_id": "Thread-1", "execution_time": 0.00916910171508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.672891Z", "completed_at": "2024-06-07T22:52:23.681466Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.681698Z", "completed_at": "2024-06-07T22:52:23.681703Z"}], "thread_id": "Thread-4", "execution_time": 0.009469032287597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_discount_code_id__source_relation.cdfb802172", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__discount_code`\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.677611Z", "completed_at": "2024-06-07T22:52:23.682067Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.682549Z", "completed_at": "2024-06-07T22:52:23.682553Z"}], "thread_id": "Thread-1", "execution_time": 0.005404233932495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_discount_code_id.a5590b867e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__discount_code`\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.683812Z", "completed_at": "2024-06-07T22:52:23.690313Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.690727Z", "completed_at": "2024-06-07T22:52:23.690732Z"}], "thread_id": "Thread-4", "execution_time": 0.007899761199951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection`\n    group by collection_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.687162Z", "completed_at": "2024-06-07T22:52:23.690519Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.691091Z", "completed_at": "2024-06-07T22:52:23.691094Z"}], "thread_id": "Thread-1", "execution_time": 0.007544755935668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection`\nwhere collection_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.692907Z", "completed_at": "2024-06-07T22:52:23.704344Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.704577Z", "completed_at": "2024-06-07T22:52:23.704583Z"}], "thread_id": "Thread-4", "execution_time": 0.01271510124206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__fulfillment`\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'pending','open','success','cancelled','error','failure'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.700048Z", "completed_at": "2024-06-07T22:52:23.708675Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.708905Z", "completed_at": "2024-06-07T22:52:23.708910Z"}], "thread_id": "Thread-1", "execution_time": 0.016724109649658203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__fulfillment`\n    group by fulfillment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.705657Z", "completed_at": "2024-06-07T22:52:23.710019Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.713644Z", "completed_at": "2024-06-07T22:52:23.713650Z"}], "thread_id": "Thread-4", "execution_time": 0.008507013320922852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fulfillment_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__fulfillment`\nwhere fulfillment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.710222Z", "completed_at": "2024-06-07T22:52:23.717802Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.718040Z", "completed_at": "2024-06-07T22:52:23.718044Z"}], "thread_id": "Thread-1", "execution_time": 0.008538007736206055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__location`\n    group by location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.714767Z", "completed_at": "2024-06-07T22:52:23.718892Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.719321Z", "completed_at": "2024-06-07T22:52:23.719325Z"}], "thread_id": "Thread-4", "execution_time": 0.0050542354583740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__location`\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.719689Z", "completed_at": "2024-06-07T22:52:23.728135Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.728364Z", "completed_at": "2024-06-07T22:52:23.728369Z"}], "thread_id": "Thread-1", "execution_time": 0.009790897369384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_item`\n    group by inventory_item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.724959Z", "completed_at": "2024-06-07T22:52:23.729477Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.732826Z", "completed_at": "2024-06-07T22:52:23.732831Z"}], "thread_id": "Thread-4", "execution_time": 0.00840616226196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_item`\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.729674Z", "completed_at": "2024-06-07T22:52:23.737005Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.737241Z", "completed_at": "2024-06-07T22:52:23.737246Z"}], "thread_id": "Thread-1", "execution_time": 0.008288860321044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_item_id__location_id__source_relation.30e02799e7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_level`\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.733956Z", "completed_at": "2024-06-07T22:52:23.742423Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.742688Z", "completed_at": "2024-06-07T22:52:23.742692Z"}], "thread_id": "Thread-4", "execution_time": 0.009239912033081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_inventory_item_id.fccf494b8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_level`\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.738337Z", "completed_at": "2024-06-07T22:52:23.743805Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.760720Z", "completed_at": "2024-06-07T22:52:23.760728Z"}], "thread_id": "Thread-1", "execution_time": 0.022932767868041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_level_location_id.92e79be57f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_level`\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.378293Z", "completed_at": "2024-06-07T22:52:23.765341Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.765574Z", "completed_at": "2024-06-07T22:52:23.765579Z"}], "thread_id": "Thread-2", "execution_time": 0.38786888122558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify_source.stg_shopify__transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__transaction_tmp`\n\n),\n\nfields as (\n\n    select\n\n        \n    cast(null as numeric) as \n    \n    id\n    \n , \n    cast(null as numeric) as \n    \n    order_id\n    \n , \n    cast(null as numeric) as \n    \n    refund_id\n    \n , \n    cast(null as numeric) as \n    \n    amount\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as timestamp) as \n    \n    processed_at\n    \n , \n    cast(null as numeric) as \n    \n    device_id\n    \n , \n    cast(null as string) as \n    \n    gateway\n    \n , \n    cast(null as string) as \n    \n    source_name\n    \n , \n    cast(null as string) as \n    \n    message\n    \n , \n    cast(null as string) as \n    \n    currency\n    \n , \n    cast(null as numeric) as \n    \n    location_id\n    \n , \n    cast(null as numeric) as \n    \n    parent_id\n    \n , \n    cast(null as string) as \n    \n    payment_avs_result_code\n    \n , \n    cast(null as string) as \n    \n    payment_credit_card_bin\n    \n , \n    cast(null as string) as \n    \n    payment_cvv_result_code\n    \n , \n    cast(null as string) as \n    \n    payment_credit_card_number\n    \n , \n    cast(null as string) as \n    \n    payment_credit_card_company\n    \n , \n    cast(null as string) as \n    \n    kind\n    \n , \n    cast(null as string) as \n    \n    receipt\n    \n , \n    cast(null as numeric) as \n    \n    currency_exchange_id\n    \n , \n    cast(null as numeric) as \n    \n    currency_exchange_adjustment\n    \n , \n    cast(null as numeric) as \n    \n    currency_exchange_original_amount\n    \n , \n    cast(null as numeric) as \n    \n    currency_exchange_final_amount\n    \n , \n    cast(null as string) as \n    \n    currency_exchange_currency\n    \n , \n    cast(null as string) as \n    \n    error_code\n    \n , \n    cast(null as string) as \n    \n    status\n    \n , \n    cast(null as boolean) as \n    \n    test\n    \n , \n    cast(null as numeric) as \n    \n    user_id\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    authorization_expires_at\n    \n , \n    cast(null as string) as authorization_code \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as transaction_id,\n        order_id,\n        refund_id,\n        amount,\n        device_id,\n        gateway,\n        source_name,\n        message,\n        currency,\n        location_id,\n        parent_id,\n        payment_avs_result_code,\n        payment_credit_card_bin,\n        payment_cvv_result_code,\n        payment_credit_card_number,\n        payment_credit_card_company,\n        kind,\n        receipt,\n        currency_exchange_id,\n        currency_exchange_adjustment,\n        currency_exchange_original_amount,\n        currency_exchange_final_amount,\n        currency_exchange_currency,\n        error_code,\n        status,\n        user_id,\n        authorization_code,\n        timestamp(datetime(cast(created_at as timestamp), 'UTC')) as created_timestamp,\n        timestamp(datetime(cast(processed_at as timestamp), 'UTC')) as processed_timestamp,\n        timestamp(datetime(cast(authorization_expires_at as timestamp), 'UTC')) as authorization_expires_at,\n        timestamp(datetime(cast(_fivetran_synced as timestamp), 'UTC')) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.743994Z", "completed_at": "2024-06-07T22:52:23.770684Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.771203Z", "completed_at": "2024-06-07T22:52:23.771208Z"}], "thread_id": "Thread-4", "execution_time": 0.028019189834594727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metafield_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__metafield`\n    group by metafield_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.761990Z", "completed_at": "2024-06-07T22:52:23.770892Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.771714Z", "completed_at": "2024-06-07T22:52:23.771718Z"}], "thread_id": "Thread-1", "execution_time": 0.010229110717773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metafield_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__metafield`\nwhere metafield_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.766612Z", "completed_at": "2024-06-07T22:52:23.772362Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.773088Z", "completed_at": "2024-06-07T22:52:23.773092Z"}], "thread_id": "Thread-2", "execution_time": 0.006965160369873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation.7887dafb26", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_discount_code`\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.774368Z", "completed_at": "2024-06-07T22:52:23.784502Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.784765Z", "completed_at": "2024-06-07T22:52:23.784771Z"}], "thread_id": "Thread-4", "execution_time": 0.01201009750366211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_discount_code`\nwhere code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.777713Z", "completed_at": "2024-06-07T22:52:23.785702Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.786295Z", "completed_at": "2024-06-07T22:52:23.786299Z"}], "thread_id": "Thread-1", "execution_time": 0.012888908386230469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_discount_code`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.781075Z", "completed_at": "2024-06-07T22:52:23.786099Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.845732Z", "completed_at": "2024-06-07T22:52:23.845744Z"}], "thread_id": "Thread-2", "execution_time": 0.06839776039123535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_refund_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    group by order_line_refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.786651Z", "completed_at": "2024-06-07T22:52:23.861715Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.862014Z", "completed_at": "2024-06-07T22:52:23.862020Z"}], "thread_id": "Thread-4", "execution_time": 0.07662701606750488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_adjustment_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_adjustment`\n    group by order_adjustment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.858731Z", "completed_at": "2024-06-07T22:52:23.862910Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.863554Z", "completed_at": "2024-06-07T22:52:23.863558Z"}], "thread_id": "Thread-2", "execution_time": 0.009026050567626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_tag`\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.855393Z", "completed_at": "2024-06-07T22:52:23.863149Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.863908Z", "completed_at": "2024-06-07T22:52:23.863912Z"}], "thread_id": "Thread-1", "execution_time": 0.009645938873291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_tag`\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.864264Z", "completed_at": "2024-06-07T22:52:23.868772Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.876515Z", "completed_at": "2024-06-07T22:52:23.876521Z"}], "thread_id": "Thread-4", "execution_time": 0.013905048370361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_tag`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.873117Z", "completed_at": "2024-06-07T22:52:23.881263Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.881718Z", "completed_at": "2024-06-07T22:52:23.881723Z"}], "thread_id": "Thread-1", "execution_time": 0.013669013977050781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_line`\n    group by order_shipping_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.868962Z", "completed_at": "2024-06-07T22:52:23.881477Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.882128Z", "completed_at": "2024-06-07T22:52:23.882131Z"}], "thread_id": "Thread-2", "execution_time": 0.014314889907836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line`\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.877982Z", "completed_at": "2024-06-07T22:52:23.882997Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.883705Z", "completed_at": "2024-06-07T22:52:23.883709Z"}], "thread_id": "Thread-4", "execution_time": 0.006327152252197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_line`\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.884698Z", "completed_at": "2024-06-07T22:52:23.895800Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.896236Z", "completed_at": "2024-06-07T22:52:23.896242Z"}], "thread_id": "Thread-1", "execution_time": 0.013073205947875977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, name, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_note_attribute`\n    group by order_id, name, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.888244Z", "completed_at": "2024-06-07T22:52:23.896026Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.896860Z", "completed_at": "2024-06-07T22:52:23.896865Z"}], "thread_id": "Thread-2", "execution_time": 0.01343679428100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_note_attribute`\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.892621Z", "completed_at": "2024-06-07T22:52:23.896659Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.897484Z", "completed_at": "2024-06-07T22:52:23.897488Z"}], "thread_id": "Thread-4", "execution_time": 0.005474090576171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_note_attribute`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.902679Z", "completed_at": "2024-06-07T22:52:23.914198Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.914646Z", "completed_at": "2024-06-07T22:52:23.914651Z"}], "thread_id": "Thread-2", "execution_time": 0.016165971755981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, index, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_tax_line`\n    group by order_shipping_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.905867Z", "completed_at": "2024-06-07T22:52:23.914429Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.915041Z", "completed_at": "2024-06-07T22:52:23.915044Z"}], "thread_id": "Thread-4", "execution_time": 0.016130924224853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_tax_line`\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.910856Z", "completed_at": "2024-06-07T22:52:23.915401Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.916100Z", "completed_at": "2024-06-07T22:52:23.916103Z"}], "thread_id": "Thread-1", "execution_time": 0.005765199661254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_tax_line`\nwhere order_shipping_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.921288Z", "completed_at": "2024-06-07T22:52:23.928526Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.929027Z", "completed_at": "2024-06-07T22:52:23.929033Z"}], "thread_id": "Thread-4", "execution_time": 0.012421131134033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_url_tag`\nwhere key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.917772Z", "completed_at": "2024-06-07T22:52:23.928826Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.929632Z", "completed_at": "2024-06-07T22:52:23.929636Z"}], "thread_id": "Thread-2", "execution_time": 0.013247966766357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, key, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_url_tag`\n    group by order_id, key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.924532Z", "completed_at": "2024-06-07T22:52:23.929421Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.930285Z", "completed_at": "2024-06-07T22:52:23.930288Z"}], "thread_id": "Thread-1", "execution_time": 0.01278996467590332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_url_tag`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.932299Z", "completed_at": "2024-06-07T22:52:23.944190Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.944458Z", "completed_at": "2024-06-07T22:52:23.944467Z"}], "thread_id": "Thread-4", "execution_time": 0.013656139373779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_target_type__line_item__shipping_line.921059c008", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        target_type as value_field,\n        count(*) as n_records\n\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__price_rule`\n    group by target_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'line_item','shipping_line'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.936585Z", "completed_at": "2024-06-07T22:52:23.945616Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.949896Z", "completed_at": "2024-06-07T22:52:23.949901Z"}], "thread_id": "Thread-2", "execution_time": 0.018587112426757812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.accepted_values_stg_shopify__price_rule_value_type__percentage__fixed_amount.65eceed909", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        value_type as value_field,\n        count(*) as n_records\n\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__price_rule`\n    group by value_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'percentage','fixed_amount'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.940513Z", "completed_at": "2024-06-07T22:52:23.949662Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.950318Z", "completed_at": "2024-06-07T22:52:23.950322Z"}], "thread_id": "Thread-1", "execution_time": 0.018548965454101562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__price_rule_price_rule_id__source_relation.56ce313bee", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_rule_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__price_rule`\n    group by price_rule_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.945813Z", "completed_at": "2024-06-07T22:52:23.951736Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.952332Z", "completed_at": "2024-06-07T22:52:23.952336Z"}], "thread_id": "Thread-4", "execution_time": 0.00722503662109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__price_rule_price_rule_id.a7160b00e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price_rule_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__price_rule`\nwhere price_rule_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.952673Z", "completed_at": "2024-06-07T22:52:23.963096Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.963526Z", "completed_at": "2024-06-07T22:52:23.963532Z"}], "thread_id": "Thread-2", "execution_time": 0.0123291015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order`\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.955853Z", "completed_at": "2024-06-07T22:52:23.963320Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.963933Z", "completed_at": "2024-06-07T22:52:23.963937Z"}], "thread_id": "Thread-1", "execution_time": 0.012480020523071289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_image_product_image_id__product_id__source_relation.ab95cde6f9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_image_id, product_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_image`\n    group by product_image_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.960067Z", "completed_at": "2024-06-07T22:52:23.964289Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.965289Z", "completed_at": "2024-06-07T22:52:23.965292Z"}], "thread_id": "Thread-4", "execution_time": 0.0057947635650634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_image_product_image_id.911df72b9c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_image_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_image`\nwhere product_image_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.655260Z", "completed_at": "2024-06-07T22:52:23.970669Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.975134Z", "completed_at": "2024-06-07T22:52:23.975139Z"}], "thread_id": "Thread-3", "execution_time": 0.32404303550720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.int_shopify__customer_email_rollup", "compiled": true, "compiled_code": "with customers as (\n\n    select \n        *,\n        row_number() over(\n            partition by \n\n\n    email\n\n\n            order by created_timestamp desc) \n            as customer_index\n\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer`\n    where email is not null -- nonsensical to include any null emails here\n\n), customer_tags as (\n\n    select \n        *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tag`\n\n), rollup_customers as (\n\n    select\n        -- fields to group by\n        lower(customers.email) as email,\n        customers.source_relation,\n\n        -- fields to string agg together\n        \n    string_agg(distinct cast(customers.customer_id as string), ', ')\n\n as customer_ids,\n        \n    string_agg(distinct cast(customers.phone as string), ', ')\n\n as phone_numbers,\n        \n    string_agg(distinct cast(customer_tags.value as string), ', ')\n\n as customer_tags,\n\n        -- fields to take aggregates of\n        min(customers.created_timestamp) as first_account_created_at,\n        max(customers.created_timestamp) as last_account_created_at,\n        max(customers.updated_timestamp) as last_updated_at,\n        max(customers.marketing_consent_updated_at) as marketing_consent_updated_at,\n        max(customers._fivetran_synced) as last_fivetran_synced,\n\n        -- take true if ever given for boolean fields\n        \n\n    max( case when customers.customer_index = 1 then customers.is_tax_exempt else null end )\n\n as is_tax_exempt, -- since this changes every year\n        \n\n    max( customers.is_verified_email )\n\n as is_verified_email\n\n        -- for all other fields, just take the latest value\n        \n        \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.first_name else null end) as first_name\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.last_name else null end) as last_name\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.default_address_id else null end) as default_address_id\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.account_state else null end) as account_state\n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.note else null end) as note\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.currency else null end) as currency\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_consent_state else null end) as marketing_consent_state\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_opt_in_level else null end) as marketing_opt_in_level\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n    from customers \n    left join customer_tags\n        on customers.customer_id = customer_tags.customer_id\n        and customers.source_relation = customer_tags.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom rollup_customers", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`int_shopify__customer_email_rollup`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.967529Z", "completed_at": "2024-06-07T22:52:23.979076Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.979819Z", "completed_at": "2024-06-07T22:52:23.979825Z"}], "thread_id": "Thread-2", "execution_time": 0.014204025268554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product`\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.970866Z", "completed_at": "2024-06-07T22:52:23.979594Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.980463Z", "completed_at": "2024-06-07T22:52:23.980467Z"}], "thread_id": "Thread-1", "execution_time": 0.01415705680847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, index, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tag`\n    group by product_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.975571Z", "completed_at": "2024-06-07T22:52:23.981051Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.985007Z", "completed_at": "2024-06-07T22:52:23.985012Z"}], "thread_id": "Thread-4", "execution_time": 0.017767906188964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tag`\nwhere index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.981288Z", "completed_at": "2024-06-07T22:52:23.986118Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:23.992233Z", "completed_at": "2024-06-07T22:52:23.992238Z"}], "thread_id": "Thread-3", "execution_time": 0.012974977493286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tag`\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:23.992606Z", "completed_at": "2024-06-07T22:52:24.001164Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.001934Z", "completed_at": "2024-06-07T22:52:24.001941Z"}], "thread_id": "Thread-1", "execution_time": 0.01658487319946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variant_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_variant`\n    group by variant_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.002556Z", "completed_at": "2024-06-07T22:52:24.011464Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.016372Z", "completed_at": "2024-06-07T22:52:24.016378Z"}], "thread_id": "Thread-3", "execution_time": 0.01553487777709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__refund`\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.007587Z", "completed_at": "2024-06-07T22:52:24.016785Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.020330Z", "completed_at": "2024-06-07T22:52:24.020334Z"}], "thread_id": "Thread-2", "execution_time": 0.01809406280517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, index, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tax_line`\n    group by order_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.011740Z", "completed_at": "2024-06-07T22:52:24.020747Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.021524Z", "completed_at": "2024-06-07T22:52:24.021528Z"}], "thread_id": "Thread-1", "execution_time": 0.01457524299621582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        shop_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__shop`\n    group by shop_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.017009Z", "completed_at": "2024-06-07T22:52:24.021901Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.022771Z", "completed_at": "2024-06-07T22:52:24.022775Z"}], "thread_id": "Thread-4", "execution_time": 0.011604785919189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__shop`\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.023106Z", "completed_at": "2024-06-07T22:52:24.036667Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.037346Z", "completed_at": "2024-06-07T22:52:24.037353Z"}], "thread_id": "Thread-3", "execution_time": 0.016419172286987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout`\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line`\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.028745Z", "completed_at": "2024-06-07T22:52:24.037075Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.052291Z", "completed_at": "2024-06-07T22:52:24.052298Z"}], "thread_id": "Thread-2", "execution_time": 0.030067920684814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tender_transaction`\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.032750Z", "completed_at": "2024-06-07T22:52:24.053067Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.053918Z", "completed_at": "2024-06-07T22:52:24.053922Z"}], "thread_id": "Thread-1", "execution_time": 0.02576303482055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tender_transaction`\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.037738Z", "completed_at": "2024-06-07T22:52:24.054258Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.055142Z", "completed_at": "2024-06-07T22:52:24.055147Z"}], "thread_id": "Thread-4", "execution_time": 0.022758960723876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__transactions", "compiled": true, "compiled_code": "\n\nwith transactions as (\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as string), '_dbt_utils_surrogate_key_null_') as string))) as transactions_unique_id\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__transaction`\n\n    \n\n), tender_transactions as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tender_transaction`\n\n), joined as (\n    select \n        transactions.*,\n        tender_transactions.payment_method,\n        parent_transactions.created_timestamp as parent_created_timestamp,\n        parent_transactions.kind as parent_kind,\n        parent_transactions.amount as parent_amount,\n        parent_transactions.status as parent_status\n    from transactions\n    left join tender_transactions\n        on transactions.transaction_id = tender_transactions.transaction_id\n        and transactions.source_relation = tender_transactions.source_relation\n    left join transactions as parent_transactions\n        on transactions.parent_id = parent_transactions.transaction_id\n        and transactions.source_relation = parent_transactions.source_relation\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif(\n\n \n  json_extract_scalar(receipt, '$.charges.data.0.balance_transaction.exchange_rate')\n\n, '') as numeric ),1) as exchange_rate,\n        coalesce(cast(nullif(\n\n \n  json_extract_scalar(receipt, '$.charges.data.0.balance_transaction.exchange_rate')\n\n, '') as numeric ),1) * amount as currency_exchange_calculated_amount\n    from joined\n\n)\n\nselect *\nfrom exchange_rate", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__transactions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.055752Z", "completed_at": "2024-06-07T22:52:24.076121Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.076643Z", "completed_at": "2024-06-07T22:52:24.076649Z"}], "thread_id": "Thread-3", "execution_time": 0.023073196411132812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__transaction`\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.059535Z", "completed_at": "2024-06-07T22:52:24.077083Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.081256Z", "completed_at": "2024-06-07T22:52:24.081260Z"}], "thread_id": "Thread-2", "execution_time": 0.026868343353271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders__order_line_aggregates", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_line`\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_tax_line`\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), order_line as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line`\n\n), tax as (\n\n    select\n        *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tax_line`\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) as price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders__order_line_aggregates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.071761Z", "completed_at": "2024-06-07T22:52:24.080999Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.081935Z", "completed_at": "2024-06-07T22:52:24.081939Z"}], "thread_id": "Thread-1", "execution_time": 0.022998809814453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_line`\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_shipping_tax_line`\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.077302Z", "completed_at": "2024-06-07T22:52:24.082869Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.087845Z", "completed_at": "2024-06-07T22:52:24.087851Z"}], "thread_id": "Thread-4", "execution_time": 0.016419172286987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from `dbt-package-testing`.`shopify_tests_shopify`.`int_shopify__customer_email_rollup`\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.083536Z", "completed_at": "2024-06-07T22:52:24.101260Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.135559Z", "completed_at": "2024-06-07T22:52:24.135567Z"}], "thread_id": "Thread-3", "execution_time": 0.05397796630859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product`\n), \n\ncollection_product as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_product`\n),\n\ncollection as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection`\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tag`\n),\n\nproduct_variant as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_variant`\n),\n\nproduct_image as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_image`\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__products_with_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.112760Z", "completed_at": "2024-06-07T22:52:24.140513Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.141480Z", "completed_at": "2024-06-07T22:52:24.141484Z"}], "thread_id": "Thread-1", "execution_time": 0.05329418182373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__order_lines", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), order_lines as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_line_id as string), '_dbt_utils_surrogate_key_null_') as string))) as order_lines_unique_key\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line`\n\n    \n\n), product_variants as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_variant`\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal,\n        \n    string_agg(distinct cast(refunds.restock_type as string), ', ')\n\n as restock_types\n    from refunds\n    group by 1,2\n\n), tax_lines as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__tax_line`\n\n), tax_lines_aggregated as (\n\n    select\n        tax_lines.order_line_id,\n        tax_lines.source_relation,\n        sum(tax_lines.price) as order_line_tax\n\n    from tax_lines\n    group by 1,2\n\n), joined as (\n\n    select\n        order_lines.*,\n        \n        refunds_aggregated.restock_types,\n\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n        product_variants.image_id,\n\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n\n        tax_lines_aggregated.order_line_tax\n\n    from order_lines\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n    left join tax_lines_aggregated\n        on tax_lines_aggregated.order_line_id = order_lines.order_line_id\n        and tax_lines_aggregated.source_relation = order_lines.source_relation\n\n\n)\n\nselect *\nfrom joined", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__order_lines`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.136059Z", "completed_at": "2024-06-07T22:52:24.142716Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.147924Z", "completed_at": "2024-06-07T22:52:24.147930Z"}], "thread_id": "Thread-4", "execution_time": 0.05334019660949707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transactions_unique_id\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__transactions`\nwhere transactions_unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.143207Z", "completed_at": "2024-06-07T22:52:24.157573Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.158372Z", "completed_at": "2024-06-07T22:52:24.158380Z"}], "thread_id": "Thread-3", "execution_time": 0.017322063446044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select transactions_unique_id as unique_field\n  from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__transactions`\n  where transactions_unique_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.160174Z", "completed_at": "2024-06-07T22:52:24.208651Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.232728Z", "completed_at": "2024-06-07T22:52:24.232740Z"}], "thread_id": "Thread-4", "execution_time": 0.07490396499633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__orders", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), orders as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_id as string), '_dbt_utils_surrogate_key_null_') as string))) as orders_unique_key\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order`\n\n    \n\n), order_lines as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders__order_line_aggregates`\n\n), order_adjustments as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_adjustment`\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n), order_discount_code as (\n    \n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_discount_code`\n\n), discount_aggregates as (\n\n    select \n        order_id,\n        source_relation,\n        sum(case when type = 'shipping' then amount else 0 end) as shipping_discount_amount,\n        sum(case when type = 'percentage' then amount else 0 end) as percentage_calc_discount_amount,\n        sum(case when type = 'fixed_amount' then amount else 0 end) as fixed_amount_discount_amount,\n        count(distinct code) as count_discount_codes_applied\n\n    from order_discount_code\n    group by 1,2\n\n), order_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as string), ', ')\n\n as order_tags\n    \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_tag`\n    group by 1,2\n\n), order_url_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as string), ', ')\n\n as order_url_tags\n    \n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_url_tag`\n    group by 1,2\n\n), fulfillments as (\n\n    select \n        order_id,\n        source_relation,\n        count(fulfillment_id) as number_of_fulfillments,\n        \n    string_agg(distinct cast(service as string), ', ')\n\n as fulfillment_services,\n        \n    string_agg(distinct cast(tracking_company as string), ', ')\n\n as tracking_companies,\n        \n    string_agg(distinct cast(tracking_number as string), ', ')\n\n as tracking_numbers\n\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__fulfillment`\n    group by 1,2\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast(\n\n \n  json_extract_scalar(total_shipping_price_set, '$.shop_money.amount')\n\n as FLOAT64) ,0) as shipping_cost,\n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n\n        (orders.total_price\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)) as order_adjusted_total,\n        order_lines.line_item_count,\n\n        coalesce(discount_aggregates.shipping_discount_amount, 0) as shipping_discount_amount,\n        coalesce(discount_aggregates.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        coalesce(discount_aggregates.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        coalesce(discount_aggregates.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(order_lines.order_total_shipping_tax, 0) as order_total_shipping_tax,\n        order_tag.order_tags,\n        order_url_tag.order_url_tags,\n        fulfillments.number_of_fulfillments,\n        fulfillments.fulfillment_services,\n        fulfillments.tracking_companies,\n        fulfillments.tracking_numbers\n\n\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    left join discount_aggregates\n        on orders.order_id = discount_aggregates.order_id \n        and orders.source_relation = discount_aggregates.source_relation\n    left join order_tag\n        on orders.order_id = order_tag.order_id\n        and orders.source_relation = order_tag.source_relation\n    left join order_url_tag\n        on orders.order_id = order_url_tag.order_id\n        and orders.source_relation = order_url_tag.source_relation\n    left join fulfillments\n        on orders.order_id = fulfillments.order_id\n        and orders.source_relation = fulfillments.source_relation\n\n), windows as (\n\n    select \n        *,\n        row_number() over (\n            partition by \n\n\n    customer_id\n\n\n            order by created_timestamp) \n            as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.205325Z", "completed_at": "2024-06-07T22:52:24.244506Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.245265Z", "completed_at": "2024-06-07T22:52:24.245271Z"}], "thread_id": "Thread-3", "execution_time": 0.04161500930786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders__order_line_aggregates`\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.214942Z", "completed_at": "2024-06-07T22:52:24.245951Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.246639Z", "completed_at": "2024-06-07T22:52:24.246642Z"}], "thread_id": "Thread-1", "execution_time": 0.04238581657409668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line`\n),\n\nfulfillment as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__fulfillment`\n),\n\norders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order`\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        variant_id, location_id, source_relation\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n    group by variant_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.208869Z", "completed_at": "2024-06-07T22:52:24.246997Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.251787Z", "completed_at": "2024-06-07T22:52:24.251792Z"}], "thread_id": "Thread-2", "execution_time": 0.04778027534484863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__inventory_levels", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__refund`\n\n), order_line_refunds as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line_refund`\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_line`\n),\n\nfulfillment as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__fulfillment`\n),\n\norders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order`\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), inventory_level as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_level`\n), \n\ninventory_item as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__inventory_item`\n),\n\nlocation as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__location`\n),\n\nproduct_variant as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_variant`\n),\n\nproduct as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product`\n),\n\ninventory_level_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n),\n\njoined_info as (\n\n    select \n        inventory_level.*,\n        inventory_item.sku,\n        inventory_item.is_deleted as is_inventory_item_deleted,\n        inventory_item.cost,\n        inventory_item.country_code_of_origin,\n        inventory_item.province_code_of_origin,\n        inventory_item.is_shipping_required,\n        inventory_item.is_inventory_quantity_tracked,\n        inventory_item.created_at as inventory_item_created_at,\n        inventory_item.updated_at as inventory_item_updated_at,\n\n        location.name as location_name, \n        location.is_deleted as is_location_deleted,\n        location.is_active as is_location_active,\n        location.address_1,\n        location.address_2,\n        location.city,\n        location.country,\n        location.country_code,\n        location.is_legacy as is_legacy_location,\n        location.province,\n        location.province_code,\n        location.phone,\n        location.zip,\n        location.created_at as location_created_at,\n        location.updated_at as location_updated_at,\n\n        product_variant.variant_id,\n        product_variant.product_id,\n        product_variant.title as variant_title,\n        product_variant.inventory_policy as variant_inventory_policy,\n        product_variant.price as variant_price,\n        product_variant.image_id as variant_image_id,\n        product_variant.fulfillment_service as variant_fulfillment_service,\n        product_variant.inventory_management as variant_inventory_management,\n        product_variant.is_taxable as is_variant_taxable,\n        product_variant.barcode as variant_barcode,\n        product_variant.grams as variant_grams, \n        product_variant.inventory_quantity as variant_inventory_quantity,\n        product_variant.weight as variant_weight,\n        product_variant.weight_unit as variant_weight_unit,\n        product_variant.option_1 as variant_option_1,\n        product_variant.option_2 as variant_option_2,\n        product_variant.option_3 as variant_option_3,\n        product_variant.tax_code as variant_tax_code,\n        product_variant.created_timestamp as variant_created_at,\n        product_variant.updated_timestamp as variant_updated_at\n\n        \n\n\n\n\n\n    from inventory_level\n    join inventory_item \n        on inventory_level.inventory_item_id = inventory_item.inventory_item_id \n        and inventory_level.source_relation = inventory_item.source_relation \n    join location \n        on inventory_level.location_id = location.location_id \n        and inventory_level.source_relation = location.source_relation \n    join product_variant \n        on inventory_item.inventory_item_id = product_variant.inventory_item_id \n        and inventory_item.source_relation = product_variant.source_relation\n\n),\n\njoined_aggregates as (\n\n    select \n        joined_info.*,\n        coalesce(inventory_level_aggregated.subtotal_sold, 0) as subtotal_sold,\n        coalesce(inventory_level_aggregated.quantity_sold, 0) as quantity_sold,\n        coalesce(inventory_level_aggregated.count_distinct_orders, 0) as count_distinct_orders,\n        coalesce(inventory_level_aggregated.count_distinct_customers, 0) as count_distinct_customers,\n        coalesce(inventory_level_aggregated.count_distinct_customer_emails, 0) as count_distinct_customer_emails,\n        inventory_level_aggregated.first_order_timestamp,\n        inventory_level_aggregated.last_order_timestamp,\n        coalesce(inventory_level_aggregated.subtotal_sold_refunds, 0) as subtotal_sold_refunds,\n        coalesce(inventory_level_aggregated.quantity_sold_refunds, 0) as quantity_sold_refunds\n\n        \n        , coalesce(count_fulfillment_pending, 0) as count_fulfillment_pending\n        \n        , coalesce(count_fulfillment_open, 0) as count_fulfillment_open\n        \n        , coalesce(count_fulfillment_success, 0) as count_fulfillment_success\n        \n        , coalesce(count_fulfillment_cancelled, 0) as count_fulfillment_cancelled\n        \n        , coalesce(count_fulfillment_error, 0) as count_fulfillment_error\n        \n        , coalesce(count_fulfillment_failure, 0) as count_fulfillment_failure\n        \n\n    from joined_info\n    left join inventory_level_aggregated\n        on joined_info.location_id = inventory_level_aggregated.location_id\n        and joined_info.variant_id = inventory_level_aggregated.variant_id\n        and joined_info.source_relation = inventory_level_aggregated.source_relation\n),\n\nfinal as (\n\n    select \n        *,\n        subtotal_sold - subtotal_sold_refunds as net_subtotal_sold,\n        quantity_sold - quantity_sold_refunds as net_quantity_sold\n    from joined_aggregates\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__inventory_levels`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.247415Z", "completed_at": "2024-06-07T22:52:24.256498Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.271923Z", "completed_at": "2024-06-07T22:52:24.271930Z"}], "thread_id": "Thread-4", "execution_time": 0.026302337646484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_lines_unique_key\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__order_lines`\nwhere order_lines_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.252937Z", "completed_at": "2024-06-07T22:52:24.272325Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.277853Z", "completed_at": "2024-06-07T22:52:24.277858Z"}], "thread_id": "Thread-3", "execution_time": 0.030740022659301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_lines_unique_key as unique_field\n  from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__order_lines`\n  where order_lines_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.272810Z", "completed_at": "2024-06-07T22:52:24.283577Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.284480Z", "completed_at": "2024-06-07T22:52:24.284486Z"}], "thread_id": "Thread-2", "execution_time": 0.028316020965576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order`\n\n), order_aggregates as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders__order_line_aggregates`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__transactions`\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer`\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        email, source_relation\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.284884Z", "completed_at": "2024-06-07T22:52:24.293554Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.293816Z", "completed_at": "2024-06-07T22:52:24.293823Z"}], "thread_id": "Thread-3", "execution_time": 0.014516830444335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order`\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders__order_line_aggregates`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__transactions`\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tag`\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as string), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        customer_id, source_relation\n    from __dbt__cte__shopify__customers__order_aggregates\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.303167Z", "completed_at": "2024-06-07T22:52:24.310461Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.310687Z", "completed_at": "2024-06-07T22:52:24.310692Z"}], "thread_id": "Thread-3", "execution_time": 0.008076667785644531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect orders_unique_key\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`\nwhere orders_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.307434Z", "completed_at": "2024-06-07T22:52:24.314901Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.315117Z", "completed_at": "2024-06-07T22:52:24.315122Z"}], "thread_id": "Thread-2", "execution_time": 0.008270978927612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select orders_unique_key as unique_field\n  from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`\n  where orders_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.311796Z", "completed_at": "2024-06-07T22:52:24.316185Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.320327Z", "completed_at": "2024-06-07T22:52:24.320332Z"}], "thread_id": "Thread-3", "execution_time": 0.00906515121459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__inventory_levels`\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.316382Z", "completed_at": "2024-06-07T22:52:24.321499Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.324669Z", "completed_at": "2024-06-07T22:52:24.324674Z"}], "thread_id": "Thread-2", "execution_time": 0.008959054946899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__inventory_levels`\nwhere inventory_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.321706Z", "completed_at": "2024-06-07T22:52:24.331233Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.337181Z", "completed_at": "2024-06-07T22:52:24.337188Z"}], "thread_id": "Thread-3", "execution_time": 0.016192913055419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__inventory_levels`\nwhere location_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.343795Z", "completed_at": "2024-06-07T22:52:24.376541Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.376759Z", "completed_at": "2024-06-07T22:52:24.376765Z"}], "thread_id": "Thread-3", "execution_time": 0.03347206115722656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__discounts", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_discount_code`\n),\n\norders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n),  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout`\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_discount_code`\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout_shipping_line`\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), discount as (\n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(discount_code_id as string), '_dbt_utils_surrogate_key_null_') as string))) as discounts_unique_key\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__discount_code`\n\n    \n),\n\nprice_rule as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__price_rule`\n),\n\norders_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n),\n\nabandoned_checkouts_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n),\n\ndiscount_price_rule_joined as (\n\n    select\n        discount.*,\n        price_rule.target_selection,\n        price_rule.target_type,\n        price_rule.title,\n        price_rule.usage_limit,\n        price_rule.value,\n        price_rule.value_type,\n        price_rule.allocation_limit,\n        price_rule.allocation_method,\n        price_rule.is_once_per_customer,\n        price_rule.customer_selection,\n        -- the below are NULL if customer_selection = all\n        price_rule.prereq_min_quantity,\n        price_rule.prereq_max_shipping_price,\n        price_rule.prereq_min_subtotal,\n        price_rule.prereq_min_purchase_quantity_for_entitlement,\n        price_rule.prereq_buy_x_get_this,\n        price_rule.prereq_buy_this_get_y,\n        price_rule.starts_at,\n        price_rule.ends_at,\n        price_rule.created_at as price_rule_created_at,\n        price_rule.updated_at as price_rule_updated_at\n\n    from discount\n    left join price_rule\n        on discount.price_rule_id = price_rule.price_rule_id\n        and discount.source_relation = price_rule.source_relation\n),\n\naggregates_joined as (\n\n    select \n        discount_price_rule_joined.*,\n        coalesce(orders_aggregated.count_orders, 0) as count_orders,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        orders_aggregated.avg_order_discount_amount,\n        coalesce(orders_aggregated.total_order_discount_amount, 0) as total_order_discount_amount,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_discount_amount, 0) as total_abandoned_checkout_discount_amount,\n        coalesce(orders_aggregated.total_order_line_items_price, 0) as total_order_line_items_price,\n        coalesce(orders_aggregated.total_order_shipping_cost, 0) as total_order_shipping_cost,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_shipping_price, 0) as total_abandoned_checkout_shipping_price,\n        coalesce(orders_aggregated.total_order_refund_amount, 0) as total_order_refund_amount,\n        coalesce(orders_aggregated.count_customers, 0) as count_customers,\n        coalesce(orders_aggregated.count_customer_emails, 0) as count_customer_emails,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customers, 0) as count_abandoned_checkout_customers,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customer_emails, 0) as count_abandoned_checkout_customer_emails\n\n    from discount_price_rule_joined\n    left join orders_aggregated\n        on discount_price_rule_joined.code = orders_aggregated.code\n        and discount_price_rule_joined.source_relation = orders_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = orders_aggregated.type\n        \n    left join abandoned_checkouts_aggregated\n        on discount_price_rule_joined.code = abandoned_checkouts_aggregated.code\n        and discount_price_rule_joined.source_relation = abandoned_checkouts_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discount_price_rule_joined.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discount_price_rule_joined.value_type end) = abandoned_checkouts_aggregated.type \n)\n\nselect * \nfrom aggregates_joined", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__discounts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.325794Z", "completed_at": "2024-06-07T22:52:24.382245Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.382626Z", "completed_at": "2024-06-07T22:52:24.382631Z"}], "thread_id": "Thread-2", "execution_time": 0.0573430061340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__daily_shop", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__daily_orders as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__order_lines`\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast(timestamp_trunc(\n        cast(created_timestamp as timestamp),\n        day\n    ) as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast(timestamp_trunc(\n        cast(orders.created_timestamp as timestamp),\n        day\n    ) as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_shopify__daily_abandoned_checkouts as (\nwith abandoned_checkout as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout`\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast(timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    ) as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates\n), shop as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__shop`\n),\n\ncalendar as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__calendar`\n    where cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date) = date_day\n),\n\ndaily_orders as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_orders\n),\n\ndaily_abandoned_checkouts as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_abandoned_checkouts\n),\n\n\n\nshop_calendar as (\n\n    select\n        cast(timestamp_trunc(\n        cast(calendar.date_day as timestamp),\n        day\n    ) as date) as date_day,\n        shop.shop_id,\n        shop.name,\n        shop.domain,\n        shop.is_deleted,\n        shop.currency,\n        shop.enabled_presentment_currencies,\n        shop.iana_timezone,\n        shop.created_at,\n        shop.source_relation\n\n    from calendar\n    join shop \n        on cast(shop.created_at as date) <= calendar.date_day\n),\n\nfinal as (\n\n    select \n        shop_calendar.*,\n\n        coalesce(daily_orders.count_orders, 0) as count_orders,\n        coalesce(daily_orders.count_line_items, 0) as count_line_items,\n        daily_orders.avg_line_item_count,\n        coalesce(daily_orders.count_customers, 0) as count_customers,\n        coalesce(daily_orders.count_customer_emails, 0) as count_customer_emails,\n        coalesce(daily_orders.order_adjusted_total, 0) as order_adjusted_total,\n        daily_orders.avg_order_value,\n        coalesce(daily_orders.shipping_cost, 0) as shipping_cost,\n        coalesce(daily_orders.order_adjustment_amount, 0) as order_adjustment_amount,\n        coalesce(daily_orders.order_adjustment_tax_amount, 0) as order_adjustment_tax_amount,\n        coalesce(daily_orders.refund_subtotal, 0) as refund_subtotal,\n        coalesce(daily_orders.refund_total_tax, 0) as refund_total_tax,\n        coalesce(daily_orders.total_discounts, 0) as total_discounts,\n        daily_orders.avg_discount,\n        coalesce(daily_orders.shipping_discount_amount, 0) as shipping_discount_amount,\n        daily_orders.avg_shipping_discount_amount,\n        coalesce(daily_orders.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        daily_orders.avg_percentage_calc_discount_amount,\n        coalesce(daily_orders.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        daily_orders.avg_fixed_amount_discount_amount,\n        coalesce(daily_orders.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(daily_orders.count_locations_ordered_from, 0) as count_locations_ordered_from,\n        coalesce(daily_orders.count_orders_with_discounts, 0) as count_orders_with_discounts,\n        coalesce(daily_orders.count_orders_with_refunds, 0) as count_orders_with_refunds,\n        daily_orders.first_order_timestamp,\n        daily_orders.last_order_timestamp,\n\n        coalesce(daily_orders.quantity_sold, 0) as quantity_sold,\n        coalesce(daily_orders.quantity_refunded, 0) as quantity_refunded,\n        coalesce(daily_orders.quantity_net, 0) as quantity_net,\n        daily_orders.avg_quantity_sold,\n        daily_orders.avg_quantity_net,\n        coalesce(daily_orders.count_variants_sold, 0) as count_variants_sold,\n        coalesce(daily_orders.count_products_sold, 0) as count_products_sold,\n        coalesce(daily_orders.quantity_gift_cards_sold, 0) as quantity_gift_cards_sold,\n        coalesce(daily_orders.quantity_requiring_shipping, 0) as quantity_requiring_shipping,\n\n        coalesce(daily_abandoned_checkouts.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(daily_abandoned_checkouts.count_customers_abandoned_checkout, 0) as count_customers_abandoned_checkout,\n        coalesce(daily_abandoned_checkouts.count_customer_emails_abandoned_checkout, 0) as count_customer_emails_abandoned_checkout\n\n        \n\n    from shop_calendar\n    left join daily_orders \n        on shop_calendar.source_relation = daily_orders.source_relation\n        and shop_calendar.date_day = daily_orders.date_day\n    left join daily_abandoned_checkouts \n        on shop_calendar.source_relation = daily_abandoned_checkouts.source_relation\n        and shop_calendar.date_day = daily_abandoned_checkouts.date_day\n    \n    \n)\n\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__daily_shop`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.377832Z", "completed_at": "2024-06-07T22:52:24.383747Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.392409Z", "completed_at": "2024-06-07T22:52:24.392414Z"}], "thread_id": "Thread-3", "execution_time": 0.015091180801391602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order_discount_code`\n),\n\norders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.383946Z", "completed_at": "2024-06-07T22:52:24.398089Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.398314Z", "completed_at": "2024-06-07T22:52:24.398319Z"}], "thread_id": "Thread-2", "execution_time": 0.015063047409057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__products", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product`\n), \n\ncollection_product as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection_product`\n),\n\ncollection as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__collection`\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_tag`\n),\n\nproduct_variant as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_variant`\n),\n\nproduct_image as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__product_image`\n),\n\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nimages_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(*) as count_images\n    from product_image\n    group by 1,2\n),\n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(images_aggregated.count_images, 0) > 0 as has_product_image\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join images_aggregated\n        on products.product_id = images_aggregated.product_id\n        and products.source_relation = images_aggregated.source_relation\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__order_lines`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), products as (\n\n    select *\n    from __dbt__cte__int_shopify__products_with_aggregates\n\n), product_order_lines as (\n\n    select *\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(product_order_lines.quantity_sold,0) as total_quantity_sold,\n        coalesce(product_order_lines.subtotal_sold,0) as subtotal_sold,\n        coalesce(product_order_lines.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(product_order_lines.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        product_order_lines.first_order_timestamp,\n        product_order_lines.most_recent_order_timestamp,\n        product_order_lines.avg_quantity_per_order_line as avg_quantity_per_order_line,\n        coalesce(product_order_lines.product_total_discount,0) as product_total_discount,\n        product_order_lines.product_avg_discount_per_order_line as product_avg_discount_per_order_line,\n        coalesce(product_order_lines.product_total_tax,0) as product_total_tax,\n        product_order_lines.product_avg_tax_per_order_line as product_avg_tax_per_order_line\n\n    from products\n    left join product_order_lines\n        on products.product_id = product_order_lines.product_id\n        and products.source_relation = product_order_lines.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__products`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.393650Z", "completed_at": "2024-06-07T22:52:24.398915Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.399432Z", "completed_at": "2024-06-07T22:52:24.399436Z"}], "thread_id": "Thread-3", "execution_time": 0.006311893463134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__order_lines`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.400228Z", "completed_at": "2024-06-07T22:52:24.406940Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.407169Z", "completed_at": "2024-06-07T22:52:24.407174Z"}], "thread_id": "Thread-2", "execution_time": 0.008080005645751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        code, source_relation\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__discounts`\n    group by code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.403905Z", "completed_at": "2024-06-07T22:52:24.408016Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.408405Z", "completed_at": "2024-06-07T22:52:24.408409Z"}], "thread_id": "Thread-3", "execution_time": 0.005045890808105469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__discounts`\nwhere discount_code_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.408745Z", "completed_at": "2024-06-07T22:52:24.416325Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.416551Z", "completed_at": "2024-06-07T22:52:24.416556Z"}], "thread_id": "Thread-2", "execution_time": 0.008817195892333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discounts_unique_key\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__discounts`\nwhere discounts_unique_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.413275Z", "completed_at": "2024-06-07T22:52:24.417380Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.417782Z", "completed_at": "2024-06-07T22:52:24.417786Z"}], "thread_id": "Thread-3", "execution_time": 0.005028963088989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select discounts_unique_key as unique_field\n  from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__discounts`\n  where discounts_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.418134Z", "completed_at": "2024-06-07T22:52:24.424999Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.425210Z", "completed_at": "2024-06-07T22:52:24.425215Z"}], "thread_id": "Thread-2", "execution_time": 0.008105278015136719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__daily_shop`\nwhere shop_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.421907Z", "completed_at": "2024-06-07T22:52:24.425717Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.425981Z", "completed_at": "2024-06-07T22:52:24.425985Z"}], "thread_id": "Thread-3", "execution_time": 0.0046079158782958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__products`\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.256751Z", "completed_at": "2024-06-07T22:52:24.569705Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.569919Z", "completed_at": "2024-06-07T22:52:24.569925Z"}], "thread_id": "Thread-1", "execution_time": 0.3176441192626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_emails", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order`\n\n), order_aggregates as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders__order_line_aggregates`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__transactions`\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer`\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), customer_emails as (\n\n    select \n        `email`,\n  `source_relation`,\n  `customer_ids`,\n  `phone_numbers`,\n  `customer_tags`,\n  `first_account_created_at`,\n  `last_account_created_at`,\n  `last_updated_at`,\n  `marketing_consent_updated_at`,\n  `last_fivetran_synced`,\n  `is_tax_exempt`,\n  `is_verified_email`,\n  `first_name`,\n  `last_name`,\n  `default_address_id`,\n  `account_state`,\n  `note`,\n  `currency`,\n  `marketing_consent_state`,\n  `marketing_opt_in_level`\n    from `dbt-package-testing`.`shopify_tests_shopify`.`int_shopify__customer_email_rollup`\n\n), orders as (\n\n    select *\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    where email is not null\n\n), abandoned as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout`\n    where email is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customer_emails.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customer_emails\n    left join orders\n        on customer_emails.email = orders.email\n        and customer_emails.source_relation = orders.source_relation\n    left join abandoned\n        on customer_emails.email = abandoned.email\n        and customer_emails.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_emails`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.584895Z", "completed_at": "2024-06-07T22:52:24.594087Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.594342Z", "completed_at": "2024-06-07T22:52:24.594348Z"}], "thread_id": "Thread-3", "execution_time": 0.022918224334716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_emails`\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.279629Z", "completed_at": "2024-06-07T22:52:24.613996Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.614220Z", "completed_at": "2024-06-07T22:52:24.614226Z"}], "thread_id": "Thread-4", "execution_time": 0.3357729911804199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customers", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__order`\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders__order_line_aggregates`\n\n), transactions as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__transactions`\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_tags as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer_tag`\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as string), ', ')\n\n as customer_tags\n\n    from customer_tags\n    group by 1,2\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        customer_tags_aggregated.customer_tags,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    left join customer_tags_aggregated\n        on orders.customer_id = customer_tags_aggregated.customer_id\n        and orders.source_relation = customer_tags_aggregated.source_relation\n    \n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), customers as (\n\n    select \n        `customer_id`,\n  `email`,\n  `first_name`,\n  `last_name`,\n  `default_address_id`,\n  `phone`,\n  `account_state`,\n  `is_tax_exempt`,\n  `is_verified_email`,\n  `note`,\n  `currency`,\n  `marketing_consent_state`,\n  `marketing_opt_in_level`,\n  `marketing_consent_updated_at`,\n  `created_timestamp`,\n  `updated_timestamp`,\n  `_fivetran_synced`,\n  `source_relation`\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__customer`\n\n), orders as (\n\n    select *\n    from __dbt__cte__shopify__customers__order_aggregates\n\n), abandoned as (\n\n    select \n        customer_id,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from `dbt-package-testing`.`shopify_tests_stg_shopify`.`stg_shopify__abandoned_checkout`\n    where customer_id is not null\n    group by 1,2\n\n), joined as (\n\n    select \n        customers.*,\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.customer_tags,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customers\n    left join orders\n        on customers.customer_id = orders.customer_id\n        and customers.source_relation = orders.source_relation\n    left join abandoned\n        on customers.customer_id = abandoned.customer_id\n        and customers.source_relation = abandoned.source_relation\n)\n\nselect *\nfrom joined", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__customers`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.623799Z", "completed_at": "2024-06-07T22:52:24.628665Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:24.628925Z", "completed_at": "2024-06-07T22:52:24.628931Z"}], "thread_id": "Thread-3", "execution_time": 0.013550996780395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customers`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.572268Z", "completed_at": "2024-06-07T22:52:27.033403Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:27.033636Z", "completed_at": "2024-06-07T22:52:27.033643Z"}], "thread_id": "Thread-2", "execution_time": 2.4625630378723145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_email_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__calendar`\n    where cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) as date) = date_day\n\n    \n    and cast(date_day as date) >= \n\n\n\n    \n\n    \n\n        datetime_add(\n            cast( cast('2010-01-01' as date) as datetime),\n        interval -1 month\n        )\n\n\n\n\n    \n\n), customers as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_emails`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.email,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as cohort_month\n    from calendar\n    inner join customers\n        on cast(timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.email, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.email = orders.email\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(timestamp_trunc(\n        cast(created_timestamp as timestamp),\n        month\n    ) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    email\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        email,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_email_cohorts`\n    where date_month < \n\n\n\n    \n\n    \n\n        datetime_add(\n            cast( cast('2010-01-01' as date) as datetime),\n        interval -1 month\n        )\n\n\n\n\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.email, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        backfill_lifetime_sums.previous_cohort_month_number + windows.cohort_month_number as cohort_month_number,\n        backfill_lifetime_sums.previous_total_price_lifetime + windows.total_price_lifetime as total_price_lifetime,\n        backfill_lifetime_sums.previous_order_count_lifetime + windows.order_count_lifetime as order_count_lifetime,\n        backfill_lifetime_sums.previous_line_item_count_lifetime + windows.line_item_count_lifetime as line_item_count_lifetime,\n        to_hex(md5(cast(coalesce(cast(windows.date_month as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.source_relation as string), '_dbt_utils_surrogate_key_null_') as string))) as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.email = windows.email\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_email_cohorts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:27.034827Z", "completed_at": "2024-06-07T22:52:27.042083Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:27.042345Z", "completed_at": "2024-06-07T22:52:27.042350Z"}], "thread_id": "Thread-4", "execution_time": 0.008015155792236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_email_cohorts`\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:27.038902Z", "completed_at": "2024-06-07T22:52:27.042772Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:27.042974Z", "completed_at": "2024-06-07T22:52:27.042977Z"}], "thread_id": "Thread-3", "execution_time": 0.00458216667175293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_cohort_id as unique_field\n  from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_email_cohorts`\n  where customer_cohort_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:24.616078Z", "completed_at": "2024-06-07T22:52:27.171151Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:27.171381Z", "completed_at": "2024-06-07T22:52:27.171387Z"}], "thread_id": "Thread-1", "execution_time": 2.5562586784362793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.shopify.shopify__customer_cohorts", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__calendar`\n    where cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) as date) = date_day\n\n    \n    and cast(date_day as date) >= \n\n\n\n    \n\n    \n\n        datetime_add(\n            cast( cast('2010-01-01' as date) as datetime),\n        interval -1 month\n        )\n\n\n\n\n    \n\n), customers as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customers`\n\n), orders as (\n\n    select *\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__orders`\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        cast(timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as date) as cohort_month\n    from calendar\n    inner join customers\n        on cast(timestamp_trunc(\n        cast(first_order_timestamp as timestamp),\n        month\n    ) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(timestamp_trunc(\n        cast(created_timestamp as timestamp),\n        month\n    ) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    customer_id\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        customer_id,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_cohorts`\n    where date_month < \n\n\n\n    \n\n    \n\n        datetime_add(\n            cast( cast('2010-01-01' as date) as datetime),\n        interval -1 month\n        )\n\n\n\n\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.customer_id, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        backfill_lifetime_sums.previous_cohort_month_number + windows.cohort_month_number as cohort_month_number,\n        backfill_lifetime_sums.previous_total_price_lifetime + windows.total_price_lifetime as total_price_lifetime,\n        backfill_lifetime_sums.previous_order_count_lifetime + windows.order_count_lifetime as order_count_lifetime,\n        backfill_lifetime_sums.previous_line_item_count_lifetime + windows.line_item_count_lifetime as line_item_count_lifetime,\n        to_hex(md5(cast(coalesce(cast(windows.date_month as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.customer_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.source_relation as string), '_dbt_utils_surrogate_key_null_') as string))) as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.customer_id = windows.customer_id\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_cohorts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:27.172674Z", "completed_at": "2024-06-07T22:52:27.180463Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:27.180723Z", "completed_at": "2024-06-07T22:52:27.180728Z"}], "thread_id": "Thread-2", "execution_time": 0.008548974990844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_cohorts`\nwhere customer_cohort_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-07T22:52:27.177327Z", "completed_at": "2024-06-07T22:52:27.181157Z"}, {"name": "execute", "started_at": "2024-06-07T22:52:27.181357Z", "completed_at": "2024-06-07T22:52:27.181360Z"}], "thread_id": "Thread-4", "execution_time": 0.004520893096923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_cohort_id as unique_field\n  from `dbt-package-testing`.`shopify_tests_shopify`.`shopify__customer_cohorts`\n  where customer_cohort_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 11.202897787094116, "args": {"enable_legacy_logger": false, "warn_error_options": {"include": [], "exclude": []}, "static": false, "defer": false, "log_format_file": "debug", "quiet": false, "print": true, "require_explicit_package_overrides_for_builtin_materializations": true, "version_check": true, "strict_mode": false, "populate_cache": true, "log_level_file": "debug", "use_colors": true, "require_resource_names_without_spaces": false, "invocation_command": "dbt docs generate", "cache_selected_only": false, "profiles_dir": "/Users/jamie.rodriguez/.dbt", "log_level": "info", "show_resource_report": false, "use_colors_file": true, "log_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Shopify/dbt_shopify/integration_tests/logs", "send_anonymous_usage_stats": true, "source_freshness_run_project_hooks": false, "favor_state": false, "select": [], "indirect_selection": "eager", "macro_debugging": false, "printer_width": 80, "introspect": true, "which": "generate", "write_json": true, "vars": {}, "log_format": "default", "partial_parse": true, "compile": true, "empty_catalog": false, "project_dir": "/Users/jamie.rodriguez/Desktop/dbt_repos/Shopify/dbt_shopify/integration_tests", "static_parser": true, "exclude": [], "log_file_max_bytes": 10485760, "partial_parse_file_diff": true}}
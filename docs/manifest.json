{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.4", "generated_at": "2025-05-22T22:03:38.520472Z", "invocation_id": "849d7ed3-f881-4161-8a4c-01b4ee474f0b", "env": {}, "project_name": "shopify_integration_tests", "project_id": "c39719ba3d679fd569bed21921e72e32", "user_id": "81581f81-d5af-4143-8fbf-c2f0001e4f56", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.shopify_integration_tests.shopify_order_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_data.csv", "original_file_path": "seeds/shopify_order_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_data", "fqn": ["shopify_integration_tests", "shopify_order_data"], "alias": "shopify_order_data", "checksum": {"name": "sha256", "checksum": "274aec2c5b1f7cd936359683f33c830d2ef7067e6e445469df0c3b460ad9d56c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"created_at": "timestamp", "updated_at": "timestamp", "processed_at": "timestamp", "cancelled_at": "timestamp", "_fivetran_synced": "timestamp", "total_tax": "float", "id": "bigint", "customer_id": "bigint", "location_id": "bigint", "user_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"created_at": "timestamp", "updated_at": "timestamp", "processed_at": "timestamp", "cancelled_at": "timestamp", "_fivetran_synced": "timestamp", "total_tax": "float", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "customer_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "location_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "user_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.6535308, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_product_variant_media_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_product_variant_media_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_product_variant_media_data.csv", "original_file_path": "seeds/shopify_product_variant_media_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_product_variant_media_data", "fqn": ["shopify_integration_tests", "shopify_product_variant_media_data"], "alias": "shopify_product_variant_media_data", "checksum": {"name": "sha256", "checksum": "ffa08a9130b2aa66803955797f46a610fc32abcdb404635c6c1dc3a8b289e48b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"product_variant_id": "bigint", "media_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"product_variant_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "media_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.656754, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_variant_media_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_order_shipping_line_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_shipping_line_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_shipping_line_data.csv", "original_file_path": "seeds/shopify_order_shipping_line_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_shipping_line_data", "fqn": ["shopify_integration_tests", "shopify_order_shipping_line_data"], "alias": "shopify_order_shipping_line_data", "checksum": {"name": "sha256", "checksum": "7a83a6e1121c088d6cd6ab3a944c683bfe4ac72ac440fcf97d55c3ca709b88a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"discounted_price": "float", "price": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"discounted_price": "float", "price": "float"}}, "created_at": 1747951349.658018, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_shipping_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_fulfillment_event_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_fulfillment_event_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_fulfillment_event_data.csv", "original_file_path": "seeds/shopify_fulfillment_event_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_fulfillment_event_data", "fqn": ["shopify_integration_tests", "shopify_fulfillment_event_data"], "alias": "shopify_fulfillment_event_data", "checksum": {"name": "sha256", "checksum": "ae538cd22df11081f1f4d2b6970c945d432f92af0e96fac2e10e1e09d886abef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}"}, "created_at": 1747951349.65922, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_fulfillment_event_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_order_url_tag_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_url_tag_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_url_tag_data.csv", "original_file_path": "seeds/shopify_order_url_tag_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_url_tag_data", "fqn": ["shopify_integration_tests", "shopify_order_url_tag_data"], "alias": "shopify_order_url_tag_data", "checksum": {"name": "sha256", "checksum": "18d23ae4cb9bb569772db2a5622ab7f84281f3391b6c9295973a8fed3d887567"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}"}, "created_at": 1747951349.66045, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_url_tag_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_order_line_refund_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_line_refund_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_line_refund_data.csv", "original_file_path": "seeds/shopify_order_line_refund_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_line_refund_data", "fqn": ["shopify_integration_tests", "shopify_order_line_refund_data"], "alias": "shopify_order_line_refund_data", "checksum": {"name": "sha256", "checksum": "5d28c17ac30b49f32cb92c5ade7643c3322d0a18e38094140cf06ace9fc85e72"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "location_id": "bigint", "refund_id": "bigint", "order_line_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "location_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "refund_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "order_line_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.661682, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_line_refund_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_discount_code_bxgy_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_discount_code_bxgy_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_discount_code_bxgy_data.csv", "original_file_path": "seeds/shopify_discount_code_bxgy_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_discount_code_bxgy_data", "fqn": ["shopify_integration_tests", "shopify_discount_code_bxgy_data"], "alias": "shopify_discount_code_bxgy_data", "checksum": {"name": "sha256", "checksum": "676970b98658b2da21aec24691e589c9d1bd42703e266864d7af1d310f57fc53"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "applies_once_per_customer": "boolean", "async_usage_count": "integer", "codes_count": "integer", "codes_precision": "varchar", "combines_with_order_discounts": "boolean", "combines_with_product_discounts": "boolean", "combines_with_shipping_discounts": "boolean", "created_at": "timestamp", "customer_selection_all_customers": "boolean", "ends_at": "timestamp", "starts_at": "timestamp", "status": "varchar", "summary": "varchar", "title": "varchar", "total_sales_amount": "float", "total_sales_currency_code": "varchar", "updated_at": "timestamp", "usage_limit": "integer", "uses_per_order_limit": "integer"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "applies_once_per_customer": "boolean", "async_usage_count": "integer", "codes_count": "integer", "codes_precision": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "combines_with_order_discounts": "boolean", "combines_with_product_discounts": "boolean", "combines_with_shipping_discounts": "boolean", "created_at": "timestamp", "customer_selection_all_customers": "boolean", "ends_at": "timestamp", "starts_at": "timestamp", "status": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "summary": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "title": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "total_sales_amount": "float", "total_sales_currency_code": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "updated_at": "timestamp", "usage_limit": "integer", "uses_per_order_limit": "integer"}}, "created_at": 1747951349.663015, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_bxgy_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_order_adjustment_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_adjustment_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_adjustment_data.csv", "original_file_path": "seeds/shopify_order_adjustment_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_adjustment_data", "fqn": ["shopify_integration_tests", "shopify_order_adjustment_data"], "alias": "shopify_order_adjustment_data", "checksum": {"name": "sha256", "checksum": "48ce96540f19450088c661fd48bd8f6d58bb4ca13a1f048880e9984be367172e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "order_id": "bigint", "refund_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "refund_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.664311, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_adjustment_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_product_variant_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_product_variant_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_product_variant_data.csv", "original_file_path": "seeds/shopify_product_variant_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_product_variant_data", "fqn": ["shopify_integration_tests", "shopify_product_variant_data"], "alias": "shopify_product_variant_data", "checksum": {"name": "sha256", "checksum": "2c7c29665cf22fea389ed017edcd174d97384f19f5fa65e1e70073b6e29de1b8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "product_id": "bigint", "inventory_item_id": "bigint", "legacy_resource_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "product_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "inventory_item_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "legacy_resource_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.666219, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_variant_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_refund_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_refund_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_refund_data.csv", "original_file_path": "seeds/shopify_refund_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_refund_data", "fqn": ["shopify_integration_tests", "shopify_refund_data"], "alias": "shopify_refund_data", "checksum": {"name": "sha256", "checksum": "8d8bc98681d9b0d57a43af3fc99ff13cc42401d97e49bba41c1fafb28f858d23"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "order_id": "bigint", "user_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "user_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.667451, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_refund_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_transaction_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_transaction_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_transaction_data.csv", "original_file_path": "seeds/shopify_transaction_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_transaction_data", "fqn": ["shopify_integration_tests", "shopify_transaction_data"], "alias": "shopify_transaction_data", "checksum": {"name": "sha256", "checksum": "def7b7fc64e42148b900dcd1f7327b470e5d3b0ed8e73f263e46a715ecb09199"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "order_id": "bigint", "refund_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "refund_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.668669, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_transaction_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_inventory_quantity_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_inventory_quantity_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_inventory_quantity_data.csv", "original_file_path": "seeds/shopify_inventory_quantity_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_inventory_quantity_data", "fqn": ["shopify_integration_tests", "shopify_inventory_quantity_data"], "alias": "shopify_inventory_quantity_data", "checksum": {"name": "sha256", "checksum": "8fa9f26df5501b6f7a065d74a2da5bf70329b7197e8c11139cda950874243d1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"updated_at": "timestamp", "id": "bigint", "inventory_item_id": "bigint", "inventory_level_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"updated_at": "timestamp", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "inventory_item_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "inventory_level_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.670031, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_inventory_quantity_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_inventory_item_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_inventory_item_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_inventory_item_data.csv", "original_file_path": "seeds/shopify_inventory_item_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_inventory_item_data", "fqn": ["shopify_integration_tests", "shopify_inventory_item_data"], "alias": "shopify_inventory_item_data", "checksum": {"name": "sha256", "checksum": "11076fbaaf5cb0b1a1cdfdcb8520fc3c6049ef627ff305251d40f1e562dfcd52"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "measurement_id": "bigint", "legacy_resource_id": "bigint", "updated_at": "timestamp", "created_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "measurement_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "legacy_resource_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "updated_at": "timestamp", "created_at": "timestamp"}}, "created_at": 1747951349.671285, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_inventory_item_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_product_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_product_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_product_data.csv", "original_file_path": "seeds/shopify_product_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_product_data", "fqn": ["shopify_integration_tests", "shopify_product_data"], "alias": "shopify_product_data", "checksum": {"name": "sha256", "checksum": "e3e37227f60cd1960dc29421bf94785a59c058e4b6a4cd01262376f34947e320"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"created_at": "timestamp", "updated_at": "timestamp", "published_at": "timestamp", "_fivetran_synced": "timestamp", "id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"created_at": "timestamp", "updated_at": "timestamp", "published_at": "timestamp", "_fivetran_synced": "timestamp", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.672606, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_location_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_location_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_location_data.csv", "original_file_path": "seeds/shopify_location_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_location_data", "fqn": ["shopify_integration_tests", "shopify_location_data"], "alias": "shopify_location_data", "checksum": {"name": "sha256", "checksum": "781bb070fbf96fd7e01d4229ccbac91f77bcd52726ffea2de9fa36abe6804b38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}"}, "created_at": 1747951349.673779, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_location_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_metafield_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_metafield_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_metafield_data.csv", "original_file_path": "seeds/shopify_metafield_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_metafield_data", "fqn": ["shopify_integration_tests", "shopify_metafield_data"], "alias": "shopify_metafield_data", "checksum": {"name": "sha256", "checksum": "f9586af820e5f4c1d04e71e5a8fc699080ecb101b85735abe9724a8ea9bf0d97"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"value_type": "varchar", "type": "varchar", "id": "bigint", "owner_id": "bigint", "_fivetran_synced": "timestamp", "created_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"value_type": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "type": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "owner_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "_fivetran_synced": "timestamp", "created_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1747951349.6749618, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_metafield_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_media_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_media_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_media_data.csv", "original_file_path": "seeds/shopify_media_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_media_data", "fqn": ["shopify_integration_tests", "shopify_media_data"], "alias": "shopify_media_data", "checksum": {"name": "sha256", "checksum": "7c6234841dd8ff01ec7cd72fb11d8f933c4b12efbf8470324f0671f6afb6e266"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "status": "varchar", "created_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "status": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "created_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1747951349.67621, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_media_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_discount_application_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_discount_application_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_discount_application_data.csv", "original_file_path": "seeds/shopify_discount_application_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_discount_application_data", "fqn": ["shopify_integration_tests", "shopify_discount_application_data"], "alias": "shopify_discount_application_data", "checksum": {"name": "sha256", "checksum": "9d678050ac7442f36d8aa9a5b0b013aeea7ab64a785a564a31aa41fa6a6ee70a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"allocation_method": "varchar", "code": "varchar", "description": "varchar", "index": "integer", "order_id": "bigint", "target_selection": "varchar", "target_type": "varchar", "title": "varchar", "type": "varchar", "value": "float", "value_type": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"allocation_method": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "code": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "description": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "index": "integer", "order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "target_selection": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "target_type": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "title": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "type": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "value": "float", "value_type": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}"}}, "created_at": 1747951349.677561, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_application_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_order_note_attribute_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_note_attribute_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_note_attribute_data.csv", "original_file_path": "seeds/shopify_order_note_attribute_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_note_attribute_data", "fqn": ["shopify_integration_tests", "shopify_order_note_attribute_data"], "alias": "shopify_order_note_attribute_data", "checksum": {"name": "sha256", "checksum": "9076f469c15ad5e18c4365039836b6739c2d7fc79ed987564ab8c1849994309c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}"}, "created_at": 1747951349.6787672, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_note_attribute_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_order_discount_code_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_discount_code_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_discount_code_data.csv", "original_file_path": "seeds/shopify_order_discount_code_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_discount_code_data", "fqn": ["shopify_integration_tests", "shopify_order_discount_code_data"], "alias": "shopify_order_discount_code_data", "checksum": {"name": "sha256", "checksum": "f4e391a3f00ebb1f7444487e4577dc95e28c39745e40f6c0fcb1bd90562833f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"order_id": "bigint", "amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "amount": "float"}}, "created_at": 1747951349.680268, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_discount_code_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_discount_code_free_shipping_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_discount_code_free_shipping_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_discount_code_free_shipping_data.csv", "original_file_path": "seeds/shopify_discount_code_free_shipping_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_discount_code_free_shipping_data", "fqn": ["shopify_integration_tests", "shopify_discount_code_free_shipping_data"], "alias": "shopify_discount_code_free_shipping_data", "checksum": {"name": "sha256", "checksum": "55e37730e02503078ff03a624def743c4413c5feda1bdcdd38cc7d0dbe47e2bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "applies_once_per_customer": "boolean", "applies_on_one_time_purchase": "boolean", "applies_on_subscription": "boolean", "async_usage_count": "integer", "codes_count": "integer", "codes_precision": "varchar", "combines_with_order_discounts": "boolean", "combines_with_product_discounts": "boolean", "combines_with_shipping_discounts": "boolean", "created_at": "timestamp", "customer_selection_all_customers": "boolean", "ends_at": "timestamp", "recurring_cycle_limit": "integer", "starts_at": "timestamp", "status": "varchar", "title": "varchar", "total_sales_amount": "float", "total_sales_currency_code": "varchar", "updated_at": "timestamp", "usage_limit": "integer"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "applies_once_per_customer": "boolean", "applies_on_one_time_purchase": "boolean", "applies_on_subscription": "boolean", "async_usage_count": "integer", "codes_count": "integer", "codes_precision": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "combines_with_order_discounts": "boolean", "combines_with_product_discounts": "boolean", "combines_with_shipping_discounts": "boolean", "created_at": "timestamp", "customer_selection_all_customers": "boolean", "ends_at": "timestamp", "recurring_cycle_limit": "integer", "starts_at": "timestamp", "status": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "title": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "total_sales_amount": "float", "total_sales_currency_code": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "updated_at": "timestamp", "usage_limit": "integer"}}, "created_at": 1747951349.68167, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_free_shipping_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_product_tag_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_product_tag_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_product_tag_data.csv", "original_file_path": "seeds/shopify_product_tag_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_product_tag_data", "fqn": ["shopify_integration_tests", "shopify_product_tag_data"], "alias": "shopify_product_tag_data", "checksum": {"name": "sha256", "checksum": "10203c8ee30c2d400a7f5126732f6c17985017df02cd4eceff90ef483e1c0729"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}"}, "created_at": 1747951349.68293, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_tag_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_collection_product_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_collection_product_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_collection_product_data.csv", "original_file_path": "seeds/shopify_collection_product_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_collection_product_data", "fqn": ["shopify_integration_tests", "shopify_collection_product_data"], "alias": "shopify_collection_product_data", "checksum": {"name": "sha256", "checksum": "f0829ff9b0c3116846c83d4cb2dfae170594e230d3586b8abae97a31d4a51c55"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}"}, "created_at": 1747951349.6841679, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_collection_product_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_order_shipping_tax_line_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_shipping_tax_line_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_shipping_tax_line_data.csv", "original_file_path": "seeds/shopify_order_shipping_tax_line_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_shipping_tax_line_data", "fqn": ["shopify_integration_tests", "shopify_order_shipping_tax_line_data"], "alias": "shopify_order_shipping_tax_line_data", "checksum": {"name": "sha256", "checksum": "279d995731cd3b85aa948f6721ada5f455324347f7ac3211a98bf2f3bb72f899"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"price": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"price": "float"}}, "created_at": 1747951349.685334, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_shipping_tax_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_product_media_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_product_media_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_product_media_data.csv", "original_file_path": "seeds/shopify_product_media_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_product_media_data", "fqn": ["shopify_integration_tests", "shopify_product_media_data"], "alias": "shopify_product_media_data", "checksum": {"name": "sha256", "checksum": "b38d774b588961b4cd6e5b8cdb9c0319dd694bcdd474a54a68e062b3cf488d44"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"product_id": "bigint", "media_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"product_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "media_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.686569, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_media_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_collection_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_collection_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_collection_data.csv", "original_file_path": "seeds/shopify_collection_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_collection_data", "fqn": ["shopify_integration_tests", "shopify_collection_data"], "alias": "shopify_collection_data", "checksum": {"name": "sha256", "checksum": "27cb0f0a37833f86bc7d0eb153acacdca987a69caf07dccdea4a072895f0a518"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"disjunctive": "boolean", "published_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"disjunctive": "boolean", "published_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1747951349.6877708, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_collection_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_order_tag_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_tag_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_tag_data.csv", "original_file_path": "seeds/shopify_order_tag_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_tag_data", "fqn": ["shopify_integration_tests", "shopify_order_tag_data"], "alias": "shopify_order_tag_data", "checksum": {"name": "sha256", "checksum": "c448adfe655f83dcaf6370ad2ef36f0ad6991c1b6d001e3aab317fd17359b129"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}"}, "created_at": 1747951349.6890318, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_tag_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_abandoned_checkout_shipping_line_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_abandoned_checkout_shipping_line_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_abandoned_checkout_shipping_line_data.csv", "original_file_path": "seeds/shopify_abandoned_checkout_shipping_line_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_shipping_line_data", "fqn": ["shopify_integration_tests", "shopify_abandoned_checkout_shipping_line_data"], "alias": "shopify_abandoned_checkout_shipping_line_data", "checksum": {"name": "sha256", "checksum": "9b1e873b952f85626352f2ca85b67b7a14e54e7edd01467951653fc2716023d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"markup": "varchar", "price": "float", "original_shop_markup": "varchar", "original_shop_price": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"markup": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "price": "float", "original_shop_markup": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "original_shop_price": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}"}}, "created_at": 1747951349.690229, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_abandoned_checkout_shipping_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_discount_code_basic_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_discount_code_basic_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_discount_code_basic_data.csv", "original_file_path": "seeds/shopify_discount_code_basic_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_discount_code_basic_data", "fqn": ["shopify_integration_tests", "shopify_discount_code_basic_data"], "alias": "shopify_discount_code_basic_data", "checksum": {"name": "sha256", "checksum": "dc25a6ca420db34e1ce13e0749f1e65e949cef3a260c736e1eb6e53b7db15ace"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "applies_once_per_customer": "boolean", "async_usage_count": "integer", "codes_count": "integer", "codes_precision": "varchar", "combines_with_order_discounts": "boolean", "combines_with_product_discounts": "boolean", "combines_with_shipping_discounts": "boolean", "created_at": "timestamp", "customer_selection_all_customers": "boolean", "ends_at": "timestamp", "recurring_cycle_limit": "integer", "starts_at": "timestamp", "status": "varchar", "total_sales_amount": "float", "total_sales_currency_code": "varchar", "updated_at": "timestamp", "usage_limit": "integer"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "applies_once_per_customer": "boolean", "async_usage_count": "integer", "codes_count": "integer", "codes_precision": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "combines_with_order_discounts": "boolean", "combines_with_product_discounts": "boolean", "combines_with_shipping_discounts": "boolean", "created_at": "timestamp", "customer_selection_all_customers": "boolean", "ends_at": "timestamp", "recurring_cycle_limit": "integer", "starts_at": "timestamp", "status": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "total_sales_amount": "float", "total_sales_currency_code": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "updated_at": "timestamp", "usage_limit": "integer"}}, "created_at": 1747951349.691518, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_basic_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_discount_allocation_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_discount_allocation_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_discount_allocation_data.csv", "original_file_path": "seeds/shopify_discount_allocation_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_discount_allocation_data", "fqn": ["shopify_integration_tests", "shopify_discount_allocation_data"], "alias": "shopify_discount_allocation_data", "checksum": {"name": "sha256", "checksum": "22cd7acd65491fcbbd2d2de60dc69b993fa1ac45d90b41dee7976905d6418fcf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"amount": "float", "amount_set_presentment_money_amount": "float", "amount_set_presentment_money_currency_code": "varchar", "amount_set_shop_money_amount": "float", "amount_set_shop_money_currency_code": "varchar", "discount_application_index": "integer", "index": "integer", "order_line_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"amount": "float", "amount_set_presentment_money_amount": "float", "amount_set_presentment_money_currency_code": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "amount_set_shop_money_amount": "float", "amount_set_shop_money_currency_code": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "discount_application_index": "integer", "index": "integer", "order_line_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.6927948, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_allocation_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_shop_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_shop_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_shop_data.csv", "original_file_path": "seeds/shopify_shop_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_shop_data", "fqn": ["shopify_integration_tests", "shopify_shop_data"], "alias": "shopify_shop_data", "checksum": {"name": "sha256", "checksum": "1029ea325d95c96dbdf0c52a9fd8ef272516b15f99f834a507bff27eda689bba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"taxes_included": "boolean", "google_apps_login_enabled": "boolean", "county_taxes": "boolean"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"taxes_included": "boolean", "google_apps_login_enabled": "boolean", "county_taxes": "boolean"}}, "created_at": 1747951349.694026, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_shop_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_discount_redeem_code_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_discount_redeem_code_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_discount_redeem_code_data.csv", "original_file_path": "seeds/shopify_discount_redeem_code_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_discount_redeem_code_data", "fqn": ["shopify_integration_tests", "shopify_discount_redeem_code_data"], "alias": "shopify_discount_redeem_code_data", "checksum": {"name": "sha256", "checksum": "801a010544f98b358371e38d9af1023f4e91747d6f4e488c5a65358794bc3ab5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "discount_id": "bigint", "created_by_id": "bigint", "async_usage_count": "integer", "code": "varchar", "discount_type": "varchar", "created_by_description": "varchar", "created_by_title": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "discount_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "created_by_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "async_usage_count": "integer", "code": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "discount_type": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "created_by_description": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "created_by_title": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}"}}, "created_at": 1747951349.6953, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_redeem_code_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_abandoned_checkout_discount_code_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_abandoned_checkout_discount_code_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_abandoned_checkout_discount_code_data.csv", "original_file_path": "seeds/shopify_abandoned_checkout_discount_code_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_discount_code_data", "fqn": ["shopify_integration_tests", "shopify_abandoned_checkout_discount_code_data"], "alias": "shopify_abandoned_checkout_discount_code_data", "checksum": {"name": "sha256", "checksum": "f60365d56b94e348893476184122a98c6a4b939de1c7de1f7f3684e2ba344e48"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"checkout_id": "bigint", "discount_id": "bigint", "amount": "float", "_fivetran_synced": "timestamp", "created_at": "timestamp", "updated_at": "timestamp", "code": "varchar", "type": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"checkout_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "discount_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "amount": "float", "_fivetran_synced": "timestamp", "created_at": "timestamp", "updated_at": "timestamp", "code": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "type": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}"}}, "created_at": 1747951349.696543, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_abandoned_checkout_discount_code_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_abandoned_checkout_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_abandoned_checkout_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_abandoned_checkout_data.csv", "original_file_path": "seeds/shopify_abandoned_checkout_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_abandoned_checkout_data", "fqn": ["shopify_integration_tests", "shopify_abandoned_checkout_data"], "alias": "shopify_abandoned_checkout_data", "checksum": {"name": "sha256", "checksum": "1fc66dc1ee0e84111cc6c3de1b49c3e172d477eadda206ec80095dbae720a7b4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"total_line_items_price": "float", "billing_address_phone": "varchar", "shipping_address_phone": "varchar", "closed_at": "timestamp", "created_at": "timestamp", "updated_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"total_line_items_price": "float", "billing_address_phone": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "shipping_address_phone": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "closed_at": "timestamp", "created_at": "timestamp", "updated_at": "timestamp"}}, "created_at": 1747951349.697813, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_abandoned_checkout_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_media_image_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_media_image_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_media_image_data.csv", "original_file_path": "seeds/shopify_media_image_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_media_image_data", "fqn": ["shopify_integration_tests", "shopify_media_image_data"], "alias": "shopify_media_image_data", "checksum": {"name": "sha256", "checksum": "98621ab1fd6334df5ffa045d9642644d5e465d8684cd635dd5bf8c157f964966"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"media_id": "bigint", "image_id": "bigint", "image_alt_text": "varchar", "image_height": "integer", "image_url": "varchar", "image_width": "integer"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"media_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "image_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "image_alt_text": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "image_height": "integer", "image_url": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "image_width": "integer"}}, "created_at": 1747951349.699039, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_media_image_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_fulfillment_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_fulfillment_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_fulfillment_data.csv", "original_file_path": "seeds/shopify_fulfillment_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_fulfillment_data", "fqn": ["shopify_integration_tests", "shopify_fulfillment_data"], "alias": "shopify_fulfillment_data", "checksum": {"name": "sha256", "checksum": "36993dd7ab6cd0951d3229c9d72237f4115292350e2659bdb717866f8fe8ebd8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}"}, "created_at": 1747951349.7002409, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_fulfillment_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_customer_tag_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_customer_tag_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_customer_tag_data.csv", "original_file_path": "seeds/shopify_customer_tag_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_customer_tag_data", "fqn": ["shopify_integration_tests", "shopify_customer_tag_data"], "alias": "shopify_customer_tag_data", "checksum": {"name": "sha256", "checksum": "27dad4d9a29bfd94903c156e01cdee4c0b33cfb2c5d88af98b89c19287596e5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"customer_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"customer_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.701392, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_customer_tag_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_discount_code_app_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_discount_code_app_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_discount_code_app_data.csv", "original_file_path": "seeds/shopify_discount_code_app_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_discount_code_app_data", "fqn": ["shopify_integration_tests", "shopify_discount_code_app_data"], "alias": "shopify_discount_code_app_data", "checksum": {"name": "sha256", "checksum": "079a9204224ded648d6e15b794bf77034e41f319b72801fcfee0f5b1c9e37d77"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "bigint", "applies_once_per_customer": "boolean", "applies_on_one_time_purchase": "boolean", "applies_on_subscription": "boolean", "async_usage_count": "integer", "codes_count_count": "integer", "codes_count_precision": "varchar", "combines_with_order_discounts": "boolean", "combines_with_product_discounts": "boolean", "combines_with_shipping_discounts": "boolean", "created_at": "timestamp", "customer_selection_all_customers": "boolean", "ends_at": "timestamp", "recurring_cycle_limit": "integer", "starts_at": "timestamp", "status": "varchar", "title": "varchar", "total_sales_amount": "float", "total_sales_currency_code": "varchar", "updated_at": "timestamp", "usage_limit": "integer"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "applies_once_per_customer": "boolean", "applies_on_one_time_purchase": "boolean", "applies_on_subscription": "boolean", "async_usage_count": "integer", "codes_count_count": "integer", "codes_count_precision": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "combines_with_order_discounts": "boolean", "combines_with_product_discounts": "boolean", "combines_with_shipping_discounts": "boolean", "created_at": "timestamp", "customer_selection_all_customers": "boolean", "ends_at": "timestamp", "recurring_cycle_limit": "integer", "starts_at": "timestamp", "status": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "title": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "total_sales_amount": "float", "total_sales_currency_code": "{{ 'string' if target.type in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "updated_at": "timestamp", "usage_limit": "integer"}}, "created_at": 1747951349.702702, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_app_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_customer_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_customer_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_customer_data.csv", "original_file_path": "seeds/shopify_customer_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_customer_data", "fqn": ["shopify_integration_tests", "shopify_customer_data"], "alias": "shopify_customer_data", "checksum": {"name": "sha256", "checksum": "72ba9c7141e483ec3a8715cb27d57c8e36f8ca293b0a507676391c8804c717f2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"created_at": "timestamp", "updated_at": "timestamp", "_fivetran_synced": "timestamp", "id": "bigint", "default_address_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"created_at": "timestamp", "updated_at": "timestamp", "_fivetran_synced": "timestamp", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "default_address_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.703978, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_customer_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_order_line_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_order_line_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_order_line_data.csv", "original_file_path": "seeds/shopify_order_line_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_order_line_data", "fqn": ["shopify_integration_tests", "shopify_order_line_data"], "alias": "shopify_order_line_data", "checksum": {"name": "sha256", "checksum": "a4e65b3c0ee73ff8755aec89198632427baa2dbcc39d2e97659a8a976a92b8cd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "order_id": "bigint", "id": "bigint", "product_id": "bigint", "variant_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "order_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "product_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "variant_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.7051861, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_tax_line_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_tax_line_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_tax_line_data.csv", "original_file_path": "seeds/shopify_tax_line_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_tax_line_data", "fqn": ["shopify_integration_tests", "shopify_tax_line_data"], "alias": "shopify_tax_line_data", "checksum": {"name": "sha256", "checksum": "af3615f675a22513590ef6a8abcce714b286f06c7532e650a56787c6afbd36de"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"price": "float", "rate": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"price": "float", "rate": "float"}}, "created_at": 1747951349.706441, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_tax_line_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_inventory_level_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_inventory_level_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_inventory_level_data.csv", "original_file_path": "seeds/shopify_inventory_level_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_inventory_level_data", "fqn": ["shopify_integration_tests", "shopify_inventory_level_data"], "alias": "shopify_inventory_level_data", "checksum": {"name": "sha256", "checksum": "d8bde61ad5a46b099f9e615464abf20677a00869ba308860ce0c80e59ebf40bb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"updated_at": "timestamp", "id": "bigint", "inventory_item_id": "bigint", "location_id": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}", "column_types": {"updated_at": "timestamp", "id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "inventory_item_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "location_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "created_at": 1747951349.707629, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_inventory_level_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "seed.shopify_integration_tests.shopify_tender_transaction_data": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shopify_tender_transaction_data", "resource_type": "seed", "package_name": "shopify_integration_tests", "path": "shopify_tender_transaction_data.csv", "original_file_path": "seeds/shopify_tender_transaction_data.csv", "unique_id": "seed.shopify_integration_tests.shopify_tender_transaction_data", "fqn": ["shopify_integration_tests", "shopify_tender_transaction_data"], "alias": "shopify_tender_transaction_data", "checksum": {"name": "sha256", "checksum": "7d1b7ebc547f9068b258e49431a3955f9143b99afa151664aa26a2ad9c5b479c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"docs": {"show": false}, "quote_columns": "{{ true if target.type in ('redshift', 'postgres') else false }}"}, "created_at": 1747951349.708779, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_tender_transaction_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/shopify/dbt_shopify/integration_tests", "depends_on": {"macros": []}}, "model.shopify_source.stg_shopify__customer_tag": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__customer_tag", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__customer_tag.sql", "original_file_path": "models/stg_shopify__customer_tag.sql", "unique_id": "model.shopify_source.stg_shopify__customer_tag", "fqn": ["shopify_source", "stg_shopify__customer_tag"], "alias": "stg_shopify__customer_tag", "checksum": {"name": "sha256", "checksum": "d8c8968e08d280b97b6ddf488a628c91e19ddb19ceb23affa8d0bbf32f942590"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Tags that the shop owner has attached to the customer. A customer can have up to 250 tags.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index (starting from 1) representing when the tag was placed on the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "ID of the customer being tagged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the tag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0130281, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tag\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__customer_tag_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__customer_tag_tmp')),\n                staging_columns=get_customer_tag_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        index,\n        value,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__customer_tag_tmp", "package": null, "version": null}, {"name": "stg_shopify__customer_tag_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_customer_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__customer_tag_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__customer_tag.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        customer_id,\n        index,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id", "index"], "time_spine": null}, "model.shopify_source.stg_shopify__order_line": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_line", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order_line.sql", "original_file_path": "models/stg_shopify__order_line.sql", "unique_id": "model.shopify_source.stg_shopify__order_line", "fqn": ["shopify_source", "stg_shopify__order_line"], "alias": "stg_shopify__order_line", "checksum": {"name": "sha256", "checksum": "e6915a60aff91c953c376bed58426879544cec3ed9038f3dfbde583567ec890f"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a line item from an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillable_quantity": {"name": "fulfillable_quantity", "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_status": {"name": "fulfillment_status", "description": "How far along an order is in terms line items fulfilled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_gift_card": {"name": "is_gift_card", "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "grams": {"name": "grams", "description": "The weight of the item in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_id": {"name": "order_line_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The name of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the related order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The price of the item before discounts have been applied in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The number of items that were purchased.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_shipping_required": {"name": "is_shipping_required", "description": "Whether the item requires shipping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sku": {"name": "sku", "description": "The item's SKU (stock keeping unit).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_taxable": {"name": "is_taxable", "description": "Whether the item was taxable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The title of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discount": {"name": "total_discount", "description": "The total amount of the discount allocated to the line item in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_id": {"name": "variant_id", "description": "The ID of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vendor": {"name": "vendor", "description": "The name of the item's supplier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index of the order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pre_tax_price": {"name": "pre_tax_price", "description": "The pre tax price of the line item in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pre_tax_price_set": {"name": "pre_tax_price_set", "description": "The pre tax price of the line item in shop currency and presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_set": {"name": "price_set", "description": "The price of the line item in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_code": {"name": "tax_code", "description": "Tax code applied to the line item. As multiple taxes can apply to a line item, we recommend referring to `stg_shopify__tax_line`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discount_set": {"name": "total_discount_set", "description": "The total amount allocated to the line item in the presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_title": {"name": "variant_title", "description": "The title of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_inventory_management": {"name": "variant_inventory_management", "description": "The fulfillment service that tracks the number of items in stock for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "properties": {"name": "properties", "description": "Line item properties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.9876149, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__order_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_line_tmp')),\n                staging_columns=get_order_line_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        id as order_line_id,\n        index,\n        name,\n        order_id,\n        fulfillable_quantity,\n        fulfillment_status,\n        gift_card as is_gift_card,\n        grams,\n        pre_tax_price,\n        pre_tax_price_set,\n        price,\n        price_set,\n        product_id,\n        quantity,\n        requires_shipping as is_shipping_required,\n        sku,\n        taxable as is_taxable,\n        tax_code,\n        title,\n        total_discount,\n        total_discount_set,\n        variant_id,\n        variant_title,\n        variant_inventory_management,\n        vendor,\n        properties,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('order_line_pass_through_columns') }}\n\n    from fields\n\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_line_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.shopify_source.stg_shopify__order_line_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_line.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    fulfillable_quantity\n    \n as \n    \n    fulfillable_quantity\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    gift_card\n    \n as \n    \n    gift_card\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    pre_tax_price\n    \n as \n    \n    pre_tax_price\n    \n, \n    cast(null as TEXT) as \n    \n    pre_tax_price_set\n    \n , \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    cast(null as TEXT) as \n    \n    price_set\n    \n , \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    cast(null as TEXT) as \n    \n    tax_code\n    \n , \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    total_discount\n    \n as \n    \n    total_discount\n    \n, \n    cast(null as TEXT) as \n    \n    total_discount_set\n    \n , \n    \n    \n    variant_id\n    \n as \n    \n    variant_id\n    \n, \n    cast(null as TEXT) as \n    \n    variant_title\n    \n , \n    cast(null as TEXT) as \n    \n    variant_inventory_management\n    \n , \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    cast(null as TEXT) as \n    \n    properties\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        id as order_line_id,\n        index,\n        name,\n        order_id,\n        fulfillable_quantity,\n        fulfillment_status,\n        gift_card as is_gift_card,\n        grams,\n        pre_tax_price,\n        pre_tax_price_set,\n        price,\n        price_set,\n        product_id,\n        quantity,\n        requires_shipping as is_shipping_required,\n        sku,\n        taxable as is_taxable,\n        tax_code,\n        title,\n        total_discount,\n        total_discount_set,\n        variant_id,\n        variant_title,\n        variant_inventory_management,\n        vendor,\n        properties,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_line_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__discount_code_bxgy": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_code_bxgy", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__discount_code_bxgy.sql", "original_file_path": "models/stg_shopify__discount_code_bxgy.sql", "unique_id": "model.shopify_source.stg_shopify__discount_code_bxgy", "fqn": ["shopify_source", "stg_shopify__discount_code_bxgy"], "alias": "stg_shopify__discount_code_bxgy", "checksum": {"name": "sha256", "checksum": "ee880eaf5c0b4981a2aaa8c4935c90b0af1dace93b9b032921155f3b06fb90b2"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing metadata for Buy X Get Y-style discount codes in Shopify, where discounts are applied based on product quantity thresholds.", "columns": {"discount_code_id": {"name": "discount_code_id", "description": "The unique ID for the discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The display name for the discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the discount code (e.g., `enabled`, `disabled`, `expired`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_once_per_customer": {"name": "applies_once_per_customer", "description": "Boolean representing whether the discount code is limited to one use per customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_limit": {"name": "usage_limit", "description": "The total number of times the discount code can be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_count": {"name": "usage_count", "description": "The number of times the discount code has been used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count": {"name": "codes_count", "description": "The total number of redeemable codes generated for this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_precision": {"name": "codes_precision", "description": "Indicates the precision or type of generated codes (e.g., exact vs. bulk).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_order_discounts": {"name": "combines_with_order_discounts", "description": "Whether this discount can be combined with other order-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_product_discounts": {"name": "combines_with_product_discounts", "description": "Whether this discount can be combined with product-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_shipping_discounts": {"name": "combines_with_shipping_discounts", "description": "Whether this discount can be combined with shipping discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_selection_all_customers": {"name": "customer_selection_all_customers", "description": "Boolean indicating whether the discount is available to all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "recurring_cycle_limit": {"name": "recurring_cycle_limit", "description": "The number of billing cycles this discount applies to (for subscription products).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_amount": {"name": "total_sales_amount", "description": "The total sales amount that resulted from the usage of this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_currency_code": {"name": "total_sales_currency_code", "description": "The currency code associated with `total_sales_amount`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the discount code was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the discount code was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starts_at": {"name": "starts_at", "description": "The date and time (ISO 8601 format) when the discount code becomes active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ends_at": {"name": "ends_at", "description": "The date and time (ISO 8601 format) when the discount code expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.082817, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__discount_code_bxgy_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__discount_code_bxgy_tmp')),\n                staging_columns=get_discount_code_bxgy_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        title,\n        status,\n        applies_once_per_customer,\n        usage_limit,\n        async_usage_count as usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        customer_selection_all_customers,\n        recurring_cycle_limit,\n        total_sales_amount,\n        total_sales_currency_code, \n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(starts_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as starts_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(ends_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as ends_at,\n        source_relation\n    \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_bxgy_tmp", "package": null, "version": null}, {"name": "stg_shopify__discount_code_bxgy_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_discount_code_bxgy_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__discount_code_bxgy_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__discount_code_bxgy.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy_tmp\"\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    cast(null as integer) as \n    \n    recurring_cycle_limit\n    \n , \n    \n    \n    applies_once_per_customer\n    \n as \n    \n    applies_once_per_customer\n    \n, \n    \n    \n    async_usage_count\n    \n as \n    \n    async_usage_count\n    \n, \n    \n    \n    usage_limit\n    \n as \n    \n    usage_limit\n    \n, \n    \n    \n    codes_count\n    \n as \n    \n    codes_count\n    \n, \n    \n    \n    codes_precision\n    \n as \n    \n    codes_precision\n    \n, \n    \n    \n    combines_with_order_discounts\n    \n as \n    \n    combines_with_order_discounts\n    \n, \n    \n    \n    combines_with_product_discounts\n    \n as \n    \n    combines_with_product_discounts\n    \n, \n    \n    \n    combines_with_shipping_discounts\n    \n as \n    \n    combines_with_shipping_discounts\n    \n, \n    \n    \n    customer_selection_all_customers\n    \n as \n    \n    customer_selection_all_customers\n    \n, \n    \n    \n    total_sales_amount\n    \n as \n    \n    total_sales_amount\n    \n, \n    \n    \n    total_sales_currency_code\n    \n as \n    \n    total_sales_currency_code\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        title,\n        status,\n        applies_once_per_customer,\n        usage_limit,\n        async_usage_count as usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        customer_selection_all_customers,\n        recurring_cycle_limit,\n        total_sales_amount,\n        total_sales_currency_code, \n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(starts_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as starts_at,\n        cast(\n    cast(cast(ends_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as ends_at,\n        source_relation\n    \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["discount_code_id"], "time_spine": null}, "model.shopify_source.stg_shopify__tender_transaction": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__tender_transaction", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__tender_transaction.sql", "original_file_path": "models/stg_shopify__tender_transaction.sql", "unique_id": "model.shopify_source.stg_shopify__tender_transaction", "fqn": ["shopify_source", "stg_shopify__tender_transaction"], "alias": "stg_shopify__tender_transaction", "checksum": {"name": "sha256", "checksum": "79d0360cdcc7f2de22a59bce3189883deb021e3efcdf78ca62356c02a2e69fe7"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each tender transaction represents money passing between the merchant and a customer. A tender transaction with a positive amount  represents a transaction where the customer paid money to the merchant. A negative amount represents a transaction where the  merchant refunded money back to the customer. Tender transactions represent transactions that modify the shop's balance.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount of the tender transaction in the shop's currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency used for the tender transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_id": {"name": "transaction_id", "description": "The ID of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the order that the tender transaction belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_method": {"name": "payment_method", "description": "Information about the payment method used for this transaction. Valid values include: - credit_card - cash - android_pay - apple_pay - google_pay - samsung_pay - shopify_pay - amazon - klarna - paypal - unknown - other\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_at": {"name": "processed_at", "description": "The date and time (ISO 8601 format) when the tender transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "remote_reference": {"name": "remote_reference", "description": "The remote (gateway) reference associated with the tender.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID of the user logged into the Shopify POS device that processed the tender transaction, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.035268, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tender_transaction\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__tender_transaction_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__tender_transaction_tmp')),\n                staging_columns=get_tender_transaction_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as transaction_id,\n        order_id,\n        amount,\n        currency,\n        payment_method,\n        remote_reference,\n        user_id,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(processed_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as processed_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__tender_transaction_tmp", "package": null, "version": null}, {"name": "stg_shopify__tender_transaction_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_tender_transaction_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__tender_transaction_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__tender_transaction.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tender_transaction_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    payment_method\n    \n as \n    \n    payment_method\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    remote_reference\n    \n as \n    \n    remote_reference\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as transaction_id,\n        order_id,\n        amount,\n        currency,\n        payment_method,\n        remote_reference,\n        user_id,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["transaction_id"], "time_spine": null}, "model.shopify_source.stg_shopify__metafield": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__metafield", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__metafield.sql", "original_file_path": "models/stg_shopify__metafield.sql", "unique_id": "model.shopify_source.stg_shopify__metafield", "fqn": ["shopify_source", "stg_shopify__metafield"], "alias": "stg_shopify__metafield", "checksum": {"name": "sha256", "checksum": "f9c09eadced554c99d1f6c872357d30f0b85b71fff80491b345c1cf7dcc23140"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Metafields are a flexible way to attach additional information to a Shopify resource (e.g. Product, Collection, etc.). Some examples of data stored using metafields include specifications, size charts,  downloadable documents, release dates, images, or part numbers. Metafields are identified by an owner resource, a namespace, and a key and they store a value along with type information for that context.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the metafield was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "A description of the information that the metafield contains.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "metafield_id": {"name": "metafield_id", "description": "The unique ID of the metafield.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "key": {"name": "key", "description": "The key of the metafield. Keys can be up to 64 characters long and can contain alphanumeric characters, hyphens, underscores, and periods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "namespace": {"name": "namespace", "description": "A container for a group of metafields. Grouping metafields within a namespace prevents your metafields from conflicting with other metafields with the same key name. Must have between 3-255 characters.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_resource_id": {"name": "owner_resource_id", "description": "The unique ID of the resource that the metafield is attached to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_resource": {"name": "owner_resource", "description": "The type of resource (table) that the metafield is attached to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_type": {"name": "value_type", "description": "The type of data that the metafield stores in the `value` field. Refer to the [list](https://shopify.dev/apps/metafields/types) of supported types. Coalescing of type and value_type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the metafield was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "The data to store in the metafield. The value is always stored as a string, regardless of the metafield's type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "metafield_reference": {"name": "metafield_reference", "description": "Combination of the namespace and key columns. This field is key for metafield mapping in downstream models.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean indicating the most up to date record identified by the most recent updated_at field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table", "enabled": true}, "created_at": 1747951351.02439, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__metafield\"", "raw_code": "{{ config(enabled=var('shopify_using_metafield', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__metafield_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__metafield_tmp')),\n                staging_columns=get_metafield_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as metafield_id,\n        description,\n        namespace,\n        key,\n        value,\n        lower(coalesce(type, value_type)) as value_type,\n        owner_id as owner_resource_id,\n        lower(owner_resource) as owner_resource,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        lower({{ dbt.concat([\"namespace\",\"'_'\",\"key\"]) }}) as metafield_reference,\n        row_number() over(partition by id, source_relation order by updated_at desc) = 1 as is_most_recent_record,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__metafield_tmp", "package": null, "version": null}, {"name": "stg_shopify__metafield_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_metafield_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone", "macro.dbt.concat"], "nodes": ["model.shopify_source.stg_shopify__metafield_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__metafield.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__metafield_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    namespace\n    \n as \n    \n    namespace\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    owner_resource\n    \n as \n    \n    owner_resource\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as metafield_id,\n        description,\n        namespace,\n        key,\n        value,\n        lower(coalesce(type, value_type)) as value_type,\n        owner_id as owner_resource_id,\n        lower(owner_resource) as owner_resource,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        lower(namespace || '_' || key) as metafield_reference,\n        row_number() over(partition by id, source_relation order by updated_at desc) = 1 as is_most_recent_record,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["metafield_id"], "time_spine": null}, "model.shopify_source.stg_shopify__refund": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__refund", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__refund.sql", "original_file_path": "models/stg_shopify__refund.sql", "unique_id": "model.shopify_source.stg_shopify__refund", "fqn": ["shopify_source", "stg_shopify__refund"], "alias": "stg_shopify__refund", "checksum": {"name": "sha256", "checksum": "078fa28eb283f851e8ac07032ba4a928433d06a3c094119600b6cf45b8b4b735"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a refund within Shopify.", "columns": {"refund_id": {"name": "refund_id", "description": "The unique numeric identifier for the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the refund was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_at": {"name": "processed_at", "description": "Timestamp of the date when the refund was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "User generated note attached to the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "restock": {"name": "restock", "description": "Boolean indicating if the refund is a result of a restock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "Reference to the user id which generated the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_duties_set": {"name": "total_duties_set", "description": "Record representing total duties set for the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "Reference to the order which the refund is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.007355, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"", "raw_code": "-- this model will be all NULL until you have made a refund in Shopify\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__refund_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__refund_tmp')),\n                staging_columns=get_refund_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as refund_id,\n        note,\n        order_id,\n        restock,\n        total_duties_set,\n        user_id,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(processed_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as processed_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__refund_tmp", "package": null, "version": null}, {"name": "stg_shopify__refund_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_refund_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__refund_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__refund.sql", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made a refund in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    restock\n    \n as \n    \n    restock\n    \n, \n    \n    \n    total_duties_set\n    \n as \n    \n    total_duties_set\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as refund_id,\n        note,\n        order_id,\n        restock,\n        total_duties_set,\n        user_id,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["refund_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__product": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__product.sql", "original_file_path": "models/stg_shopify__product.sql", "unique_id": "model.shopify_source.stg_shopify__product", "fqn": ["shopify_source", "stg_shopify__product"], "alias": "stg_shopify__product", "checksum": {"name": "sha256", "checksum": "139f6bbf55c9d1a28414d50303476259701ff93ac9ab3714bda3a12af905b2aa"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a product in Shopify.", "columns": {"is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted in the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "handle": {"name": "handle", "description": "A unique human-friendly string for the product. Automatically generated from the product's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_type": {"name": "product_type", "description": "A categorization for the product used for filtering and searching products.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_timestamp": {"name": "published_timestamp", "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_scope": {"name": "published_scope", "description": "Whether the product is published to the Point of Sale channel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the product was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vendor": {"name": "vendor", "description": "The name of the product's vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the product. Valid values: - active: The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active. - archived: The product is no longer being sold and isn't available to customers on sales channels and apps. - draft: The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.9992151, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__product_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_tmp')),\n                staging_columns=get_product_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n\n),\n\nfinal as (\n    \n    select\n        id as product_id,\n        handle,\n        product_type,\n        published_scope,\n        title,\n        vendor,\n        status,\n        _fivetran_deleted as is_deleted,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(published_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as published_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('product_pass_through_columns') }}\n\nfrom fields\n\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__product_tmp", "package": null, "version": null}, {"name": "stg_shopify__product_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_product_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.shopify_source.stg_shopify__product_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__product.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    cast(null as TEXT) as \n    \n    status\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select\n        id as product_id,\n        handle,\n        product_type,\n        published_scope,\n        title,\n        vendor,\n        status,\n        _fivetran_deleted as is_deleted,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        cast(\n    cast(cast(published_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as published_timestamp,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\nfrom fields\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__tax_line": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__tax_line", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__tax_line.sql", "original_file_path": "models/stg_shopify__tax_line.sql", "unique_id": "model.shopify_source.stg_shopify__tax_line", "fqn": ["shopify_source", "stg_shopify__tax_line"], "alias": "stg_shopify__tax_line", "checksum": {"name": "sha256", "checksum": "90875598324200dffbb5608032a8cb0a1ea613f0bb19453c2aa855f7d4c43b47"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Represents a single tax applied to the associated line item.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "The index of the tax line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_id": {"name": "order_line_id", "description": "The order line that this tax line is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The amount of tax, in shop currency, after discounts and before returns.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_set": {"name": "price_set", "description": "The amount of tax, in shop and presentment currencies, after discounts and before returns.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rate": {"name": "rate", "description": "The proportion of the line item price that the tax represents as a decimal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.039171, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tax_line\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__tax_line_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__tax_line_tmp')),\n                staging_columns=get_tax_line_columns()\n            )\n        }}\n    \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        index,\n        order_line_id,\n        price,\n        price_set,\n        rate,\n        title,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__tax_line_tmp", "package": null, "version": null}, {"name": "stg_shopify__tax_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_tax_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__tax_line_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__tax_line.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        index,\n        order_line_id,\n        price,\n        price_set,\n        rate,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["index", "order_line_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__discount_application": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_application", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__discount_application.sql", "original_file_path": "models/stg_shopify__discount_application.sql", "unique_id": "model.shopify_source.stg_shopify__discount_application", "fqn": ["shopify_source", "stg_shopify__discount_application"], "alias": "stg_shopify__discount_application", "checksum": {"name": "sha256", "checksum": "9a7dbbd28059e6d3634701a3674f9bff27a6366bf869ee2b52e3920bac6a0eda"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing discount applications, which define how discounts were applied at the order level.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "allocation_method": {"name": "allocation_method", "description": "The method by which the discount is allocated. Valid values include `each` (applies the discount to each eligible item) and `across` (spreads the discount value across eligible items).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "The discount code associated with the application, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "A description of the discount, often corresponding to the rule or promotion name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "The index of the discount application on the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the order to which the discount was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_selection": {"name": "target_selection", "description": "Indicates whether the discount applies to all line items (`all`) or only those that are specifically entitled (`entitled`).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_type": {"name": "target_type", "description": "The type of target this discount applies to (e.g., `line_item` or `shipping_line`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name or title of the discount as defined in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "The type of discount (e.g., `manual`, `script`, or `automatic`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "The value of the discount. If `value_type` is `percentage`, this represents a percentage. If `fixed_amount`, this is a fixed currency value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_type": {"name": "value_type", "description": "Indicates whether the discount value is a `percentage` or `fixed_amount`. If `target_type` is `shipping_line`, only `percentage` is accepted.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0412319, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__discount_application_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__discount_application_tmp')),\n                staging_columns=get_discount_application_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        allocation_method,\n        upper(code) as code,\n        description,\n        index,\n        order_id,\n        target_selection,\n        target_type,\n        title,\n        type,\n        value,\n        value_type,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__discount_application_tmp", "package": null, "version": null}, {"name": "stg_shopify__discount_application_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_discount_application_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__discount_application_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__discount_application.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allocation_method\n    \n as \n    \n    allocation_method\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    target_selection\n    \n as \n    \n    target_selection\n    \n, \n    \n    \n    target_type\n    \n as \n    \n    target_type\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        allocation_method,\n        upper(code) as code,\n        description,\n        index,\n        order_id,\n        target_selection,\n        target_type,\n        title,\n        type,\n        value,\n        value_type,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["index", "order_id"], "time_spine": null}, "model.shopify_source.stg_shopify__product_variant": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product_variant", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__product_variant.sql", "original_file_path": "models/stg_shopify__product_variant.sql", "unique_id": "model.shopify_source.stg_shopify__product_variant", "fqn": ["shopify_source", "stg_shopify__product_variant"], "alias": "stg_shopify__product_variant", "checksum": {"name": "sha256", "checksum": "3da4914a7c0bd0d37d32e4ebff9d544f7d8c0dd878fd6d5ffe3afb6f855fa9ba"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a product variant in Shopify", "columns": {"barcode": {"name": "barcode", "description": "The barcode, UPC, or ISBN number for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "compare_at_price": {"name": "compare_at_price", "description": "The original price of the item before an adjustment or a sale in shop currency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time (ISO 8601 format) when the product variant was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_service": {"name": "fulfillment_service", "description": "(DEPRECATED 2025-01-06) The fulfillment service associated with the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "grams": {"name": "grams", "description": "(DEPRECATED 2025-01-06) The weight of the product variant in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_id": {"name": "variant_id", "description": "The unique numeric identifier for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_id": {"name": "inventory_item_id", "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_management": {"name": "inventory_management", "description": "(DEPRECATED 2025-01-06) The fulfillment service that tracks the number of items in stock for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_policy": {"name": "inventory_policy", "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_quantity": {"name": "inventory_quantity", "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "option_1": {"name": "option_1", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "option_2": {"name": "option_2", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "option_3": {"name": "option_3", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "position": {"name": "position", "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The price of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "The unique numeric identifier for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sku": {"name": "sku", "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_taxable": {"name": "is_taxable", "description": "Whether a tax is charged when the product variant is sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_code": {"name": "tax_code", "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight": {"name": "weight", "description": "(DEPRECATED 2025-01-06) The weight of the product variant in the unit system specified with weight_unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight_unit": {"name": "weight_unit", "description": "(DEPRECATED 2025-01-06) The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_available_for_sale": {"name": "is_available_for_sale", "description": "Indicates whether the product variant is available for sale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "display_name": {"name": "display_name", "description": "The display name of the variant, based on the product's title and variant's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "legacy_resource_id": {"name": "legacy_resource_id", "description": "The ID of the corresponding resource in the REST Admin API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_components_required": {"name": "has_components_required", "description": "Indicates whether a product variant requires components.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sellable_online_quantity": {"name": "sellable_online_quantity", "description": "The total sellable quantity of the variant for online channels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0026722, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__product_variant_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_variant_tmp')),\n                staging_columns=get_product_variant_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as variant_id,\n        product_id,\n        inventory_item_id,\n        title,\n        price,\n        sku,\n        position,\n        inventory_policy,\n        compare_at_price,\n        fulfillment_service,\n        inventory_management,\n        taxable as is_taxable,\n        barcode,\n        grams,\n        coalesce(inventory_quantity, old_inventory_quantity) as inventory_quantity,\n        available_for_sale as is_available_for_sale,\n        display_name,\n        legacy_resource_id,\n        requires_components as has_components_required,\n        sellable_online_quantity,\n        weight,\n        weight_unit,\n        option_1,\n        option_2,\n        option_3,\n        tax_code,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('product_variant_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__product_variant_tmp", "package": null, "version": null}, {"name": "stg_shopify__product_variant_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_product_variant_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.shopify_source.stg_shopify__product_variant_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__product_variant.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    position\n    \n as \n    \n    position\n    \n, \n    \n    \n    inventory_policy\n    \n as \n    \n    inventory_policy\n    \n, \n    \n    \n    compare_at_price\n    \n as \n    \n    compare_at_price\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    barcode\n    \n as \n    \n    barcode\n    \n, \n    cast(null as numeric(28,6)) as \n    \n    old_inventory_quantity\n    \n , \n    \n    \n    inventory_quantity\n    \n as \n    \n    inventory_quantity\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n, \n    \n    \n    available_for_sale\n    \n as \n    \n    available_for_sale\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    legacy_resource_id\n    \n as \n    \n    legacy_resource_id\n    \n, \n    \n    \n    requires_components\n    \n as \n    \n    requires_components\n    \n, \n    \n    \n    sellable_online_quantity\n    \n as \n    \n    sellable_online_quantity\n    \n, \n    cast(null as TEXT) as \n    \n    fulfillment_service\n    \n , \n    cast(null as float) as \n    \n    grams\n    \n , \n    cast(null as TEXT) as \n    \n    inventory_management\n    \n , \n    cast(null as float) as \n    \n    weight\n    \n , \n    cast(null as TEXT) as \n    \n    weight_unit\n    \n , \n    cast(null as TEXT) as \n    \n    option_1\n    \n , \n    cast(null as TEXT) as \n    \n    option_2\n    \n , \n    cast(null as TEXT) as \n    \n    option_3\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as variant_id,\n        product_id,\n        inventory_item_id,\n        title,\n        price,\n        sku,\n        position,\n        inventory_policy,\n        compare_at_price,\n        fulfillment_service,\n        inventory_management,\n        taxable as is_taxable,\n        barcode,\n        grams,\n        coalesce(inventory_quantity, old_inventory_quantity) as inventory_quantity,\n        available_for_sale as is_available_for_sale,\n        display_name,\n        legacy_resource_id,\n        requires_components as has_components_required,\n        sellable_online_quantity,\n        weight,\n        weight_unit,\n        option_1,\n        option_2,\n        option_3,\n        tax_code,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["source_relation", "variant_id"], "time_spine": null}, "model.shopify_source.stg_shopify__discount_code_basic": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_code_basic", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__discount_code_basic.sql", "original_file_path": "models/stg_shopify__discount_code_basic.sql", "unique_id": "model.shopify_source.stg_shopify__discount_code_basic", "fqn": ["shopify_source", "stg_shopify__discount_code_basic"], "alias": "stg_shopify__discount_code_basic", "checksum": {"name": "sha256", "checksum": "eb6b9ac52b7ebfe0b14d81a4dc0a6f3eb87423d165d90a37f9a90af5f197c0c5"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing metadata about basic discount codes created by merchants.", "columns": {"discount_code_id": {"name": "discount_code_id", "description": "The unique ID for the discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The display name for the discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the discount code (e.g., `enabled`, `disabled`, `expired`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_once_per_customer": {"name": "applies_once_per_customer", "description": "Boolean representing whether the discount code is limited to one use per customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_limit": {"name": "usage_limit", "description": "The total number of times the discount code can be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_count": {"name": "usage_count", "description": "The number of times the discount code has been used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count": {"name": "codes_count", "description": "The total number of redeemable codes generated for this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_precision": {"name": "codes_precision", "description": "Indicates the precision or type of generated codes (e.g., exact vs. bulk).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_order_discounts": {"name": "combines_with_order_discounts", "description": "Whether this discount can be combined with other order-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_product_discounts": {"name": "combines_with_product_discounts", "description": "Whether this discount can be combined with product-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_shipping_discounts": {"name": "combines_with_shipping_discounts", "description": "Whether this discount can be combined with shipping discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_selection_all_customers": {"name": "customer_selection_all_customers", "description": "Boolean indicating whether the discount is available to all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "recurring_cycle_limit": {"name": "recurring_cycle_limit", "description": "The number of billing cycles this discount applies to (for subscription products).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_amount": {"name": "total_sales_amount", "description": "The total sales amount that resulted from the usage of this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_currency_code": {"name": "total_sales_currency_code", "description": "The currency code associated with `total_sales_amount`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the discount code was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the discount code was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starts_at": {"name": "starts_at", "description": "The date and time (ISO 8601 format) when the discount code becomes active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ends_at": {"name": "ends_at", "description": "The date and time (ISO 8601 format) when the discount code expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.082208, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__discount_code_basic_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__discount_code_basic_tmp')),\n                staging_columns=get_discount_code_basic_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        title,\n        status,\n        applies_once_per_customer,\n        usage_limit,\n        async_usage_count as usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        customer_selection_all_customers,\n        recurring_cycle_limit,\n        total_sales_amount,\n        total_sales_currency_code,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(starts_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as starts_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(ends_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as ends_at,\n        source_relation\n    \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_basic_tmp", "package": null, "version": null}, {"name": "stg_shopify__discount_code_basic_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_discount_code_basic_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__discount_code_basic_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__discount_code_basic.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as TEXT) as \n    \n    title\n    \n , \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    recurring_cycle_limit\n    \n as \n    \n    recurring_cycle_limit\n    \n, \n    \n    \n    applies_once_per_customer\n    \n as \n    \n    applies_once_per_customer\n    \n, \n    \n    \n    async_usage_count\n    \n as \n    \n    async_usage_count\n    \n, \n    \n    \n    usage_limit\n    \n as \n    \n    usage_limit\n    \n, \n    \n    \n    codes_count\n    \n as \n    \n    codes_count\n    \n, \n    \n    \n    codes_precision\n    \n as \n    \n    codes_precision\n    \n, \n    \n    \n    combines_with_order_discounts\n    \n as \n    \n    combines_with_order_discounts\n    \n, \n    \n    \n    combines_with_product_discounts\n    \n as \n    \n    combines_with_product_discounts\n    \n, \n    \n    \n    combines_with_shipping_discounts\n    \n as \n    \n    combines_with_shipping_discounts\n    \n, \n    \n    \n    customer_selection_all_customers\n    \n as \n    \n    customer_selection_all_customers\n    \n, \n    \n    \n    total_sales_amount\n    \n as \n    \n    total_sales_amount\n    \n, \n    \n    \n    total_sales_currency_code\n    \n as \n    \n    total_sales_currency_code\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        title,\n        status,\n        applies_once_per_customer,\n        usage_limit,\n        async_usage_count as usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        customer_selection_all_customers,\n        recurring_cycle_limit,\n        total_sales_amount,\n        total_sales_currency_code,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(starts_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as starts_at,\n        cast(\n    cast(cast(ends_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as ends_at,\n        source_relation\n    \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["discount_code_id"], "time_spine": null}, "model.shopify_source.stg_shopify__order_shipping_line": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_shipping_line", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order_shipping_line.sql", "original_file_path": "models/stg_shopify__order_shipping_line.sql", "unique_id": "model.shopify_source.stg_shopify__order_shipping_line", "fqn": ["shopify_source", "stg_shopify__order_shipping_line"], "alias": "stg_shopify__order_shipping_line", "checksum": {"name": "sha256", "checksum": "60447357fa4d65272c980aac4d5b2d117e24bcaeb4bf208e1b40ca8a72d03c08"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Represents the shipping details that the customer chose for their order.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "carrier_identifier": {"name": "carrier_identifier", "description": "A reference to the carrier service that provided the rate. Present when the rate was computed by a third-party carrier service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "A reference to the shipping method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_category": {"name": "delivery_category", "description": "The general classification of the delivery method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discounted_price": {"name": "discounted_price", "description": "The pre-tax shipping price with discounts applied in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discounted_price_set": {"name": "discounted_price_set", "description": "The pre-tax shipping price with discounts applied (JSON) in presentment and shop currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_shipping_line_id": {"name": "order_shipping_line_id", "description": "A globally-unique identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "ID of the associated order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Returns the price of the shipping line in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_set": {"name": "price_set", "description": "Returns the price of the shipping line (JSON) in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_third_party_required": {"name": "is_third_party_required", "description": "The fulfillment service requested for the shipping method. Present if the shipping method requires processing by a third party fulfillment service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "Returns the rate source for the shipping line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Returns the title of the shipping line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.026371, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__order_shipping_line_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_shipping_line_tmp')),\n                staging_columns=get_order_shipping_line_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_shipping_line_id,\n        order_id,\n        carrier_identifier,\n        code,\n        delivery_category,\n        discounted_price,\n        discounted_price_set,\n        phone,\n        price,\n        price_set,\n        requested_fulfillment_service_id is not null as is_third_party_required,\n        source,\n        title,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_shipping_line_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_shipping_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_shipping_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__order_shipping_line_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_shipping_line.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    discounted_price_set\n    \n as \n    \n    discounted_price_set\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_shipping_line_id,\n        order_id,\n        carrier_identifier,\n        code,\n        delivery_category,\n        discounted_price,\n        discounted_price_set,\n        phone,\n        price,\n        price_set,\n        requested_fulfillment_service_id is not null as is_third_party_required,\n        source,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_shipping_line_id"], "time_spine": null}, "model.shopify_source.stg_shopify__inventory_item": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__inventory_item", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__inventory_item.sql", "original_file_path": "models/stg_shopify__inventory_item.sql", "unique_id": "model.shopify_source.stg_shopify__inventory_item", "fqn": ["shopify_source", "stg_shopify__inventory_item"], "alias": "stg_shopify__inventory_item", "checksum": {"name": "sha256", "checksum": "d4fe927c0ccfc5b13c80fb7dfb667a1f16c4771bfe67199f55c72b05e5da59b9"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "An inventory item represents a physical good. It holds essential information about the physical good, including its SKU and whether its inventory is tracked. There is a 1:1 relationship between a product variant and an inventory item.\n", "columns": {"is_deleted": {"name": "is_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code_of_origin": {"name": "country_code_of_origin", "description": "The country code (ISO 3166-1 alpha-2) of where the item came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the inventory item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_id": {"name": "inventory_item_id", "description": "The ID of the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province_code_of_origin": {"name": "province_code_of_origin", "description": "The province code (ISO 3166-2 alpha-2) of where the item came from. The province code is only used if the shipping provider for the inventory item is Canada Post.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_shipping_required": {"name": "is_shipping_required", "description": "Boolean representing whether a customer needs to provide a shipping address when placing an order containing the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sku": {"name": "sku", "description": "The unique SKU (stock keeping unit) of the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_inventory_quantity_tracked": {"name": "is_inventory_quantity_tracked", "description": "Boolean representing whether inventory levels are tracked for the item. If true, then the inventory quantity changes are tracked by Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the inventory item was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "duplicate_sku_count": {"name": "duplicate_sku_count", "description": "The number of inventory items that share the same SKU with this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "harmonized_system_code": {"name": "harmonized_system_code", "description": "The harmonized system code of the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_history_url": {"name": "inventory_history_url", "description": "The URL that points to the inventory history for the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "legacy_resource_id": {"name": "legacy_resource_id", "description": "The ID of the corresponding resource in the REST Admin API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_id": {"name": "measurement_id", "description": "The unique identifier for the inventory item's measurement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_weight_value": {"name": "measurement_weight_value", "description": "The weight value of the inventory item's measurement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_weight_unit": {"name": "measurement_weight_unit", "description": "The unit of measurement for the inventory item's weight.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_tracked_editable_locked": {"name": "is_tracked_editable_locked", "description": "Indicates whether the 'tracked' field for the inventory item is locked from editing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracked_editable_reason": {"name": "tracked_editable_reason", "description": "Provides the reason why the 'tracked' field for the inventory item is locked from editing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unit_cost_amount": {"name": "unit_cost_amount", "description": "The unit cost associated with the inventory item. Coalesced with the deprecated `cost` field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unit_cost_currency_code": {"name": "unit_cost_currency_code", "description": "Currency of the unit cost associated with the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.016981, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_item\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__inventory_item_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__inventory_item_tmp')),\n                staging_columns=get_inventory_item_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as inventory_item_id,\n        sku,\n        _fivetran_deleted as is_deleted, -- won't filter out for now\n        coalesce(unit_cost_amount, cost) as unit_cost_amount,\n        unit_cost_currency_code,\n        country_code_of_origin,\n        province_code_of_origin,\n        requires_shipping as is_shipping_required,\n        tracked as is_inventory_quantity_tracked,\n        duplicate_sku_count,\n        harmonized_system_code,\n        inventory_history_url,\n        legacy_resource_id,\n        measurement_id,\n        measurement_weight_value,\n        measurement_weight_unit,\n        tracked_editable_locked as is_tracked_editable_locked,\n        tracked_editable_reason,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__inventory_item_tmp", "package": null, "version": null}, {"name": "stg_shopify__inventory_item_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_inventory_item_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__inventory_item_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__inventory_item.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    country_code_of_origin\n    \n as \n    \n    country_code_of_origin\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    province_code_of_origin\n    \n as \n    \n    province_code_of_origin\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    tracked\n    \n as \n    \n    tracked\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    duplicate_sku_count\n    \n as \n    \n    duplicate_sku_count\n    \n, \n    \n    \n    harmonized_system_code\n    \n as \n    \n    harmonized_system_code\n    \n, \n    \n    \n    inventory_history_url\n    \n as \n    \n    inventory_history_url\n    \n, \n    \n    \n    legacy_resource_id\n    \n as \n    \n    legacy_resource_id\n    \n, \n    \n    \n    measurement_id\n    \n as \n    \n    measurement_id\n    \n, \n    \n    \n    measurement_weight_value\n    \n as \n    \n    measurement_weight_value\n    \n, \n    \n    \n    measurement_weight_unit\n    \n as \n    \n    measurement_weight_unit\n    \n, \n    \n    \n    tracked_editable_locked\n    \n as \n    \n    tracked_editable_locked\n    \n, \n    \n    \n    tracked_editable_reason\n    \n as \n    \n    tracked_editable_reason\n    \n, \n    \n    \n    unit_cost_amount\n    \n as \n    \n    unit_cost_amount\n    \n, \n    \n    \n    unit_cost_currency_code\n    \n as \n    \n    unit_cost_currency_code\n    \n, \n    cast(null as float) as \n    \n    cost\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as inventory_item_id,\n        sku,\n        _fivetran_deleted as is_deleted, -- won't filter out for now\n        coalesce(unit_cost_amount, cost) as unit_cost_amount,\n        unit_cost_currency_code,\n        country_code_of_origin,\n        province_code_of_origin,\n        requires_shipping as is_shipping_required,\n        tracked as is_inventory_quantity_tracked,\n        duplicate_sku_count,\n        harmonized_system_code,\n        inventory_history_url,\n        legacy_resource_id,\n        measurement_id,\n        measurement_weight_value,\n        measurement_weight_unit,\n        tracked_editable_locked as is_tracked_editable_locked,\n        tracked_editable_reason,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["inventory_item_id"], "time_spine": null}, "model.shopify_source.stg_shopify__order": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order.sql", "original_file_path": "models/stg_shopify__order.sql", "unique_id": "model.shopify_source.stg_shopify__order", "fqn": ["shopify_source", "stg_shopify__order"], "alias": "stg_shopify__order", "checksum": {"name": "sha256", "checksum": "1a2ec7a4d5e9dd34c6deb28641ecc5c24f1edb33c171782d5bc0d91ba2a4a4f7"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "app_id": {"name": "app_id", "description": "The ID of the app that created the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_id": {"name": "checkout_id", "description": "ID of the order's checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_status_url": {"name": "order_status_url", "description": "The URL pointing to the order status web page, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_1": {"name": "billing_address_address_1", "description": "The street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_2": {"name": "billing_address_address_2", "description": "An optional additional field for the street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_city": {"name": "billing_address_city", "description": "The city, town, or village of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_company": {"name": "billing_address_company", "description": "The company of the person associated with the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country": {"name": "billing_address_country", "description": "The name of the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country_code": {"name": "billing_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_first_name": {"name": "billing_address_first_name", "description": "The first name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_last_name": {"name": "billing_address_last_name", "description": "The last name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_latitude": {"name": "billing_address_latitude", "description": "The latitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_longitude": {"name": "billing_address_longitude", "description": "The longitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_name": {"name": "billing_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_phone": {"name": "billing_address_phone", "description": "The phone number at the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province": {"name": "billing_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province_code": {"name": "billing_address_province_code", "description": "The two-letter abbreviation of the region of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_zip": {"name": "billing_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "browser_ip": {"name": "browser_ip", "description": "The IP address of the browser used by the customer when they placed the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_buyer_accepted_marketing": {"name": "has_buyer_accepted_marketing", "description": "Whether the customer consented to receive email updates from the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cancel_reason": {"name": "cancel_reason", "description": "The reason why the order was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cancelled_timestamp": {"name": "cancelled_timestamp", "description": "The date and time when the order was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cart_token": {"name": "cart_token", "description": "The ID of the cart that's associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "closed_timestamp": {"name": "closed_timestamp", "description": "The date and time when the order was closed (archived).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_timestamp": {"name": "created_timestamp", "description": "The autogenerated date and time when the order was created in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code for the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "The ID of the order's customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The customer's email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "financial_status": {"name": "financial_status", "description": "The status of payments associated with the order. Can only be set when the order is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_status": {"name": "fulfillment_status", "description": "The order's status in terms of fulfilled line items.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "landing_site_base_url": {"name": "landing_site_base_url", "description": "The URL for the page where the buyer landed when they entered the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the order was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "An optional note that a shop owner can attach to the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number": {"name": "number", "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_number": {"name": "order_number", "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "referring_site": {"name": "referring_site", "description": "The website where the customer clicked a link to the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_1": {"name": "shipping_address_address_1", "description": "The street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_2": {"name": "shipping_address_address_2", "description": "An optional additional field for the street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_city": {"name": "shipping_address_city", "description": "The city, town, or village of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_company": {"name": "shipping_address_company", "description": "The company of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country": {"name": "shipping_address_country", "description": "The name of the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_first_name": {"name": "shipping_address_first_name", "description": "The first name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_last_name": {"name": "shipping_address_last_name", "description": "The last name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_latitude": {"name": "shipping_address_latitude", "description": "The latitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_longitude": {"name": "shipping_address_longitude", "description": "The longitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_name": {"name": "shipping_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province": {"name": "shipping_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province_code": {"name": "shipping_address_province_code", "description": "The two-letter abbreviation of the region of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_zip": {"name": "shipping_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_name": {"name": "source_name", "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_price": {"name": "subtotal_price", "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_taxes_included": {"name": "has_taxes_included", "description": "Whether taxes are included in the order subtotal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_test_order": {"name": "is_test_order", "description": "Whether this is a test order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "token": {"name": "token", "description": "A unique token for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discounts": {"name": "total_discounts", "description": "The total discounts applied to the price of the order in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of all line item prices in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price": {"name": "total_price", "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax": {"name": "total_tax", "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_weight": {"name": "total_weight", "description": "The sum of all line item weights in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time (ISO 8601 format) when the order was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_shipping_price_set": {"name": "total_shipping_price_set", "description": "The total shipping price of the order, excluding discounts and returns, in shop and presentment currencies. If taxes_included is set to true, then total_shipping_price_set includes taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_token": {"name": "checkout_token", "description": "A unique value when referencing the checkout that's associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_locale": {"name": "customer_locale", "description": "A two-letter or three-letter language code, optionally followed by a region modifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_deleted": {"name": "is_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tip_received": {"name": "total_tip_received", "description": "The sum of all the tips in the order in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_details_user_agent": {"name": "client_details_user_agent", "description": "Details of the browsing client, including software and operating versions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax_set": {"name": "total_tax_set", "description": "The total tax applied to the order in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discounts_set": {"name": "total_discounts_set", "description": "The total discounts applied to the price of the order in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "presentment_currency": {"name": "presentment_currency", "description": "The presentment currency that was used to display prices to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The ID of the order placed on the originating platform. This value doesn't correspond to the Shopify ID that's generated from a completed draft.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_line_items_price_set": {"name": "total_line_items_price_set", "description": "The total of all line item prices in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price_set": {"name": "total_price_set", "description": "The total price of the order in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_confirmed": {"name": "is_confirmed", "description": "Whether the order is confirmed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.9978828, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__order_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_tmp')),\n                staging_columns=get_order_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as order_id,\n        user_id,\n        total_discounts,\n        total_discounts_set,\n        total_line_items_price,\n        total_line_items_price_set,\n        total_price,\n        total_price_set,\n        total_tax_set,\n        total_tax,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        total_weight,\n        total_tip_received,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        number,\n        order_number,\n        cancel_reason,\n        cart_token,\n        checkout_token,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(cancelled_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as cancelled_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(closed_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as closed_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(processed_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as processed_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_timestamp,\n        currency,\n        customer_id,\n        lower(email) as email,\n        financial_status,\n        fulfillment_status,\n        referring_site,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        browser_ip,\n        total_shipping_price_set,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        token,\n        app_id,\n        checkout_id,\n        client_details_user_agent,\n        customer_locale,\n        order_status_url,\n        presentment_currency,\n        test as is_test_order,\n        _fivetran_deleted as is_deleted,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        confirmed as is_confirmed,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('order_pass_through_columns') }}\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(is_test_order, false)\nand not coalesce(is_deleted, false)", "language": "sql", "refs": [{"name": "stg_shopify__order_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.shopify_source.stg_shopify__order_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    cast(null as TEXT) as \n    \n    total_discounts_set\n    \n , \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    cast(null as TEXT) as \n    \n    total_line_items_price_set\n    \n , \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    cast(null as TEXT) as \n    \n    total_price_set\n    \n , \n    cast(null as TEXT) as \n    \n    total_tax_set\n    \n , \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    cast(null as float) as \n    \n    total_tip_received\n    \n , \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    cancel_reason\n    \n as \n    \n    cancel_reason\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    checkout_token\n    \n as \n    \n    checkout_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    financial_status\n    \n as \n    \n    financial_status\n    \n, \n    \n    \n    fulfillment_status\n    \n as \n    \n    fulfillment_status\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    \n    \n    billing_address_address_2\n    \n as \n    \n    billing_address_address_2\n    \n, \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    browser_ip\n    \n as \n    \n    browser_ip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    cast(null as TEXT) as \n    \n    total_shipping_price_set\n    \n , \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    \n    \n    shipping_address_address_2\n    \n as \n    \n    shipping_address_address_2\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as integer) as \n    \n    app_id\n    \n , \n    cast(null as integer) as \n    \n    checkout_id\n    \n , \n    cast(null as TEXT) as \n    \n    client_details_user_agent\n    \n , \n    cast(null as TEXT) as \n    \n    customer_locale\n    \n , \n    cast(null as TEXT) as \n    \n    order_status_url\n    \n , \n    cast(null as TEXT) as \n    \n    presentment_currency\n    \n , \n    cast(null as boolean) as \n    \n    confirmed\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as order_id,\n        user_id,\n        total_discounts,\n        total_discounts_set,\n        total_line_items_price,\n        total_line_items_price_set,\n        total_price,\n        total_price_set,\n        total_tax_set,\n        total_tax,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        total_weight,\n        total_tip_received,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        number,\n        order_number,\n        cancel_reason,\n        cart_token,\n        checkout_token,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(cancelled_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as cancelled_timestamp,\n        cast(\n    cast(cast(closed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as closed_timestamp,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        currency,\n        customer_id,\n        lower(email) as email,\n        financial_status,\n        fulfillment_status,\n        referring_site,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        browser_ip,\n        total_shipping_price_set,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        token,\n        app_id,\n        checkout_id,\n        client_details_user_agent,\n        customer_locale,\n        order_status_url,\n        presentment_currency,\n        test as is_test_order,\n        _fivetran_deleted as is_deleted,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        confirmed as is_confirmed,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(is_test_order, false)\nand not coalesce(is_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__abandoned_checkout_discount_code": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__abandoned_checkout_discount_code", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__abandoned_checkout_discount_code.sql", "original_file_path": "models/stg_shopify__abandoned_checkout_discount_code.sql", "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "fqn": ["shopify_source", "stg_shopify__abandoned_checkout_discount_code"], "alias": "stg_shopify__abandoned_checkout_discount_code", "checksum": {"name": "sha256", "checksum": "61c63b2f952a3f40414efb2ef6691c80b67eb55985761d38ce7aa0b397e590ee"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Abandoned checkouts that applied a discount code.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount of the discount in presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_id": {"name": "checkout_id", "description": "ID of the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "The discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "When the checkout discount application was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_id": {"name": "discount_id", "description": "ID of the discount. Deprecated, use `code` instead.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "The type of discount. Valid values - percentage, shipping, fixed_amount. (default - fixed_amount)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "When the checkout's discount was last updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951351.035936, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"", "raw_code": "{{ config(enabled=var('shopify_using_abandoned_checkout', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__abandoned_checkout_discount_code_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__abandoned_checkout_discount_code_tmp')),\n                staging_columns=get_abandoned_checkout_discount_code_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        checkout_id,\n        upper(code) as code,\n        discount_id,\n        amount,\n        type,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation, \n        row_number() over(partition by checkout_id, upper(code), source_relation order by index desc) as index\n\n\n    from fields\n\n)\n\nselect *\nfrom final\nwhere index = 1", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout_discount_code_tmp", "package": null, "version": null}, {"name": "stg_shopify__abandoned_checkout_discount_code_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_abandoned_checkout_discount_code_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__abandoned_checkout_discount_code.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    discount_id\n    \n as \n    \n    discount_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n    \n    select \n        checkout_id,\n        upper(code) as code,\n        discount_id,\n        amount,\n        type,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation, \n        row_number() over(partition by checkout_id, upper(code), source_relation order by index desc) as index\n\n\n    from fields\n\n)\n\nselect *\nfrom final\nwhere index = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["checkout_id"], "time_spine": null}, "model.shopify_source.stg_shopify__discount_code_app": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_code_app", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__discount_code_app.sql", "original_file_path": "models/stg_shopify__discount_code_app.sql", "unique_id": "model.shopify_source.stg_shopify__discount_code_app", "fqn": ["shopify_source", "stg_shopify__discount_code_app"], "alias": "stg_shopify__discount_code_app", "checksum": {"name": "sha256", "checksum": "cf7b324e4e7512dc4a33591da333ac56808ef16b752088cb7604dcbcb9fb745c"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing metadata for discount codes created through third-party apps in Shopify.", "columns": {"discount_code_id": {"name": "discount_code_id", "description": "The unique ID for the discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The display name for the discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the discount code (e.g., `enabled`, `disabled`, `expired`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_once_per_customer": {"name": "applies_once_per_customer", "description": "Boolean representing whether the discount code is limited to one use per customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_limit": {"name": "usage_limit", "description": "The total number of times the discount code can be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_count": {"name": "usage_count", "description": "The number of times the discount code has been used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count": {"name": "codes_count", "description": "The total number of redeemable codes generated for this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_precision": {"name": "codes_precision", "description": "Indicates the precision or type of generated codes (e.g., exact vs. bulk).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_order_discounts": {"name": "combines_with_order_discounts", "description": "Whether this discount can be combined with other order-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_product_discounts": {"name": "combines_with_product_discounts", "description": "Whether this discount can be combined with product-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_shipping_discounts": {"name": "combines_with_shipping_discounts", "description": "Whether this discount can be combined with shipping discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_selection_all_customers": {"name": "customer_selection_all_customers", "description": "Boolean indicating whether the discount is available to all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "recurring_cycle_limit": {"name": "recurring_cycle_limit", "description": "The number of billing cycles this discount applies to (for subscription products).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_amount": {"name": "total_sales_amount", "description": "The total sales amount that resulted from the usage of this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_currency_code": {"name": "total_sales_currency_code", "description": "The currency code associated with `total_sales_amount`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the discount code was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the discount code was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starts_at": {"name": "starts_at", "description": "The date and time (ISO 8601 format) when the discount code becomes active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ends_at": {"name": "ends_at", "description": "The date and time (ISO 8601 format) when the discount code expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951351.08158, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app\"", "raw_code": "{{ config(enabled=var('shopify_using_discount_code_app', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__discount_code_app_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__discount_code_app_tmp')),\n                staging_columns=get_discount_code_app_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        title,\n        status,\n        applies_once_per_customer,\n        usage_limit,\n        async_usage_count as usage_count,\n        codes_count_count as codes_count,\n        codes_count_precision as codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        customer_selection_all_customers,\n        recurring_cycle_limit,\n        total_sales_amount,\n        total_sales_currency_code,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(starts_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as starts_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(ends_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as ends_at,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_app_tmp", "package": null, "version": null}, {"name": "stg_shopify__discount_code_app_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_discount_code_app_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__discount_code_app_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__discount_code_app.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app_tmp\"\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    recurring_cycle_limit\n    \n as \n    \n    recurring_cycle_limit\n    \n, \n    \n    \n    applies_once_per_customer\n    \n as \n    \n    applies_once_per_customer\n    \n, \n    \n    \n    async_usage_count\n    \n as \n    \n    async_usage_count\n    \n, \n    \n    \n    usage_limit\n    \n as \n    \n    usage_limit\n    \n, \n    \n    \n    codes_count_count\n    \n as \n    \n    codes_count_count\n    \n, \n    \n    \n    codes_count_precision\n    \n as \n    \n    codes_count_precision\n    \n, \n    \n    \n    combines_with_order_discounts\n    \n as \n    \n    combines_with_order_discounts\n    \n, \n    \n    \n    combines_with_product_discounts\n    \n as \n    \n    combines_with_product_discounts\n    \n, \n    \n    \n    combines_with_shipping_discounts\n    \n as \n    \n    combines_with_shipping_discounts\n    \n, \n    \n    \n    customer_selection_all_customers\n    \n as \n    \n    customer_selection_all_customers\n    \n, \n    \n    \n    total_sales_amount\n    \n as \n    \n    total_sales_amount\n    \n, \n    \n    \n    total_sales_currency_code\n    \n as \n    \n    total_sales_currency_code\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        title,\n        status,\n        applies_once_per_customer,\n        usage_limit,\n        async_usage_count as usage_count,\n        codes_count_count as codes_count,\n        codes_count_precision as codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        customer_selection_all_customers,\n        recurring_cycle_limit,\n        total_sales_amount,\n        total_sales_currency_code,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(starts_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as starts_at,\n        cast(\n    cast(cast(ends_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as ends_at,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["discount_code_id"], "time_spine": null}, "model.shopify_source.stg_shopify__product_media": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product_media", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__product_media.sql", "original_file_path": "models/stg_shopify__product_media.sql", "unique_id": "model.shopify_source.stg_shopify__product_media", "fqn": ["shopify_source", "stg_shopify__product_media"], "alias": "stg_shopify__product_media", "checksum": {"name": "sha256", "checksum": "8bdfed0d02d4ccc52e230b7f400e143fdb29ffb2f80ce48e69c571872dbe2003"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table mapping products to their associated media.", "columns": {"product_id": {"name": "product_id", "description": "The id of the product associated with the media.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "media_id": {"name": "media_id", "description": "The unique identifier for the media asset linked to the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0284748, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__product_media_tmp') }}\n),\n\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_media_tmp')),\n                staging_columns=get_product_media_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select\n        product_id,\n        media_id,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__product_media_tmp", "package": null, "version": null}, {"name": "stg_shopify__product_media_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_product_media_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__product_media_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__product_media.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media_tmp\"\n),\n\n\nfields as (\n\n    select\n        \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    media_id\n    \n as \n    \n    media_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        product_id,\n        media_id,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["media_id", "product_id"], "time_spine": null}, "model.shopify_source.stg_shopify__product_tag": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product_tag", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__product_tag.sql", "original_file_path": "models/stg_shopify__product_tag.sql", "unique_id": "model.shopify_source.stg_shopify__product_tag", "fqn": ["shopify_source", "stg_shopify__product_tag"], "alias": "stg_shopify__product_tag", "checksum": {"name": "sha256", "checksum": "ae6f7ea3469f488f934fff8e9d1ccccc5ba2df565fef1788164310c61f8d2556"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Tags that the shop owner has attached to the product.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index (starting from 1) representing when the tag was placed on the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "ID of the product being tagged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the tag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.029475, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__product_tag_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_tag_tmp')),\n                staging_columns=get_product_tag_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        product_id,\n        index,\n        value,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__product_tag_tmp", "package": null, "version": null}, {"name": "stg_shopify__product_tag_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_product_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__product_tag_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__product_tag.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        product_id,\n        index,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["index", "product_id"], "time_spine": null}, "model.shopify_source.stg_shopify__order_note_attribute": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_note_attribute", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order_note_attribute.sql", "original_file_path": "models/stg_shopify__order_note_attribute.sql", "unique_id": "model.shopify_source.stg_shopify__order_note_attribute", "fqn": ["shopify_source", "stg_shopify__order_note_attribute"], "alias": "stg_shopify__order_note_attribute", "checksum": {"name": "sha256", "checksum": "ff9809e03c58c8e99e63ab8c7e7ba064f9abe7a86e191d19a8047912bdc19157"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing custom attributes placed on orders.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name of the attribute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "ID referencing the order the note attribute belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the attribute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.024792, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_note_attribute\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__order_note_attribute_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_note_attribute_tmp')),\n                staging_columns=get_order_note_attribute_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        name,\n        value,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_note_attribute_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_note_attribute_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_note_attribute_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__order_note_attribute_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_note_attribute.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_note_attribute_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        name,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["name", "order_id"], "time_spine": null}, "model.shopify_source.stg_shopify__discount_allocation": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_allocation", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__discount_allocation.sql", "original_file_path": "models/stg_shopify__discount_allocation.sql", "unique_id": "model.shopify_source.stg_shopify__discount_allocation", "fqn": ["shopify_source", "stg_shopify__discount_allocation"], "alias": "stg_shopify__discount_allocation", "checksum": {"name": "sha256", "checksum": "562d0514ef2c4b64ba1b8308392568adbf80f98ae24a6c95b75b690fd0c778f9"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing allocation amounts from discount applications across specific order lines.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The total amount discounted on the order line from this allocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set_presentment_money_amount": {"name": "amount_set_presentment_money_amount", "description": "The presentment money amount of the discount allocation in the customer\u2019s local currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set_presentment_money_currency_code": {"name": "amount_set_presentment_money_currency_code", "description": "The presentment money currency code for the customer\u2019s local currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set_shop_money_amount": {"name": "amount_set_shop_money_amount", "description": "The shop money amount of the discount allocation in the store\u2019s currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set_shop_money_currency_code": {"name": "amount_set_shop_money_currency_code", "description": "The shop money currency code for the store\u2019s currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_application_index": {"name": "discount_application_index", "description": "Index of the discount application this allocation relates to. Used to join with the discount application.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "The index of the discount allocation within the list of allocations on an order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_id": {"name": "order_line_id", "description": "The ID of the order line item receiving the allocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.040415, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_allocation\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__discount_allocation_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__discount_allocation_tmp')),\n                staging_columns=get_discount_allocation_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        amount,\n        amount_set_presentment_money_amount,\n        amount_set_presentment_money_currency_code,\n        amount_set_shop_money_amount,\n        amount_set_shop_money_currency_code,\n        discount_application_index,\n        index,\n        order_line_id,        \n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__discount_allocation_tmp", "package": null, "version": null}, {"name": "stg_shopify__discount_allocation_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_discount_allocation_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__discount_allocation_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__discount_allocation.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_allocation_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_set_presentment_money_amount\n    \n as \n    \n    amount_set_presentment_money_amount\n    \n, \n    \n    \n    amount_set_presentment_money_currency_code\n    \n as \n    \n    amount_set_presentment_money_currency_code\n    \n, \n    \n    \n    amount_set_shop_money_amount\n    \n as \n    \n    amount_set_shop_money_amount\n    \n, \n    \n    \n    amount_set_shop_money_currency_code\n    \n as \n    \n    amount_set_shop_money_currency_code\n    \n, \n    \n    \n    discount_application_index\n    \n as \n    \n    discount_application_index\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        amount,\n        amount_set_presentment_money_amount,\n        amount_set_presentment_money_currency_code,\n        amount_set_shop_money_amount,\n        amount_set_shop_money_currency_code,\n        discount_application_index,\n        index,\n        order_line_id,        \n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["discount_application_index", "order_line_id"], "time_spine": null}, "model.shopify_source.stg_shopify__fulfillment_event": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__fulfillment_event", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__fulfillment_event.sql", "original_file_path": "models/stg_shopify__fulfillment_event.sql", "unique_id": "model.shopify_source.stg_shopify__fulfillment_event", "fqn": ["shopify_source", "stg_shopify__fulfillment_event"], "alias": "stg_shopify__fulfillment_event", "checksum": {"name": "sha256", "checksum": "5d9ed05cb2cb9fb1f61f1c690c0dad5a8a4c562db1bc4d46efe4ca9f842c5305"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "The FulfillmentEvent resource represents tracking events that belong to a fulfillment of one or more items in an order.  Fulfillment events are displayed on the order status page to update customers on the status of their shipment.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_1": {"name": "address_1", "description": "The street address where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "city": {"name": "city", "description": "The city where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "The country where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the fulfillment event was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_delivery_at": {"name": "estimated_delivery_at", "description": "The estimated delivery date based on the fulfillment's tracking number, as long as it's provided by one of the following carriers: USPS, FedEx, UPS, or Canada Post (Canada only).  Value is `null` if no tracking number is available or if the tracking number is from an unsupported carrier. This property is available only when carrier calculated rates are in use.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_id": {"name": "fulfillment_id", "description": "An ID for the fulfillment that's associated with the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "happened_at": {"name": "happened_at", "description": "The date and time (ISO 8601 format) when the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_event_id": {"name": "fulfillment_event_id", "description": "An ID for the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latitude": {"name": "latitude", "description": "A geographic coordinate specifying the latitude of the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "longitude": {"name": "longitude", "description": "A geographic coordinate specifying the longitude of the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "message": {"name": "message", "description": "An arbitrary message describing the status. Can be provided by a shipping carrier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the order that's associated with the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province": {"name": "province", "description": "The province where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shop_id": {"name": "shop_id", "description": "An ID for the shop that's associated with the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the fulfillment event. Valid values: - label_printed: A label for the shipment was purchased and printed. - label_purchased: A label for the shipment was purchased, but not printed. - attempted_delivery: Delivery of the shipment was attempted, but unable to be completed. - ready_for_pickup: The shipment is ready for pickup at a shipping depot. - picked_up: The fulfillment was successfully picked up. - confirmed: The carrier is aware of the shipment, but hasn't received it yet. - in_transit: The shipment is being transported between shipping facilities on the way to its destination. - out_for_delivery: The shipment is being delivered to its final destination. - delivered: The shipment was successfully delivered. - failure: Something went wrong when pulling tracking information for the shipment, such as the tracking number was invalid or the shipment was canceled.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the fulfillment event was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "zip": {"name": "zip", "description": "The zip code of the location where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951351.038823, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_event\"", "raw_code": "{{ config(enabled=var('shopify_using_fulfillment_event', false)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__fulfillment_event_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__fulfillment_event_tmp')),\n                staging_columns=get_fulfillment_event_columns()\n            )\n        }}\n        \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_event_id,\n        fulfillment_id,\n        shop_id,\n        order_id,\n        status,\n        message,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(estimated_delivery_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as estimated_delivery_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(happened_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as happened_at,\n        address_1,\n        city,\n        province,\n        country,\n        zip,\n        latitude,\n        longitude,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__fulfillment_event_tmp", "package": null, "version": null}, {"name": "stg_shopify__fulfillment_event_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_fulfillment_event_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__fulfillment_event_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__fulfillment_event.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_event_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    estimated_delivery_at\n    \n as \n    \n    estimated_delivery_at\n    \n, \n    \n    \n    fulfillment_id\n    \n as \n    \n    fulfillment_id\n    \n, \n    \n    \n    happened_at\n    \n as \n    \n    happened_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    shop_id\n    \n as \n    \n    shop_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_event_id,\n        fulfillment_id,\n        shop_id,\n        order_id,\n        status,\n        message,\n        cast(\n    cast(cast(estimated_delivery_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as estimated_delivery_at,\n        cast(\n    cast(cast(happened_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as happened_at,\n        address_1,\n        city,\n        province,\n        country,\n        zip,\n        latitude,\n        longitude,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fulfillment_event_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__collection": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__collection", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__collection.sql", "original_file_path": "models/stg_shopify__collection.sql", "unique_id": "model.shopify_source.stg_shopify__collection", "fqn": ["shopify_source", "stg_shopify__collection"], "alias": "stg_shopify__collection", "checksum": {"name": "sha256", "checksum": "982c237308ac0df3a5f39a0e5f7d2235d71071d685f0668017092168a368ebe8"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A collection is a grouping of products that merchants can create to make their stores easier to browse. Merchants can create collections by selecting products individually or by defining rules that automatically determine whether products are included (aka a \"smart collection\").\n", "columns": {"is_deleted": {"name": "is_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rule_logic": {"name": "rule_logic", "description": "Whether the `rules` are disjunctive (logical `OR`) or conjunctive (logical `AND`)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "handle": {"name": "handle", "description": "A unique, human-readable string for the collection automatically generated from its title. This is used in themes by the Liquid templating language to refer to the collection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "collection_id": {"name": "collection_id", "description": "The ID for the collection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_at": {"name": "published_at", "description": "The time and date (ISO 8601 format) when the collection was made visible. Returns null for a hidden collection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_scope": {"name": "published_scope", "description": "Whether the collection is published to the Point of Sale channel. Valid values `web` (the collection is published to the Online Store channel but not published to the Point of Sale channel) and `global` (the collection is published to both the Online Store channel and the Point of Sale channel).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rules": {"name": "rules", "description": "An array of rules that define what products go into the smart collection. Each rule (`column` -- `relation` --> `condition`) has these properties: - `column`: the property of a product being used to populate the smart collection. Ex: 'tag', 'type', 'vendor', 'variant_price', etc. - `relation`: The comparative relationship between the column choice, and the condition ('equals', 'contains', 'greater_than', etc.) - condition: Select products for a smart collection using a condition. Values are either strings or numbers, depending on the relation value. See the [Shopify docs](https://shopify.dev/api/admin-rest/2022-10/resources/smartcollection#resource-object) for more.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sort_order": {"name": "sort_order", "description": "The order of the products in the collection. Valid values incline - `alpha-asc`: The products are sorted alphabetically from A to Z. - `alpha-des`: The products are sorted alphabetically from Z to A. - `best-selling`: The products are sorted by number of sales. - `created`: The products are sorted by the date they were created, from oldest to newest. - `created-desc`: The products are sorted by the date they were created, from newest to oldest. - `manual`: The products are manually sorted by the shop owner. - `price-asc`: The products are sorted by price from lowest to highest. - `price-desc`: The products are sorted by price from highest to lowest.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the collection", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the collection was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0123048, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__collection_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__collection_tmp')),\n                staging_columns=get_collection_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as collection_id,\n        _fivetran_deleted as is_deleted,\n        case \n            when disjunctive is null then null\n            when disjunctive then 'disjunctive'\n            else 'conjunctive' end as rule_logic,\n        handle,\n        published_scope,\n        rules,\n        sort_order,\n        title,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(published_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as published_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__collection_tmp", "package": null, "version": null}, {"name": "stg_shopify__collection_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_collection_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__collection_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__collection.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    disjunctive\n    \n as \n    \n    disjunctive\n    \n, \n    \n    \n    handle\n    \n as \n    \n    handle\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    published_at\n    \n as \n    \n    published_at\n    \n, \n    \n    \n    published_scope\n    \n as \n    \n    published_scope\n    \n, \n    \n    \n    rules\n    \n as \n    \n    rules\n    \n, \n    \n    \n    sort_order\n    \n as \n    \n    sort_order\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as collection_id,\n        _fivetran_deleted as is_deleted,\n        case \n            when disjunctive is null then null\n            when disjunctive then 'disjunctive'\n            else 'conjunctive' end as rule_logic,\n        handle,\n        published_scope,\n        rules,\n        sort_order,\n        title,\n        cast(\n    cast(cast(published_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as published_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["collection_id"], "time_spine": null}, "model.shopify_source.stg_shopify__collection_product": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__collection_product", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__collection_product.sql", "original_file_path": "models/stg_shopify__collection_product.sql", "unique_id": "model.shopify_source.stg_shopify__collection_product", "fqn": ["shopify_source", "stg_shopify__collection_product"], "alias": "stg_shopify__collection_product", "checksum": {"name": "sha256", "checksum": "33aa97b8e2e7827160f9fb2b3efe355c79abdecdd86f96720425c3726458f0e2"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table relating products to the collections they belong to. Use this instead of the deprecated `COLLECT` table.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "collection_id": {"name": "collection_id", "description": "ID referencing the `collection` the product belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "ID referencing the `product`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.011391, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__collection_product_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__collection_product_tmp')),\n                staging_columns=get_collection_product_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        collection_id,\n        product_id,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__collection_product_tmp", "package": null, "version": null}, {"name": "stg_shopify__collection_product_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_collection_product_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__collection_product_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__collection_product.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    collection_id\n    \n as \n    \n    collection_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        collection_id,\n        product_id,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["collection_id", "product_id"], "time_spine": null}, "model.shopify_source.stg_shopify__inventory_level": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__inventory_level", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__inventory_level.sql", "original_file_path": "models/stg_shopify__inventory_level.sql", "unique_id": "model.shopify_source.stg_shopify__inventory_level", "fqn": ["shopify_source", "stg_shopify__inventory_level"], "alias": "stg_shopify__inventory_level", "checksum": {"name": "sha256", "checksum": "76f7a4c26960cc6f2207b28168367e72cb9159f21f32f6b9cd1cdb28489cfe07"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "An inventory level represents the quantities of an inventory item for a location.\nEach inventory level belongs to one inventory item and has one location. For every location where an inventory item can be stocked, there's an inventory level that represents  the inventory item's quantities relating to that location.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "available_quantity": {"name": "available_quantity", "description": "(DEPRECATED 2025-01-06) The available quantity of an inventory item at the inventory level's associated location. Returns null if the inventory item is not tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_id": {"name": "inventory_item_id", "description": "The ID of the inventory item associated with the inventory level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_level_id": {"name": "inventory_level_id", "description": "The ID of the inventory level record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the location that the inventory level belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the inventory level was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "can_deactivate": {"name": "can_deactivate", "description": "Indicates whether the inventory item can be deactivated at the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the inventory level was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "deactivation_alert": {"name": "deactivation_alert", "description": "Provides an alert message when the inventory item is deactivated at the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0181792, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_level\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__inventory_level_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__inventory_level_tmp')),\n                staging_columns=get_inventory_level_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as inventory_level_id,\n        inventory_item_id,\n        location_id,\n        available as available_quantity, -- deprecated\n        can_deactivate,\n        deactivation_alert,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__inventory_level_tmp", "package": null, "version": null}, {"name": "stg_shopify__inventory_level_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_inventory_level_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__inventory_level_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__inventory_level.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_level_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    can_deactivate\n    \n as \n    \n    can_deactivate\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deactivation_alert\n    \n as \n    \n    deactivation_alert\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as integer) as \n    \n    available\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as inventory_level_id,\n        inventory_item_id,\n        location_id,\n        available as available_quantity, -- deprecated\n        can_deactivate,\n        deactivation_alert,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["inventory_item_id", "inventory_level_id", "location_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__media": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__media", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__media.sql", "original_file_path": "models/stg_shopify__media.sql", "unique_id": "model.shopify_source.stg_shopify__media", "fqn": ["shopify_source", "stg_shopify__media"], "alias": "stg_shopify__media", "checksum": {"name": "sha256", "checksum": "be5e1e1567e6c29ade27baabccefb3edab49a04595d58d04ac13f56ab2b22125"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing media metadata, including status and timestamps.", "columns": {"media_id": {"name": "media_id", "description": "The unique identifier for the media associated with a product image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the product image, indicating its availability or processing state.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the media was created. The API returns this value in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time when the media was last modified. The API returns this value in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.021821, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__media_tmp') }}\n),\n\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__media_tmp')),\n                staging_columns=get_media_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as media_id,\n        status,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__media_tmp", "package": null, "version": null}, {"name": "stg_shopify__media_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_media_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__media_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__media.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media_tmp\"\n),\n\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as media_id,\n        status,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["media_id"], "time_spine": null}, "model.shopify_source.stg_shopify__order_shipping_tax_line": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_shipping_tax_line", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order_shipping_tax_line.sql", "original_file_path": "models/stg_shopify__order_shipping_tax_line.sql", "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line", "fqn": ["shopify_source", "stg_shopify__order_shipping_tax_line"], "alias": "stg_shopify__order_shipping_tax_line", "checksum": {"name": "sha256", "checksum": "9901e96fa254e13cad86d18a8c959880ed2f8304ef2f1de3ba72a41f3a60aa0d"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Represents taxes associated with order shipping lines.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index (from 1) representing the order of shipping lines per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_shipping_line_id": {"name": "order_shipping_line_id", "description": "ID of the order shipping line this record is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The amount of tax, in shop currency, after discounts and before returns.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_set": {"name": "price_set", "description": "The amount of tax, in shop and presentment currencies, after discounts and before returns (JSON).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rate": {"name": "rate", "description": "The proportion of the line item price that the tax represents as a decimal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0272021, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__order_shipping_tax_line_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_shipping_tax_line_tmp')),\n                staging_columns=get_order_shipping_tax_line_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_shipping_line_id,\n        index,\n        price,\n        price_set,\n        rate,\n        title,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_shipping_tax_line_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_shipping_tax_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_shipping_tax_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__order_shipping_tax_line_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_shipping_tax_line.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_shipping_line_id\n    \n as \n    \n    order_shipping_line_id\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    price_set\n    \n as \n    \n    price_set\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_shipping_line_id,\n        index,\n        price,\n        price_set,\n        rate,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["index", "order_shipping_line_id"], "time_spine": null}, "model.shopify_source.stg_shopify__transaction": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__transaction", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__transaction.sql", "original_file_path": "models/stg_shopify__transaction.sql", "unique_id": "model.shopify_source.stg_shopify__transaction", "fqn": ["shopify_source", "stg_shopify__transaction"], "alias": "stg_shopify__transaction", "checksum": {"name": "sha256", "checksum": "b3cd2a471db1f1cd598c83afeca2c42f950abc7118e91cbbda3f9c41c925fe27"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a transaction in Shopify.", "columns": {"transaction_id": {"name": "transaction_id", "description": "The ID for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID for the order that the transaction is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_id": {"name": "refund_id", "description": "The ID associated with a refund in the refund table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount of money included in the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "authorization_code": {"name": "authorization_code", "description": "The authorization code associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the transaction was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when a transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "The ID for the device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gateway": {"name": "gateway", "description": "The name of the gateway the transaction was issued through.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_name": {"name": "source_name", "description": "The origin of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "message": {"name": "message", "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_id": {"name": "parent_id", "description": "The ID of an associated transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_avs_result_code": {"name": "payment_avs_result_code", "description": "The response code from the address verification system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_credit_card_bin": {"name": "payment_credit_card_bin", "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_cvv_result_code": {"name": "payment_cvv_result_code", "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_credit_card_number": {"name": "payment_credit_card_number", "description": "The customer's credit card number, with most of the leading digits redacted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_credit_card_company": {"name": "payment_credit_card_company", "description": "The name of the company that issued the customer's credit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "kind": {"name": "kind", "description": "The transaction's type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "receipt": {"name": "receipt", "description": "A transaction receipt attached to the transaction by the gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_id": {"name": "currency_exchange_id", "description": "The ID of the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_adjustment": {"name": "currency_exchange_adjustment", "description": "The difference between the amounts on the associated transaction and the parent transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_original_amount": {"name": "currency_exchange_original_amount", "description": "The amount of the parent transaction in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_final_amount": {"name": "currency_exchange_final_amount", "description": "The amount of the associated transaction in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_currency": {"name": "currency_exchange_currency", "description": "The shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_code": {"name": "error_code", "description": "A standardized error code, independent of the payment provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "test": {"name": "test", "description": "Whether the transaction is a test transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "authorization_expires_at": {"name": "authorization_expires_at", "description": "The date and time (ISO 8601 format) when the Shopify Payments authorization expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.006217, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__transaction\"", "raw_code": "with base as (\n\n    select * from {{ ref('stg_shopify__transaction_tmp') }}\n\n),\n\nfields as (\n\n    select\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__transaction_tmp')),\n                staging_columns=get_transaction_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as transaction_id,\n        order_id,\n        refund_id,\n        amount,\n        device_id,\n        gateway,\n        source_name,\n        message,\n        currency,\n        location_id,\n        parent_id,\n        payment_avs_result_code,\n        payment_credit_card_bin,\n        payment_cvv_result_code,\n        payment_credit_card_number,\n        payment_credit_card_company,\n        kind,\n        receipt,\n        currency_exchange_id,\n        currency_exchange_adjustment,\n        currency_exchange_original_amount,\n        currency_exchange_final_amount,\n        currency_exchange_currency,\n        error_code,\n        status,\n        user_id,\n        authorization_code,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(processed_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as processed_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(authorization_expires_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as authorization_expires_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('transaction_pass_through_columns') }}\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__transaction_tmp", "package": null, "version": null}, {"name": "stg_shopify__transaction_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_transaction_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.shopify_source.stg_shopify__transaction_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__transaction.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__transaction_tmp\"\n\n),\n\nfields as (\n\n    select\n\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    payment_avs_result_code\n    \n as \n    \n    payment_avs_result_code\n    \n, \n    \n    \n    payment_credit_card_bin\n    \n as \n    \n    payment_credit_card_bin\n    \n, \n    \n    \n    payment_cvv_result_code\n    \n as \n    \n    payment_cvv_result_code\n    \n, \n    \n    \n    payment_credit_card_number\n    \n as \n    \n    payment_credit_card_number\n    \n, \n    \n    \n    payment_credit_card_company\n    \n as \n    \n    payment_credit_card_company\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    receipt\n    \n as \n    \n    receipt\n    \n, \n    \n    \n    currency_exchange_id\n    \n as \n    \n    currency_exchange_id\n    \n, \n    \n    \n    currency_exchange_adjustment\n    \n as \n    \n    currency_exchange_adjustment\n    \n, \n    \n    \n    currency_exchange_original_amount\n    \n as \n    \n    currency_exchange_original_amount\n    \n, \n    \n    \n    currency_exchange_final_amount\n    \n as \n    \n    currency_exchange_final_amount\n    \n, \n    \n    \n    currency_exchange_currency\n    \n as \n    \n    currency_exchange_currency\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    test\n    \n as \n    \n    test\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as timestamp) as \n    \n    authorization_expires_at\n    \n , \n    \n    \n        \n            \n            \"authorization\"\n            \n        \n    \n as authorization_code \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as transaction_id,\n        order_id,\n        refund_id,\n        amount,\n        device_id,\n        gateway,\n        source_name,\n        message,\n        currency,\n        location_id,\n        parent_id,\n        payment_avs_result_code,\n        payment_credit_card_bin,\n        payment_cvv_result_code,\n        payment_credit_card_number,\n        payment_credit_card_company,\n        kind,\n        receipt,\n        currency_exchange_id,\n        currency_exchange_adjustment,\n        currency_exchange_original_amount,\n        currency_exchange_final_amount,\n        currency_exchange_currency,\n        error_code,\n        status,\n        user_id,\n        authorization_code,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(processed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as processed_timestamp,\n        cast(\n    cast(cast(authorization_expires_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as authorization_expires_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(test, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["source_relation", "transaction_id"], "time_spine": null}, "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__abandoned_checkout_shipping_line", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__abandoned_checkout_shipping_line.sql", "original_file_path": "models/stg_shopify__abandoned_checkout_shipping_line.sql", "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line", "fqn": ["shopify_source", "stg_shopify__abandoned_checkout_shipping_line"], "alias": "stg_shopify__abandoned_checkout_shipping_line", "checksum": {"name": "sha256", "checksum": "2249b71680563851e9100842b8fae99c4f9460f2177f53e6dc8d2b8f0b6f1f8c"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Shipping lines associated with abandoned checkouts.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "carrier_identifier": {"name": "carrier_identifier", "description": "A reference to the carrier service that provided the rate. Present when the rate was computed by a third-party carrier service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_id": {"name": "checkout_id", "description": "ID of the checkout that was abandoned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_code": {"name": "shipping_code", "description": "A reference to the shipping method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_category": {"name": "delivery_category", "description": "The general classification of the delivery method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_expectation_range": {"name": "delivery_expectation_range", "description": "Expected delivery date range.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_expectation_range_max": {"name": "delivery_expectation_range_max", "description": "Latest expected delivery date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_expectation_range_min": {"name": "delivery_expectation_range_min", "description": "Earliest possible expected delivery date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_expectation_type": {"name": "delivery_expectation_type", "description": "Type of expected delivery.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discounted_price": {"name": "discounted_price", "description": "The pre-tax shipping price with discounts applied in _presentment_ (customer) currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "abandoned_checkout_shipping_line_id": {"name": "abandoned_checkout_shipping_line_id", "description": "Unique ID of the abandoned checkout shipping line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index of the line amongst shipping lines for this checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The price of the shipping method in presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "requested_fulfillment_service_id": {"name": "requested_fulfillment_service_id", "description": "The fulfillment service requested for the shipping method. Present if the shipping method requires processing by a third party fulfillment service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "The channel where the checkout originated. Example value - shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The title of the shipping method. Example value - International Shipping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951351.037907, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"", "raw_code": "{{ config(enabled=var('shopify_using_abandoned_checkout', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__abandoned_checkout_shipping_line_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__abandoned_checkout_shipping_line_tmp')),\n                staging_columns=get_abandoned_checkout_shipping_line_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as abandoned_checkout_shipping_line_id,\n        checkout_id,\n        index,\n        carrier_identifier,\n        code as shipping_code,\n        delivery_category,\n        delivery_expectation_range,\n        delivery_expectation_range_max,\n        delivery_expectation_range_min,\n        delivery_expectation_type,\n        discounted_price,\n        phone,\n        price,\n        requested_fulfillment_service_id,\n        source,\n        title,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout_shipping_line_tmp", "package": null, "version": null}, {"name": "stg_shopify__abandoned_checkout_shipping_line_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_abandoned_checkout_shipping_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__abandoned_checkout_shipping_line.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    carrier_identifier\n    \n as \n    \n    carrier_identifier\n    \n, \n    \n    \n    checkout_id\n    \n as \n    \n    checkout_id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    delivery_category\n    \n as \n    \n    delivery_category\n    \n, \n    \n    \n    delivery_expectation_range\n    \n as \n    \n    delivery_expectation_range\n    \n, \n    \n    \n    delivery_expectation_range_max\n    \n as \n    \n    delivery_expectation_range_max\n    \n, \n    \n    \n    delivery_expectation_range_min\n    \n as \n    \n    delivery_expectation_range_min\n    \n, \n    \n    \n    delivery_expectation_type\n    \n as \n    \n    delivery_expectation_type\n    \n, \n    \n    \n    discounted_price\n    \n as \n    \n    discounted_price\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    requested_fulfillment_service_id\n    \n as \n    \n    requested_fulfillment_service_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as abandoned_checkout_shipping_line_id,\n        checkout_id,\n        index,\n        carrier_identifier,\n        code as shipping_code,\n        delivery_category,\n        delivery_expectation_range,\n        delivery_expectation_range_max,\n        delivery_expectation_range_min,\n        delivery_expectation_type,\n        discounted_price,\n        phone,\n        price,\n        requested_fulfillment_service_id,\n        source,\n        title,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["checkout_id", "index", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__order_adjustment": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_adjustment", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order_adjustment.sql", "original_file_path": "models/stg_shopify__order_adjustment.sql", "unique_id": "model.shopify_source.stg_shopify__order_adjustment", "fqn": ["shopify_source", "stg_shopify__order_adjustment"], "alias": "stg_shopify__order_adjustment", "checksum": {"name": "sha256", "checksum": "9f9a4654fedb090903b41a3681545cf207093e6f71992f2cf4d3bf32c177e65c"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents and adjustment to and order within Shopify.", "columns": {"order_adjustment_id": {"name": "order_adjustment_id", "description": "The unique numeric identifier for the order adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "Reference to the order which the adjustment is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_id": {"name": "refund_id", "description": "Reference to the refund which the adjustment is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Amount of the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_amount": {"name": "tax_amount", "description": "Tax amount applied to the order adjustment in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "kind": {"name": "kind", "description": "The kind of order adjustment (eg. refund, restock, etc.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "reason": {"name": "reason", "description": "The reason for the order adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set": {"name": "amount_set", "description": "Amount set towards the order adjustment in presentment and shop currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_amount_set": {"name": "tax_amount_set", "description": "Tax amount set towards the order adjustment in the shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.008547, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_adjustment\"", "raw_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__order_adjustment_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_adjustment_tmp')),\n                staging_columns=get_order_adjustment_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as order_adjustment_id,\n        order_id,\n        refund_id,\n        amount,\n        amount_set,\n        tax_amount,\n        tax_amount_set,\n        kind,\n        reason,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_adjustment_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_adjustment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_adjustment_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__order_adjustment_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_adjustment.sql", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_adjustment_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_set\n    \n as \n    \n    amount_set\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_amount_set\n    \n as \n    \n    tax_amount_set\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        id as order_adjustment_id,\n        order_id,\n        refund_id,\n        amount,\n        amount_set,\n        tax_amount,\n        tax_amount_set,\n        kind,\n        reason,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_adjustment_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__customer": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__customer", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__customer.sql", "original_file_path": "models/stg_shopify__customer.sql", "unique_id": "model.shopify_source.stg_shopify__customer", "fqn": ["shopify_source", "stg_shopify__customer"], "alias": "stg_shopify__customer", "checksum": {"name": "sha256", "checksum": "3e8007ecdfa35443e18d5886a2b27c18fc78f3bdb51b692ff97e86786c552f3b"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a customer in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_consent_state": {"name": "marketing_consent_state", "description": "Field indicating if the customer has consented to receive marketing material via email. Coalescing of the new `email_marketing_consent_state` field and the deprecated `accepts_marketing` field. Records with the old field will be marked with '(legacy)'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_opt_in_level": {"name": "marketing_opt_in_level", "description": "The marketing subscription opt-in level, as described in the M3AAWG Sender Best Common Practices, that the customer gave when they consented to receive marketing material by email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_consent_updated_at": {"name": "marketing_consent_updated_at", "description": "The date and time when the customer consented to receive marketing material by email. If no date is provided, then the date and time when the consent information was sent is used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the customer was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_address_id": {"name": "default_address_id", "description": "The default address for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_name": {"name": "first_name", "description": "The customer's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "A unique identifier for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_name": {"name": "last_name", "description": "The customer's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "orders_count": {"name": "orders_count", "description": "The number of orders associated with this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state": {"name": "account_state", "description": "The state of the customer's account with a shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_tax_exempt": {"name": "is_tax_exempt", "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_spent": {"name": "total_spent", "description": "The total amount of money that the customer has spent across their order history.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the customer information was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_verified_email": {"name": "is_verified_email", "description": "Whether the customer has verified their email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency that the customer used when they paid for their last order. Defaults to the shop currency. Returns the shop currency for test orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "A note about the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.980798, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__customer_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__customer_tmp')),\n                staging_columns=get_customer_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as customer_id,\n        lower(email) as email,\n        first_name,\n        last_name,\n        orders_count,\n        default_address_id,\n        phone,\n        lower(state) as account_state,\n        tax_exempt as is_tax_exempt,\n        total_spent,\n        verified_email as is_verified_email,\n        note,\n        currency,\n        case \n            when email_marketing_consent_state is null then\n                case \n                    when accepts_marketing is null then null\n                    when accepts_marketing then 'subscribed (legacy)' \n                    else 'not_subscribed (legacy)' end\n            else lower(email_marketing_consent_state) end as marketing_consent_state,\n        lower(coalesce(email_marketing_consent_opt_in_level, marketing_opt_in_level)) as marketing_opt_in_level,\n\n        {{ shopify_source.fivetran_convert_timezone(column='cast(coalesce(accepts_marketing_updated_at, email_marketing_consent_consent_updated_at) as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as marketing_consent_updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_timestamp,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n        \n        {{ fivetran_utils.fill_pass_through_columns('customer_pass_through_columns') }}\n\n    from fields\n    \n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__customer_tmp", "package": null, "version": null}, {"name": "stg_shopify__customer_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_customer_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.shopify_source.stg_shopify__customer_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__customer.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepts_marketing\n    \n as \n    \n    accepts_marketing\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    default_address_id\n    \n as \n    \n    default_address_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    orders_count\n    \n as \n    \n    orders_count\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    total_spent\n    \n as \n    \n    total_spent\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    verified_email\n    \n as \n    \n    verified_email\n    \n, \n    cast(null as timestamp) as \n    \n    email_marketing_consent_consent_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    email_marketing_consent_state\n    \n , \n    cast(null as TEXT) as \n    \n    note\n    \n , \n    cast(null as timestamp) as \n    \n    accepts_marketing_updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    marketing_opt_in_level\n    \n , \n    cast(null as TEXT) as \n    \n    currency\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        id as customer_id,\n        lower(email) as email,\n        first_name,\n        last_name,\n        orders_count,\n        default_address_id,\n        phone,\n        lower(state) as account_state,\n        tax_exempt as is_tax_exempt,\n        total_spent,\n        verified_email as is_verified_email,\n        note,\n        currency,\n        case \n            when email_marketing_consent_state is null then\n                case \n                    when accepts_marketing is null then null\n                    when accepts_marketing then 'subscribed (legacy)' \n                    else 'not_subscribed (legacy)' end\n            else lower(email_marketing_consent_state) end as marketing_consent_state,\n        lower(coalesce(email_marketing_consent_opt_in_level, marketing_opt_in_level)) as marketing_opt_in_level,\n\n        cast(\n    cast(cast(coalesce(accepts_marketing_updated_at, email_marketing_consent_consent_updated_at) as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as marketing_consent_updated_at,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_timestamp,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_timestamp,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n        \n\n\n\n\n\n    from fields\n    \n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__location": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__location", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__location.sql", "original_file_path": "models/stg_shopify__location.sql", "unique_id": "model.shopify_source.stg_shopify__location", "fqn": ["shopify_source", "stg_shopify__location"], "alias": "stg_shopify__location", "checksum": {"name": "sha256", "checksum": "72a0851105ecde3f3bb9e972c615c0fdd70759637019a359e0b54f38bfd3cc65"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A location represents a geographical location where your stores, pop-up stores, headquarters, and warehouses exist.", "columns": {"is_deleted": {"name": "is_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_active": {"name": "is_active", "description": "Boolean representing whether the location is active. If true, then the location can be used to sell products, stock inventory, and fulfill orders.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_1": {"name": "address_1", "description": "The location's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_2": {"name": "address_2", "description": "The optional second line of the location's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "city": {"name": "city", "description": "The city the location is in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "The country the location is in (two-letter code).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "The two-letter code (ISO 3166-1 alpha-2 format) corresponding to country the location is in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_name": {"name": "country_name", "description": "Full name of the location's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the location was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_legacy": {"name": "is_legacy", "description": "Boolean representing whether this is a fulfillment service location. If true, then the location is a fulfillment service location.  If false, then the location was created by the merchant and isn't tied to a fulfillment service.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "localized_country_name": {"name": "localized_country_name", "description": "The localized name of the location's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "localized_province_name": {"name": "localized_province_name", "description": "The localized name of the location's region. Typically a province, state, or district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The name of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The phone number of the location. This value can contain special characters, such as - or +.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province": {"name": "province", "description": "The province, state, or district of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province_code": {"name": "province_code", "description": "The province, state, or district code (ISO 3166-2 alpha-2 format) of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the location was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "zip": {"name": "zip", "description": "The zip or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0213509, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__location\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__location_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__location_tmp')),\n                staging_columns=get_location_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as location_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        active as is_active,\n        address_1,\n        address_2,\n        city,\n        country,\n        country_code,\n        country_name,\n        legacy as is_legacy,\n        localized_country_name,\n        localized_province_name,\n        phone,\n        province,\n        province_code,\n        zip,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__location_tmp", "package": null, "version": null}, {"name": "stg_shopify__location_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_location_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__location_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__location.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__location_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    legacy\n    \n as \n    \n    legacy\n    \n, \n    \n    \n    localized_country_name\n    \n as \n    \n    localized_country_name\n    \n, \n    \n    \n    localized_province_name\n    \n as \n    \n    localized_province_name\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as location_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        active as is_active,\n        address_1,\n        address_2,\n        city,\n        country,\n        country_code,\n        country_name,\n        legacy as is_legacy,\n        localized_country_name,\n        localized_province_name,\n        phone,\n        province,\n        province_code,\n        zip,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["location_id"], "time_spine": null}, "model.shopify_source.stg_shopify__media_image": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__media_image", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__media_image.sql", "original_file_path": "models/stg_shopify__media_image.sql", "unique_id": "model.shopify_source.stg_shopify__media_image", "fqn": ["shopify_source", "stg_shopify__media_image"], "alias": "stg_shopify__media_image", "checksum": {"name": "sha256", "checksum": "8eeba942a65f57c744a70ec79932794a1f6dd478449cac36c7928be22c6d9fd1"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing image-specific properties for media assets.", "columns": {"media_id": {"name": "media_id", "description": "The unique identifier for the media associated with the product image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_id": {"name": "image_id", "description": "Unique numeric identifier of the product image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_alt_text": {"name": "image_alt_text", "description": "A word or phrase to share the nature or contents of an image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_height": {"name": "image_height", "description": "Height dimension of the image which is determined on upload.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_width": {"name": "image_width", "description": "Width dimension of the image which is determined on upload.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_url": {"name": "image_url", "description": "Specifies the location of the product image, hashed for privacy. Coalesced with the deprecated `src` field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0228422, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media_image\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__media_image_tmp') }}\n),\n\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__media_image_tmp')),\n                staging_columns=get_media_image_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        media_id,\n        image_id,\n        image_alt_text,\n        image_height,\n        image_url,\n        image_width,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__media_image_tmp", "package": null, "version": null}, {"name": "stg_shopify__media_image_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_media_image_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__media_image_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__media_image.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media_image_tmp\"\n),\n\n\nfields as (\n\n    select\n        \n    \n    \n    media_id\n    \n as \n    \n    media_id\n    \n, \n    \n    \n    image_id\n    \n as \n    \n    image_id\n    \n, \n    \n    \n    image_alt_text\n    \n as \n    \n    image_alt_text\n    \n, \n    \n    \n    image_height\n    \n as \n    \n    image_height\n    \n, \n    \n    \n    image_url\n    \n as \n    \n    image_url\n    \n, \n    \n    \n    image_width\n    \n as \n    \n    image_width\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        media_id,\n        image_id,\n        image_alt_text,\n        image_height,\n        image_url,\n        image_width,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["image_id", "media_id"], "time_spine": null}, "model.shopify_source.stg_shopify__shop": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__shop", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__shop.sql", "original_file_path": "models/stg_shopify__shop.sql", "unique_id": "model.shopify_source.stg_shopify__shop", "fqn": ["shopify_source", "stg_shopify__shop"], "alias": "stg_shopify__shop", "checksum": {"name": "sha256", "checksum": "40f8c4f2b62a1b429cc766a3763a77eb2d473e4c2a6f3ab3e89d1f1a894c4100"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "The Shop resource is a collection of general business and store management settings and information about the store.", "columns": {"is_deleted": {"name": "is_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_1": {"name": "address_1", "description": "The shop's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_2": {"name": "address_2", "description": "The optional second line of the shop's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_checkout_api_supported": {"name": "has_checkout_api_supported", "description": "Boolean representing whether the shop is capable of accepting payments directly through the Checkout API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "city": {"name": "city", "description": "The shop's city.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cookie_consent_level": {"name": "cookie_consent_level", "description": "The cookie consent level defined on the shop's online store.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "The shop's country. In most cases, this value matches the country_code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "The two-letter country code corresponding to the shop's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_name": {"name": "country_name", "description": "The shop's normalized country name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_county_taxes": {"name": "has_county_taxes", "description": "Boolean representing whether the shop is applying taxes on a per-county basis. Only applicable to shops based in the US. Either `true` or `null` (not false, according to Shopify API docs).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601) when the shop was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the shop's default currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_email": {"name": "customer_email", "description": "The contact email used for communication between the shop owner and the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "domain": {"name": "domain", "description": "The shop's domain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_eligible_for_card_reader_giveaway": {"name": "is_eligible_for_card_reader_giveaway", "description": "Boolean representing whether the shop is eligible to receive a free credit card reader from Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_eligible_for_payments": {"name": "is_eligible_for_payments", "description": "Boolean representing whether the shop is eligible to use Shopify Payments.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The contact email used for communication between Shopify and the shop owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "enabled_presentment_currencies": {"name": "enabled_presentment_currencies", "description": "An array of of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify Admin.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "google_apps_domain": {"name": "google_apps_domain", "description": "The GSuite URL for the store, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_google_apps_login_enabled": {"name": "is_google_apps_login_enabled", "description": "Boolean representing whether the GSuite login is enabled. Shops with this feature will be able to log in through the GSuite login page. Valid values are `true` and `null`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_discounts": {"name": "has_discounts", "description": "Boolean representing whether any active discounts exist for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_gift_cards": {"name": "has_gift_cards", "description": "Boolean representing whether any active gift cards exist for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_storefront": {"name": "has_storefront", "description": "Boolean representing whether this shop has an online store.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "iana_timezone": {"name": "iana_timezone", "description": "The name of the timezone assigned by the [IANA](https://www.iana.org/time-zones).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shop_id": {"name": "shop_id", "description": "The ID for the shop. A 64-bit unsigned integer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latitude": {"name": "latitude", "description": "The latitude of the shop's location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "longitude": {"name": "longitude", "description": "The longitude of the shop's location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "money_format": {"name": "money_format", "description": "A string representing the way currency is formatted when the currency isn't specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "money_in_emails_format": {"name": "money_in_emails_format", "description": "A string representing the way currency is formatted in email notifications when the currency isn't specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "money_with_currency_format": {"name": "money_with_currency_format", "description": "A string representing the way currency is formatted when the currency is specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "money_with_currency_in_emails_format": {"name": "money_with_currency_in_emails_format", "description": "A string representing the way currency is formatted in email notifications when the currency is specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "myshopify_domain": {"name": "myshopify_domain", "description": "The shop's .myshopify.com domain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The name of the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_password_enabled": {"name": "is_password_enabled", "description": "Boolean representing whether the password protection page is enabled on the shop's online store.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The contact phone number for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "plan_display_name": {"name": "plan_display_name", "description": "The display name of the Shopify plan the shop is on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "plan_name": {"name": "plan_name", "description": "The name of the Shopify plan the shop is on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_pre_launch_enabled": {"name": "is_pre_launch_enabled", "description": "Boolean representing whether the pre-launch page is enabled on the shop's online store.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "primary_locale": {"name": "primary_locale", "description": "The shop's primary locale, as configured in the language settings of the shop's theme.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province": {"name": "province", "description": "The shop's normalized province or state name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province_code": {"name": "province_code", "description": "The two- or three-letter code for the shop's province or state.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_extra_payments_agreement_required": {"name": "is_extra_payments_agreement_required", "description": "Boolean representing whether the shop requires an extra Shopify Payments agreement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_setup_required": {"name": "is_setup_required", "description": "Boolean representing whether the shop has any outstanding setup steps.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shop_owner": {"name": "shop_owner", "description": "The username of the shop owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "The handle of the partner account that referred the merchant to Shopify, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_shipping_taxes": {"name": "has_shipping_taxes", "description": "Boolean representing whether taxes are charged for shipping. Valid values are true or false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_taxes_included_in_price": {"name": "has_taxes_included_in_price", "description": "Boolean representing whether applicable taxes are included in product prices. Valid values are true or null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "timezone": {"name": "timezone", "description": "The name of the timezone the shop is in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601) when the shop was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight_unit": {"name": "weight_unit", "description": "The default unit of weight measurement for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "zip": {"name": "zip", "description": "The shop's zip or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.034587, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__shop\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__shop_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__shop_tmp')),\n                staging_columns=get_shop_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as shop_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        address_1,\n        address_2,\n        city,\n        province,\n        province_code,\n        country,\n        country_code,\n        country_name,\n        zip,\n        latitude,\n        longitude,\n        case when county_taxes is null then false else county_taxes end as has_county_taxes,\n        currency,\n        enabled_presentment_currencies,\n        customer_email,\n        email,\n        domain,\n        phone,\n        timezone,\n        iana_timezone,\n        primary_locale,\n        weight_unit,\n        myshopify_domain,\n        cookie_consent_level,\n        shop_owner,\n        source,\n        tax_shipping as has_shipping_taxes,\n        case when taxes_included is null then false else taxes_included end as has_taxes_included_in_price,\n        has_discounts,\n        has_gift_cards,\n        has_storefront,\n        checkout_api_supported as has_checkout_api_supported,\n        eligible_for_card_reader_giveaway as is_eligible_for_card_reader_giveaway,\n        eligible_for_payments as is_eligible_for_payments,\n        google_apps_domain,\n        case when google_apps_login_enabled is null then false else google_apps_login_enabled end as is_google_apps_login_enabled,\n        money_format,\n        money_in_emails_format,\n        money_with_currency_format,\n        money_with_currency_in_emails_format,\n        plan_display_name,\n        plan_name,\n        password_enabled as is_password_enabled,\n        pre_launch_enabled as is_pre_launch_enabled,\n        requires_extra_payments_agreement as is_extra_payments_agreement_required,\n        setup_required as is_setup_required,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__shop_tmp", "package": null, "version": null}, {"name": "stg_shopify__shop_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_shop_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__shop_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__shop.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__shop_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    checkout_api_supported\n    \n as \n    \n    checkout_api_supported\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    cookie_consent_level\n    \n as \n    \n    cookie_consent_level\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    country_name\n    \n as \n    \n    country_name\n    \n, \n    \n    \n    county_taxes\n    \n as \n    \n    county_taxes\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_email\n    \n as \n    \n    customer_email\n    \n, \n    \n    \n    domain\n    \n as \n    \n    domain\n    \n, \n    \n    \n    eligible_for_card_reader_giveaway\n    \n as \n    \n    eligible_for_card_reader_giveaway\n    \n, \n    \n    \n    eligible_for_payments\n    \n as \n    \n    eligible_for_payments\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    enabled_presentment_currencies\n    \n as \n    \n    enabled_presentment_currencies\n    \n, \n    \n    \n    google_apps_domain\n    \n as \n    \n    google_apps_domain\n    \n, \n    \n    \n    google_apps_login_enabled\n    \n as \n    \n    google_apps_login_enabled\n    \n, \n    \n    \n    has_discounts\n    \n as \n    \n    has_discounts\n    \n, \n    \n    \n    has_gift_cards\n    \n as \n    \n    has_gift_cards\n    \n, \n    \n    \n    has_storefront\n    \n as \n    \n    has_storefront\n    \n, \n    \n    \n    iana_timezone\n    \n as \n    \n    iana_timezone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    money_format\n    \n as \n    \n    money_format\n    \n, \n    \n    \n    money_in_emails_format\n    \n as \n    \n    money_in_emails_format\n    \n, \n    \n    \n    money_with_currency_format\n    \n as \n    \n    money_with_currency_format\n    \n, \n    \n    \n    money_with_currency_in_emails_format\n    \n as \n    \n    money_with_currency_in_emails_format\n    \n, \n    \n    \n    myshopify_domain\n    \n as \n    \n    myshopify_domain\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    password_enabled\n    \n as \n    \n    password_enabled\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    plan_display_name\n    \n as \n    \n    plan_display_name\n    \n, \n    \n    \n    plan_name\n    \n as \n    \n    plan_name\n    \n, \n    \n    \n    pre_launch_enabled\n    \n as \n    \n    pre_launch_enabled\n    \n, \n    \n    \n    primary_locale\n    \n as \n    \n    primary_locale\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    province_code\n    \n as \n    \n    province_code\n    \n, \n    \n    \n    requires_extra_payments_agreement\n    \n as \n    \n    requires_extra_payments_agreement\n    \n, \n    \n    \n    setup_required\n    \n as \n    \n    setup_required\n    \n, \n    \n    \n    shop_owner\n    \n as \n    \n    shop_owner\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    tax_shipping\n    \n as \n    \n    tax_shipping\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    weight_unit\n    \n as \n    \n    weight_unit\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as shop_id,\n        name,\n        _fivetran_deleted as is_deleted,\n        address_1,\n        address_2,\n        city,\n        province,\n        province_code,\n        country,\n        country_code,\n        country_name,\n        zip,\n        latitude,\n        longitude,\n        case when county_taxes is null then false else county_taxes end as has_county_taxes,\n        currency,\n        enabled_presentment_currencies,\n        customer_email,\n        email,\n        domain,\n        phone,\n        timezone,\n        iana_timezone,\n        primary_locale,\n        weight_unit,\n        myshopify_domain,\n        cookie_consent_level,\n        shop_owner,\n        source,\n        tax_shipping as has_shipping_taxes,\n        case when taxes_included is null then false else taxes_included end as has_taxes_included_in_price,\n        has_discounts,\n        has_gift_cards,\n        has_storefront,\n        checkout_api_supported as has_checkout_api_supported,\n        eligible_for_card_reader_giveaway as is_eligible_for_card_reader_giveaway,\n        eligible_for_payments as is_eligible_for_payments,\n        google_apps_domain,\n        case when google_apps_login_enabled is null then false else google_apps_login_enabled end as is_google_apps_login_enabled,\n        money_format,\n        money_in_emails_format,\n        money_with_currency_format,\n        money_with_currency_in_emails_format,\n        plan_display_name,\n        plan_name,\n        password_enabled as is_password_enabled,\n        pre_launch_enabled as is_pre_launch_enabled,\n        requires_extra_payments_agreement as is_extra_payments_agreement_required,\n        setup_required as is_setup_required,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["shop_id"], "time_spine": null}, "model.shopify_source.stg_shopify__order_line_refund": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_line_refund", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order_line_refund.sql", "original_file_path": "models/stg_shopify__order_line_refund.sql", "unique_id": "model.shopify_source.stg_shopify__order_line_refund", "fqn": ["shopify_source", "stg_shopify__order_line_refund"], "alias": "stg_shopify__order_line_refund", "checksum": {"name": "sha256", "checksum": "41a80dea1f78e2e841a43d38181b4b4048c25a5c3e5175f05168e227808d5a06"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a line item from an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_refund_id": {"name": "order_line_refund_id", "description": "The unique identifier of the line item in the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "TThe unique identifier of the location where the items will be restockedBD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_id": {"name": "order_line_id", "description": "The ID of the related line item in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The quantity of the associated line item that was returned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_id": {"name": "refund_id", "description": "The ID of the related refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "restock_type": {"name": "restock_type", "description": "How this refund line item affects inventory levels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal": {"name": "subtotal", "description": "Subtotal amount of the order line refund in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax": {"name": "total_tax", "description": "The total tax applied to the refund in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_set": {"name": "subtotal_set", "description": "The subtotal of the refund line item in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax_set": {"name": "total_tax_set", "description": "The total tax of the line item in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.9828448, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"", "raw_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__order_line_refund_tmp') }}\n\n),\n\nfields as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_line_refund_tmp')),\n                staging_columns=get_order_line_refund_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as order_line_refund_id,\n        location_id,\n        order_line_id,\n        subtotal,\n        subtotal_set,\n        total_tax,\n        total_tax_set,\n        quantity,\n        refund_id,\n        restock_type,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n        {{ fivetran_utils.fill_pass_through_columns('order_line_refund_pass_through_columns') }}\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_line_refund_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_line_refund_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_line_refund_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.shopify_source.stg_shopify__order_line_refund_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_line_refund.sql", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund_tmp\"\n\n),\n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    order_line_id\n    \n as \n    \n    order_line_id\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    subtotal_set\n    \n as \n    \n    subtotal_set\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_tax_set\n    \n as \n    \n    total_tax_set\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    restock_type\n    \n as \n    \n    restock_type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        id as order_line_refund_id,\n        location_id,\n        order_line_id,\n        subtotal,\n        subtotal_set,\n        total_tax,\n        total_tax_set,\n        quantity,\n        refund_id,\n        restock_type,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_line_refund_id", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__order_discount_code": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_discount_code", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order_discount_code.sql", "original_file_path": "models/stg_shopify__order_discount_code.sql", "unique_id": "model.shopify_source.stg_shopify__order_discount_code", "fqn": ["shopify_source", "stg_shopify__order_discount_code"], "alias": "stg_shopify__order_discount_code", "checksum": {"name": "sha256", "checksum": "b7d94153528bb2f9bb331a599e695c5f56632d9cd621a038d8764341aa87635e"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Discount codes placed on orders.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount that's deducted from the order total.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "This property returns the discount code that was entered at checkout. Otherwise this property returns the title of the discount that was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "Associated order ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "The type of discount - `fixed_amount`, `percentage`, or `shipping`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Pairs with `order_id` to provide unique identifier for order discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.036496, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__order_discount_code_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_discount_code_tmp')),\n                staging_columns=get_order_discount_code_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        upper(code) as code,\n        type,\n        amount,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_discount_code_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_discount_code_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_discount_code_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__order_discount_code_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_discount_code.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        upper(code) as code,\n        type,\n        amount,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_id"], "time_spine": null}, "model.shopify_source.stg_shopify__product_variant_media": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product_variant_media", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__product_variant_media.sql", "original_file_path": "models/stg_shopify__product_variant_media.sql", "unique_id": "model.shopify_source.stg_shopify__product_variant_media", "fqn": ["shopify_source", "stg_shopify__product_variant_media"], "alias": "stg_shopify__product_variant_media", "checksum": {"name": "sha256", "checksum": "c9a6a9e3c9d764346f90eb9ee7ffeacb86c2b58095420b481c7912e0a6f61163"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table mapping products to their associated media.", "columns": {"product_variant_id": {"name": "product_variant_id", "description": "The id of the product variant associated with the media.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "media_id": {"name": "media_id", "description": "The unique identifier for the media asset linked to the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951351.029095, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_media\"", "raw_code": "{{ config(enabled=var('shopify_using_product_variant_media', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__product_variant_media_tmp') }}\n),\n\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__product_variant_media_tmp')),\n                staging_columns=get_product_variant_media_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select\n        product_variant_id,\n        media_id,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__product_variant_media_tmp", "package": null, "version": null}, {"name": "stg_shopify__product_variant_media_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_product_variant_media_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__product_variant_media_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__product_variant_media.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_media_tmp\"\n),\n\n\nfields as (\n\n    select\n        \n    \n    \n    product_variant_id\n    \n as \n    \n    product_variant_id\n    \n, \n    \n    \n    media_id\n    \n as \n    \n    media_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        product_variant_id,\n        media_id,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["media_id", "product_variant_id"], "time_spine": null}, "model.shopify_source.stg_shopify__order_tag": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_tag", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order_tag.sql", "original_file_path": "models/stg_shopify__order_tag.sql", "unique_id": "model.shopify_source.stg_shopify__order_tag", "fqn": ["shopify_source", "stg_shopify__order_tag"], "alias": "stg_shopify__order_tag", "checksum": {"name": "sha256", "checksum": "b89da512bcc4443685f63f4bcb4309a60c1d978cf87798cc19b99d4f4d95a934"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Tags that the shop owner has attached to the order.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index (starting from 1) representing when the tag was placed on the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "ID of the order being tagged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the tag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0276449, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_tag\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__order_tag_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_tag_tmp')),\n                staging_columns=get_order_tag_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        value,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_tag_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_tag_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__order_tag_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_tag.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        index,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["index", "order_id"], "time_spine": null}, "model.shopify_source.stg_shopify__inventory_quantity": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__inventory_quantity", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__inventory_quantity.sql", "original_file_path": "models/stg_shopify__inventory_quantity.sql", "unique_id": "model.shopify_source.stg_shopify__inventory_quantity", "fqn": ["shopify_source", "stg_shopify__inventory_quantity"], "alias": "stg_shopify__inventory_quantity", "checksum": {"name": "sha256", "checksum": "8f1a3a244a746d1b078aeb1bda2485ce72a7172d008c91943db89bd5a6757259"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "The total quantity of the inventory item available at all locations.", "columns": {"inventory_quantity_id": {"name": "inventory_quantity_id", "description": "The unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_id": {"name": "inventory_item_id", "description": "The ID of the inventory item associated with this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_level_id": {"name": "inventory_level_id", "description": "The ID of the inventory level where this item is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_state_name": {"name": "inventory_state_name", "description": "The name of the inventory state associated with the record. [Link to list of expected values](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps#inventory-states).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The quantity associated with the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The timestamp of the last update to the inventory record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0189261, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_quantity\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__inventory_quantity_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__inventory_quantity_tmp')),\n                staging_columns=get_inventory_quantity_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as inventory_quantity_id,\n        inventory_item_id,\n        inventory_level_id,\n        name as inventory_state_name,\n        quantity,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__inventory_quantity_tmp", "package": null, "version": null}, {"name": "stg_shopify__inventory_quantity_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_inventory_quantity_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__inventory_quantity_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__inventory_quantity.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_quantity_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    inventory_item_id\n    \n as \n    \n    inventory_item_id\n    \n, \n    \n    \n    inventory_level_id\n    \n as \n    \n    inventory_level_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as inventory_quantity_id,\n        inventory_item_id,\n        inventory_level_id,\n        name as inventory_state_name,\n        quantity,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["inventory_item_id", "inventory_level_id", "inventory_quantity_id", "inventory_state_name", "source_relation"], "time_spine": null}, "model.shopify_source.stg_shopify__abandoned_checkout": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__abandoned_checkout", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__abandoned_checkout.sql", "original_file_path": "models/stg_shopify__abandoned_checkout.sql", "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout", "fqn": ["shopify_source", "stg_shopify__abandoned_checkout"], "alias": "stg_shopify__abandoned_checkout", "checksum": {"name": "sha256", "checksum": "50e24769ed34e9f1c87814af32eb761b74ea05c76beef93f45b5ea37b4146741"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A checkout is considered abandoned after the customer has added contact information, but before the customer has completed their purchase.", "columns": {"is_deleted": {"name": "is_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "abandoned_checkout_url": {"name": "abandoned_checkout_url", "description": "The recovery URL that's sent to a customer so they can recover their checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_1": {"name": "billing_address_address_1", "description": "The street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_2": {"name": "billing_address_address_2", "description": "An optional additional field for the street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_city": {"name": "billing_address_city", "description": "The city of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_company": {"name": "billing_address_company", "description": "The company of the person associated with the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country": {"name": "billing_address_country", "description": "The name of the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country_code": {"name": "billing_address_country_code", "description": "The two-letter code (ISO 3166-1 alpha-2 format) for the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_first_name": {"name": "billing_address_first_name", "description": "The first name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_last_name": {"name": "billing_address_last_name", "description": "The last name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_latitude": {"name": "billing_address_latitude", "description": "The latitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_longitude": {"name": "billing_address_longitude", "description": "The longitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_name": {"name": "billing_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_phone": {"name": "billing_address_phone", "description": "The phone number at the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province": {"name": "billing_address_province", "description": "The name of the state or province of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province_code": {"name": "billing_address_province_code", "description": "The two-letter abbreviation of the state or province of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_zip": {"name": "billing_address_zip", "description": "The zip or postal code of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_buyer_accepted_marketing": {"name": "has_buyer_accepted_marketing", "description": "Whether the customer would like to receive email updates from the shop. This is set by the 'I want to receive occasional emails about new products, promotions and other news' checkbox during checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cart_token": {"name": "cart_token", "description": "The ID for the cart that's attached to the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "closed_at": {"name": "closed_at", "description": "The date and time (ISO 8601 format) when the checkout was closed. If the checkout was not closed, then this value is null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the checkout was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shop_currency": {"name": "shop_currency", "description": "The three-letter code (ISO 4217 format) of the shop's default currency at the time of checkout. For the currency that the customer used at checkout, see `presentment_currency`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "ID of the customer with the abandoned checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_locale": {"name": "customer_locale", "description": "The two or three-letter language code, optionally followed by a region modifier. Example values - en, en-CA.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "The ID of the Shopify POS device that created the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The customer's email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gateway": {"name": "gateway", "description": "The payment gateway used by the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_id": {"name": "checkout_id", "description": "The ID for the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "landing_site_base_url": {"name": "landing_site_base_url", "description": "The URL for the page where the customer entered the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the checkout was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Checkout order number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "The text of an optional note that a shop owner can attach to the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The customer's phone number for receiving SMS notifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "presentment_currency": {"name": "presentment_currency", "description": "The three-letter code (ISO 4217 format) of the currency that the customer used at checkout. For the shop's default currency, see `currency`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "referring_site": {"name": "referring_site", "description": "The website that referred the customer to the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_1": {"name": "shipping_address_address_1", "description": "The street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_2": {"name": "shipping_address_address_2", "description": "An optional additional field for the street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_city": {"name": "shipping_address_city", "description": "The city of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_company": {"name": "shipping_address_company", "description": "The company of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country": {"name": "shipping_address_country", "description": "The name of the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "The two-letter code (ISO 3166-1 alpha-2 format) for the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_first_name": {"name": "shipping_address_first_name", "description": "The first name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_last_name": {"name": "shipping_address_last_name", "description": "The last name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_latitude": {"name": "shipping_address_latitude", "description": "The latitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_longitude": {"name": "shipping_address_longitude", "description": "The longitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_name": {"name": "shipping_address_name", "description": "The full name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province": {"name": "shipping_address_province", "description": "The name of the state or province of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province_code": {"name": "shipping_address_province_code", "description": "The two-letter abbreviation of the state or province of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_zip": {"name": "shipping_address_zip", "description": "The zip or postal code of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_name": {"name": "source_name", "description": "Where the checkout originated. Valid values include `web`, `pos`, `iphone`, `android`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_price": {"name": "subtotal_price", "description": "The price of the checkout in _presentment_ (customer) currency before shipping and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_taxes_included": {"name": "has_taxes_included", "description": "Boolean representing whether taxes are included in the price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "token": {"name": "token", "description": "A unique ID for a checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discounts": {"name": "total_discounts", "description": "The total amount of discounts to be applied in presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_duties": {"name": "total_duties", "description": "The total duties of the checkout in presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of the prices of all line items in the checkout in _presentment_ (customer) currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price": {"name": "total_price", "description": "The sum of line item prices, all discounts, shipping costs, and taxes for the checkout in _presentment_ (customer) currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax": {"name": "total_tax", "description": "The sum of all the taxes applied to the checkout in _presentment_ (customer) currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_weight": {"name": "total_weight", "description": "The sum of all the weights in grams of the line items in the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the checkout was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID of the user who created the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951351.010884, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"", "raw_code": "{{ config(enabled=var('shopify_using_abandoned_checkout', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_shopify__abandoned_checkout_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__abandoned_checkout_tmp')),\n                staging_columns=get_abandoned_checkout_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted as is_deleted,\n        abandoned_checkout_url,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        cart_token,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(closed_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as closed_at,\n        currency as shop_currency,\n        customer_id,\n        customer_locale,\n        device_id,\n        email,\n        gateway,\n        id as checkout_id,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        phone,\n        presentment_currency,\n        referring_site,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        token,\n        total_discounts,\n        total_duties,\n        total_line_items_price,\n        total_price,\n        total_tax,\n        total_weight,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        user_id,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout_tmp", "package": null, "version": null}, {"name": "stg_shopify__abandoned_checkout_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_abandoned_checkout_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__abandoned_checkout.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    abandoned_checkout_url\n    \n as \n    \n    abandoned_checkout_url\n    \n, \n    \n    \n    billing_address_address_1\n    \n as \n    \n    billing_address_address_1\n    \n, \n    cast(null as TEXT) as \n    \n    billing_address_address_2\n    \n , \n    \n    \n    billing_address_city\n    \n as \n    \n    billing_address_city\n    \n, \n    \n    \n    billing_address_company\n    \n as \n    \n    billing_address_company\n    \n, \n    \n    \n    billing_address_country\n    \n as \n    \n    billing_address_country\n    \n, \n    \n    \n    billing_address_country_code\n    \n as \n    \n    billing_address_country_code\n    \n, \n    \n    \n    billing_address_first_name\n    \n as \n    \n    billing_address_first_name\n    \n, \n    \n    \n    billing_address_last_name\n    \n as \n    \n    billing_address_last_name\n    \n, \n    \n    \n    billing_address_latitude\n    \n as \n    \n    billing_address_latitude\n    \n, \n    \n    \n    billing_address_longitude\n    \n as \n    \n    billing_address_longitude\n    \n, \n    \n    \n    billing_address_name\n    \n as \n    \n    billing_address_name\n    \n, \n    \n    \n    billing_address_phone\n    \n as \n    \n    billing_address_phone\n    \n, \n    \n    \n    billing_address_province\n    \n as \n    \n    billing_address_province\n    \n, \n    \n    \n    billing_address_province_code\n    \n as \n    \n    billing_address_province_code\n    \n, \n    \n    \n    billing_address_zip\n    \n as \n    \n    billing_address_zip\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    \n    \n    cart_token\n    \n as \n    \n    cart_token\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_locale\n    \n as \n    \n    customer_locale\n    \n, \n    \n    \n    device_id\n    \n as \n    \n    device_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    gateway\n    \n as \n    \n    gateway\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    landing_site_base_url\n    \n as \n    \n    landing_site_base_url\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    presentment_currency\n    \n as \n    \n    presentment_currency\n    \n, \n    \n    \n    referring_site\n    \n as \n    \n    referring_site\n    \n, \n    \n    \n    shipping_address_address_1\n    \n as \n    \n    shipping_address_address_1\n    \n, \n    cast(null as TEXT) as \n    \n    shipping_address_address_2\n    \n , \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_company\n    \n as \n    \n    shipping_address_company\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_country_code\n    \n as \n    \n    shipping_address_country_code\n    \n, \n    \n    \n    shipping_address_first_name\n    \n as \n    \n    shipping_address_first_name\n    \n, \n    \n    \n    shipping_address_last_name\n    \n as \n    \n    shipping_address_last_name\n    \n, \n    \n    \n    shipping_address_latitude\n    \n as \n    \n    shipping_address_latitude\n    \n, \n    \n    \n    shipping_address_longitude\n    \n as \n    \n    shipping_address_longitude\n    \n, \n    \n    \n    shipping_address_name\n    \n as \n    \n    shipping_address_name\n    \n, \n    \n    \n    shipping_address_phone\n    \n as \n    \n    shipping_address_phone\n    \n, \n    \n    \n    shipping_address_province\n    \n as \n    \n    shipping_address_province\n    \n, \n    \n    \n    shipping_address_province_code\n    \n as \n    \n    shipping_address_province_code\n    \n, \n    \n    \n    shipping_address_zip\n    \n as \n    \n    shipping_address_zip\n    \n, \n    \n    \n    source_name\n    \n as \n    \n    source_name\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_duties\n    \n as \n    \n    total_duties\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_weight\n    \n as \n    \n    total_weight\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_deleted as is_deleted,\n        abandoned_checkout_url,\n        billing_address_address_1,\n        billing_address_address_2,\n        billing_address_city,\n        billing_address_company,\n        billing_address_country,\n        billing_address_country_code,\n        billing_address_first_name,\n        billing_address_last_name,\n        billing_address_latitude,\n        billing_address_longitude,\n        billing_address_name,\n        billing_address_phone,\n        billing_address_province,\n        billing_address_province_code,\n        billing_address_zip,\n        buyer_accepts_marketing as has_buyer_accepted_marketing,\n        cart_token,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(closed_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as closed_at,\n        currency as shop_currency,\n        customer_id,\n        customer_locale,\n        device_id,\n        email,\n        gateway,\n        id as checkout_id,\n        landing_site_base_url,\n        location_id,\n        name,\n        note,\n        phone,\n        presentment_currency,\n        referring_site,\n        shipping_address_address_1,\n        shipping_address_address_2,\n        shipping_address_city,\n        shipping_address_company,\n        shipping_address_country,\n        shipping_address_country_code,\n        shipping_address_first_name,\n        shipping_address_last_name,\n        shipping_address_latitude,\n        shipping_address_longitude,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_address_province,\n        shipping_address_province_code,\n        shipping_address_zip,\n        source_name,\n        subtotal_price,\n        taxes_included as has_taxes_included,\n        token,\n        total_discounts,\n        total_duties,\n        total_line_items_price,\n        total_price,\n        total_tax,\n        total_weight,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        user_id,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["checkout_id"], "time_spine": null}, "model.shopify_source.stg_shopify__discount_redeem_code": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_redeem_code", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__discount_redeem_code.sql", "original_file_path": "models/stg_shopify__discount_redeem_code.sql", "unique_id": "model.shopify_source.stg_shopify__discount_redeem_code", "fqn": ["shopify_source", "stg_shopify__discount_redeem_code"], "alias": "stg_shopify__discount_redeem_code", "checksum": {"name": "sha256", "checksum": "ed2797a0f3e8d6b1292802d4c962a8c45aa6049297527bd3b58b3175e4ae1762"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing individual redeem codes that customers can use at checkout to receive a discount. Each redeem code is tied to a parent discount and may be created by an app or manually.", "columns": {"discount_code_id": {"name": "discount_code_id", "description": "The unique ID of the redeem code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "async_usage_count": {"name": "async_usage_count", "description": "The number of times that the redeem code has been used. This is updated asynchronously and may differ from real-time usage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "The redeemable code that a customer can enter at checkout (e.g., `SUMMER20`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_by_description": {"name": "created_by_description", "description": "A descriptive label of the app or user who created the redeem code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_by_id": {"name": "created_by_id", "description": "The internal ID of the app or user that created the redeem code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_by_title": {"name": "created_by_title", "description": "The name or title of the creator of the redeem code (typically an app name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_id": {"name": "discount_id", "description": "The unique ID of the parent discount associated with this redeem code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_type": {"name": "discount_type", "description": "The type of discount the redeem code is associated with (e.g., `discount_code_basic`, `discount_code_app`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.084436, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__discount_redeem_code_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__discount_redeem_code_tmp')),\n                staging_columns=get_discount_redeem_code_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        async_usage_count,\n        code,\n        created_by_description,\n        created_by_id,\n        created_by_title,\n        discount_id,\n        discount_type,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__discount_redeem_code_tmp", "package": null, "version": null}, {"name": "stg_shopify__discount_redeem_code_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_discount_redeem_code_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.shopify_source.stg_shopify__discount_redeem_code_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__discount_redeem_code.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    async_usage_count\n    \n as \n    \n    async_usage_count\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    created_by_description\n    \n as \n    \n    created_by_description\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_by_title\n    \n as \n    \n    created_by_title\n    \n, \n    \n    \n    discount_id\n    \n as \n    \n    discount_id\n    \n, \n    \n    \n    discount_type\n    \n as \n    \n    discount_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        async_usage_count,\n        code,\n        created_by_description,\n        created_by_id,\n        created_by_title,\n        discount_id,\n        discount_type,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["discount_code_id"], "time_spine": null}, "model.shopify_source.stg_shopify__order_url_tag": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_url_tag", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__order_url_tag.sql", "original_file_path": "models/stg_shopify__order_url_tag.sql", "unique_id": "model.shopify_source.stg_shopify__order_url_tag", "fqn": ["shopify_source", "stg_shopify__order_url_tag"], "alias": "stg_shopify__order_url_tag", "checksum": {"name": "sha256", "checksum": "0475883fe6c9a0cd351b16a0640b4e5f1a9b1530d784c245588c8fa148a4d5a4"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Key-value tags that the shop owner has attached to the order url.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "key": {"name": "key", "description": "Key of the tag pair.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "ID of the order url being tagged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the tag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.02806, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_url_tag\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__order_url_tag_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__order_url_tag_tmp')),\n                staging_columns=get_order_url_tag_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        key,\n        value,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_url_tag_tmp", "package": null, "version": null}, {"name": "stg_shopify__order_url_tag_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_order_url_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__order_url_tag_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__order_url_tag.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_url_tag_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        order_id,\n        key,\n        value,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n        \n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["key", "order_id"], "time_spine": null}, "model.shopify_source.stg_shopify__fulfillment": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__fulfillment", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__fulfillment.sql", "original_file_path": "models/stg_shopify__fulfillment.sql", "unique_id": "model.shopify_source.stg_shopify__fulfillment", "fqn": ["shopify_source", "stg_shopify__fulfillment"], "alias": "stg_shopify__fulfillment", "checksum": {"name": "sha256", "checksum": "98224ac48f62eb5f7c693678d67e80eea20df836fb90999c6477e19c56712325"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A fulfillment order represents a group of one or more items in an order that will be fulfilled from the same location.  A fulfillment represents work that is completed as part of a fulfillment order and can include one or more items.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the fulfillment was created. The API returns this value in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_id": {"name": "fulfillment_id", "description": "The ID for the fulfillment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The unique identifier of the location that the fulfillment was processed at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The uniquely identifying fulfillment name, consisting of two parts separated by a .. The first part represents the order name and the second part represents the fulfillment number.  The fulfillment number automatically increments depending on how many fulfillments are in an order (e.g. #1001.1, #1001.2).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The unique numeric identifier for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "service": {"name": "service", "description": "The fulfillment service associated with the fulfillment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipment_status": {"name": "shipment_status", "description": "The current shipment status of the fulfillment. Valid values include: - label_printed: A label for the shipment was purchased and printed. - label_purchased: A label for the shipment was purchased, but not printed. - attempted_delivery: Delivery of the shipment was attempted, but unable to be completed. - ready_for_pickup: The shipment is ready for pickup at a shipping depot. - confirmed: The carrier is aware of the shipment, but hasn't received it yet. - in_transit: The shipment is being transported between shipping facilities on the way to its destination. - out_for_delivery: The shipment is being delivered to its final destination. - delivered: The shipment was successfully delivered. - failure: Something went wrong when pulling tracking information for the shipment, such as the tracking number was invalid or the shipment was canceled.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the fulfillment. Valid values include: - pending: Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to 'open' or 'success'. - open: The fulfillment has been acknowledged by the service and is in processing. - success: The fulfillment was successful. - cancelled: The fulfillment was cancelled. - error: There was an error with the fulfillment request. - failure: The fulfillment request failed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_company": {"name": "tracking_company", "description": "The name of the tracking company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_number": {"name": "tracking_number", "description": "Primary tracking number for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_numbers": {"name": "tracking_numbers", "description": "A list of tracking numbers, provided by the shipping company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_urls": {"name": "tracking_urls", "description": "The URLs of tracking pages for the fulfillment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the fulfillment was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.0143611, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__fulfillment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__fulfillment_tmp')),\n                staging_columns=get_fulfillment_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_id,\n        location_id,\n        order_id,\n        name,\n        service,\n        shipment_status,\n        lower(status) as status,\n        tracking_company,\n        tracking_number,\n        tracking_numbers,\n        tracking_urls,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(_fivetran_synced as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', \"UTC\"), source_tz=\"UTC\") }} as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__fulfillment_tmp", "package": null, "version": null}, {"name": "stg_shopify__fulfillment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_fulfillment_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__fulfillment_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__fulfillment.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location_id\n    \n as \n    \n    location_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    service\n    \n as \n    \n    service\n    \n, \n    \n    \n    shipment_status\n    \n as \n    \n    shipment_status\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tracking_company\n    \n as \n    \n    tracking_company\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    tracking_numbers\n    \n as \n    \n    tracking_numbers\n    \n, \n    \n    \n    tracking_urls\n    \n as \n    \n    tracking_urls\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as fulfillment_id,\n        location_id,\n        order_id,\n        name,\n        service,\n        shipment_status,\n        lower(status) as status,\n        tracking_company,\n        tracking_number,\n        tracking_numbers,\n        tracking_urls,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(_fivetran_synced as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as _fivetran_synced,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["fulfillment_id"], "time_spine": null}, "model.shopify_source.stg_shopify__discount_code_free_shipping": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_code_free_shipping", "resource_type": "model", "package_name": "shopify_source", "path": "stg_shopify__discount_code_free_shipping.sql", "original_file_path": "models/stg_shopify__discount_code_free_shipping.sql", "unique_id": "model.shopify_source.stg_shopify__discount_code_free_shipping", "fqn": ["shopify_source", "stg_shopify__discount_code_free_shipping"], "alias": "stg_shopify__discount_code_free_shipping", "checksum": {"name": "sha256", "checksum": "4804693d5537bcdd5ad21a24fa943c5ca5319552bc2fe0b5edf77e17a8ffb12e"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Table storing metadata for free shipping discount codes in Shopify, where shipping costs are discounted based on qualifying conditions.", "columns": {"discount_code_id": {"name": "discount_code_id", "description": "The unique ID for the discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The display name for the discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the discount code (e.g., `enabled`, `disabled`, `expired`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_once_per_customer": {"name": "applies_once_per_customer", "description": "Boolean representing whether the discount code is limited to one use per customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_limit": {"name": "usage_limit", "description": "The total number of times the discount code can be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_count": {"name": "usage_count", "description": "The number of times the discount code has been used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count": {"name": "codes_count", "description": "The total number of redeemable codes generated for this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_precision": {"name": "codes_precision", "description": "Indicates the precision or type of generated codes (e.g., exact vs. bulk).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_order_discounts": {"name": "combines_with_order_discounts", "description": "Whether this discount can be combined with other order-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_product_discounts": {"name": "combines_with_product_discounts", "description": "Whether this discount can be combined with product-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_shipping_discounts": {"name": "combines_with_shipping_discounts", "description": "Whether this discount can be combined with shipping discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_selection_all_customers": {"name": "customer_selection_all_customers", "description": "Boolean indicating whether the discount is available to all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "recurring_cycle_limit": {"name": "recurring_cycle_limit", "description": "The number of billing cycles this discount applies to (for subscription products).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_amount": {"name": "total_sales_amount", "description": "The total sales amount that resulted from the usage of this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_currency_code": {"name": "total_sales_currency_code", "description": "The currency code associated with `total_sales_amount`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the discount code was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the discount code was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starts_at": {"name": "starts_at", "description": "The date and time (ISO 8601 format) when the discount code becomes active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ends_at": {"name": "ends_at", "description": "The date and time (ISO 8601 format) when the discount code expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify_source://models/stg_shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.083461, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_shopify__discount_code_free_shipping_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_shopify__discount_code_free_shipping_tmp')),\n                staging_columns=get_discount_code_free_shipping_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='shopify_union_schemas', \n            union_database_variable='shopify_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        title,\n        status,\n        applies_once_per_customer,\n        usage_limit,\n        async_usage_count as usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        customer_selection_all_customers,\n        recurring_cycle_limit,\n        total_sales_amount,\n        total_sales_currency_code,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(created_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as created_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(updated_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as updated_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(starts_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as starts_at,\n        {{ shopify_source.fivetran_convert_timezone(column='cast(ends_at as ' ~ dbt.type_timestamp() ~ ')', target_tz=var('shopify_timezone', 'UTC'), source_tz='UTC') }} as ends_at,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_free_shipping_tmp", "package": null, "version": null}, {"name": "stg_shopify__discount_code_free_shipping_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.get_discount_code_free_shipping_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.shopify_source.fivetran_convert_timezone"], "nodes": ["model.shopify_source.stg_shopify__discount_code_free_shipping_tmp"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify__discount_code_free_shipping.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping_tmp\"\n),\n\nfields as (\n\n    select\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    recurring_cycle_limit\n    \n as \n    \n    recurring_cycle_limit\n    \n, \n    \n    \n    applies_once_per_customer\n    \n as \n    \n    applies_once_per_customer\n    \n, \n    \n    \n    async_usage_count\n    \n as \n    \n    async_usage_count\n    \n, \n    \n    \n    usage_limit\n    \n as \n    \n    usage_limit\n    \n, \n    \n    \n    codes_count\n    \n as \n    \n    codes_count\n    \n, \n    \n    \n    codes_precision\n    \n as \n    \n    codes_precision\n    \n, \n    \n    \n    combines_with_order_discounts\n    \n as \n    \n    combines_with_order_discounts\n    \n, \n    \n    \n    combines_with_product_discounts\n    \n as \n    \n    combines_with_product_discounts\n    \n, \n    \n    \n    combines_with_shipping_discounts\n    \n as \n    \n    combines_with_shipping_discounts\n    \n, \n    \n    \n    customer_selection_all_customers\n    \n as \n    \n    customer_selection_all_customers\n    \n, \n    \n    \n    total_sales_amount\n    \n as \n    \n    total_sales_amount\n    \n, \n    \n    \n    total_sales_currency_code\n    \n as \n    \n    total_sales_currency_code\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_code_id,\n        title,\n        status,\n        applies_once_per_customer,\n        usage_limit,\n        async_usage_count as usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        customer_selection_all_customers,\n        recurring_cycle_limit,\n        total_sales_amount,\n        total_sales_currency_code,\n        cast(\n    cast(cast(created_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as created_at,\n        cast(\n    cast(cast(updated_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as updated_at,\n        cast(\n    cast(cast(starts_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as starts_at,\n        cast(\n    cast(cast(ends_at as timestamp) as timestamp)\n        at time zone 'UTC' at time zone 'UTC' as timestamp\n) as ends_at,\n        source_relation\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["discount_code_id"], "time_spine": null}, "model.shopify_source.stg_shopify__order_shipping_line_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_shipping_line_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_shipping_line_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_shipping_line_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_shipping_line_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_shipping_line_tmp"], "alias": "stg_shopify__order_shipping_line_tmp", "checksum": {"name": "sha256", "checksum": "c3f678ea135c8bc8de40cd53d49e5b26d01758a1419ad1a869e37a4b7e29b566"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.455791, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='order_shipping_line', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_shipping_line_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order_shipping_line"], ["shopify", "order_shipping_line"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order_shipping_line"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_shipping_line_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_shipping_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__discount_redeem_code_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_redeem_code_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__discount_redeem_code_tmp.sql", "original_file_path": "models/tmp/stg_shopify__discount_redeem_code_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__discount_redeem_code_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__discount_redeem_code_tmp"], "alias": "stg_shopify__discount_redeem_code_tmp", "checksum": {"name": "sha256", "checksum": "989653672289195365934f27b35afa4a9fbd99a0f5a07a1680f25dc3a16a3ddb"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.474373, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='discount_redeem_code', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='discount_redeem_code_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "discount_redeem_code"], ["shopify", "discount_redeem_code"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.discount_redeem_code"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__discount_redeem_code_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_redeem_code_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__customer_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__customer_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__customer_tmp.sql", "original_file_path": "models/tmp/stg_shopify__customer_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__customer_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__customer_tmp"], "alias": "stg_shopify__customer_tmp", "checksum": {"name": "sha256", "checksum": "e7c2249d0010e549e9ce39452878c185bdd2576af58f74d7cbde93ed400308a4"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.477969, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='customer', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='customer_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "customer"], ["shopify", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.customer"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__customer_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_customer_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__discount_code_free_shipping_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_code_free_shipping_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__discount_code_free_shipping_tmp.sql", "original_file_path": "models/tmp/stg_shopify__discount_code_free_shipping_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__discount_code_free_shipping_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__discount_code_free_shipping_tmp"], "alias": "stg_shopify__discount_code_free_shipping_tmp", "checksum": {"name": "sha256", "checksum": "ccd80aae868ee6271bfcca95d6ab3d838e75ee3e7a232dc0a76e6e231c923461"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.4812381, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='discount_code_free_shipping', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='discount_code_free_shipping_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "discount_code_free_shipping"], ["shopify", "discount_code_free_shipping"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.discount_code_free_shipping"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__discount_code_free_shipping_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_free_shipping_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__discount_application_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_application_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__discount_application_tmp.sql", "original_file_path": "models/tmp/stg_shopify__discount_application_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__discount_application_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__discount_application_tmp"], "alias": "stg_shopify__discount_application_tmp", "checksum": {"name": "sha256", "checksum": "d19f5a421f9ff5f619cbef04b22b2381da2e6f1c869195efa873b831bbb08350"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.4849422, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='discount_application', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='discount_application_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "discount_application"], ["shopify", "discount_application"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.discount_application"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__discount_application_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_application_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__order_note_attribute_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_note_attribute_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_note_attribute_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_note_attribute_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_note_attribute_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_note_attribute_tmp"], "alias": "stg_shopify__order_note_attribute_tmp", "checksum": {"name": "sha256", "checksum": "71e5541b35e919adc7979db9cea6a4d5c3622c6d6059e776828ecddf851c94c0"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.490237, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_note_attribute_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='order_note_attribute', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_note_attribute_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order_note_attribute"], ["shopify", "order_note_attribute"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order_note_attribute"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_note_attribute_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_note_attribute_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__product_variant_media_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product_variant_media_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__product_variant_media_tmp.sql", "original_file_path": "models/tmp/stg_shopify__product_variant_media_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__product_variant_media_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__product_variant_media_tmp"], "alias": "stg_shopify__product_variant_media_tmp", "checksum": {"name": "sha256", "checksum": "e7d0e8236fd31f9fd5c3d089af4e6286d2d3c205225500477c1bd80de50ef7b4"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951350.494338, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_media_tmp\"", "raw_code": "{{ config(enabled=var('shopify_using_product_variant_media', False)) }}\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='product_variant_media', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_variant_media_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "product_variant_media"], ["shopify", "product_variant_media"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.product_variant_media"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__product_variant_media_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_product_variant_media_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__order_line_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_line_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_line_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_line_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_line_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_line_tmp"], "alias": "stg_shopify__order_line_tmp", "checksum": {"name": "sha256", "checksum": "14f8c710a86047e9c3bc755231b78a14fb81f0034dc10a87c8928da6f9325b79"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.4986198, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_tmp\"", "raw_code": "{{\n   shopify_source.shopify_union_data(\n        table_identifier='order_line', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_line_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order_line"], ["shopify", "order_line"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order_line"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_line_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_shipping_tax_line_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_shipping_tax_line_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_shipping_tax_line_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_shipping_tax_line_tmp"], "alias": "stg_shopify__order_shipping_tax_line_tmp", "checksum": {"name": "sha256", "checksum": "e6bbf0d3747b89566e9265edd0ac4c1bb442b79b23e6be1e3ee365f48741aeac"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.502389, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='order_shipping_tax_line', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_shipping_tax_line_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order_shipping_tax_line"], ["shopify", "order_shipping_tax_line"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order_shipping_tax_line"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_shipping_tax_line_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_shipping_tax_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__inventory_quantity_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__inventory_quantity_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__inventory_quantity_tmp.sql", "original_file_path": "models/tmp/stg_shopify__inventory_quantity_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__inventory_quantity_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__inventory_quantity_tmp"], "alias": "stg_shopify__inventory_quantity_tmp", "checksum": {"name": "sha256", "checksum": "d913ba79865986c6d9c308813959a8c9626d60a30b68f4ff4be07b891c889dff"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.505999, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_quantity_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='inventory_quantity', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='inventory_quantity_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "inventory_quantity"], ["shopify", "inventory_quantity"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.inventory_quantity"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__inventory_quantity_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_inventory_quantity_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__inventory_level_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__inventory_level_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__inventory_level_tmp.sql", "original_file_path": "models/tmp/stg_shopify__inventory_level_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__inventory_level_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__inventory_level_tmp"], "alias": "stg_shopify__inventory_level_tmp", "checksum": {"name": "sha256", "checksum": "ac984d550fe65c52e105c1517a2f0156ddba8714ac6ccc46ee6eaa65e4168320"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.5102808, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_level_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='inventory_level', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='inventory_level_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "inventory_level"], ["shopify", "inventory_level"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.inventory_level"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__inventory_level_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_inventory_level_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__order_discount_code_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_discount_code_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_discount_code_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_discount_code_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_discount_code_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_discount_code_tmp"], "alias": "stg_shopify__order_discount_code_tmp", "checksum": {"name": "sha256", "checksum": "d6dd64c5741349f018090f19824455f1bb8d727022bbed2e7c22a447ee705954"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.513962, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='order_discount_code', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_discount_code_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order_discount_code"], ["shopify", "order_discount_code"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order_discount_code"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_discount_code_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_discount_code_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__discount_code_bxgy_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_code_bxgy_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__discount_code_bxgy_tmp.sql", "original_file_path": "models/tmp/stg_shopify__discount_code_bxgy_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__discount_code_bxgy_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__discount_code_bxgy_tmp"], "alias": "stg_shopify__discount_code_bxgy_tmp", "checksum": {"name": "sha256", "checksum": "ab851cc836cf18f34f5de56d4411a609d08875df6f181680a88d333a69cf417c"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.5182028, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='discount_code_bxgy', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='discount_code_bxgy_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "discount_code_bxgy"], ["shopify", "discount_code_bxgy"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.discount_code_bxgy"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__discount_code_bxgy_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_bxgy_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__tax_line_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__tax_line_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__tax_line_tmp.sql", "original_file_path": "models/tmp/stg_shopify__tax_line_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__tax_line_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__tax_line_tmp"], "alias": "stg_shopify__tax_line_tmp", "checksum": {"name": "sha256", "checksum": "b5700643c05cb11dbca046ab8cd054e4ca2fb21fe5b1eee975a5f2a8566566b7"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.521879, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tax_line_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='tax_line', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='tax_line_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "tax_line"], ["shopify", "tax_line"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.tax_line"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__tax_line_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_tax_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__shop_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__shop_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__shop_tmp.sql", "original_file_path": "models/tmp/stg_shopify__shop_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__shop_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__shop_tmp"], "alias": "stg_shopify__shop_tmp", "checksum": {"name": "sha256", "checksum": "14e0c7df59bb78319d8115bbc76a4d4b01069f32116ba8221ac751a48eca7a2e"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.5260968, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__shop_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='shop', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='shop_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "shop"], ["shopify", "shop"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.shop"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__shop_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_shop_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__media_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__media_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__media_tmp.sql", "original_file_path": "models/tmp/stg_shopify__media_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__media_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__media_tmp"], "alias": "stg_shopify__media_tmp", "checksum": {"name": "sha256", "checksum": "68b75238072b006956d12f55258531ab8ea44787fba868ca698eba709879daa3"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.529362, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='media', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='media_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "media"], ["shopify", "media"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.media"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__media_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_media_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__order_url_tag_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_url_tag_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_url_tag_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_url_tag_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_url_tag_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_url_tag_tmp"], "alias": "stg_shopify__order_url_tag_tmp", "checksum": {"name": "sha256", "checksum": "4f28f9c797a1b8fc5192916f334b4e5ffa54dd6acbada669173542cc0fb01644"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.5326898, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_url_tag_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='order_url_tag', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_url_tag_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order_url_tag"], ["shopify", "order_url_tag"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order_url_tag"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_url_tag_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_url_tag_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__discount_code_basic_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_code_basic_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__discount_code_basic_tmp.sql", "original_file_path": "models/tmp/stg_shopify__discount_code_basic_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__discount_code_basic_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__discount_code_basic_tmp"], "alias": "stg_shopify__discount_code_basic_tmp", "checksum": {"name": "sha256", "checksum": "b32bb53d4b6ad68a0e1223f64fd16680d998e93e7b8a3d84c08ff41a90b762e1"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.537081, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='discount_code_basic', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='discount_code_basic_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "discount_code_basic"], ["shopify", "discount_code_basic"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.discount_code_basic"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__discount_code_basic_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_basic_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__media_image_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__media_image_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__media_image_tmp.sql", "original_file_path": "models/tmp/stg_shopify__media_image_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__media_image_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__media_image_tmp"], "alias": "stg_shopify__media_image_tmp", "checksum": {"name": "sha256", "checksum": "8eb01ea0a0a55049f86fb6520c9bbe4152755e01a50e5b5a25d44442d3f572fc"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.54049, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media_image_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='media_image', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='media_image_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "media_image"], ["shopify", "media_image"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.media_image"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__media_image_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_media_image_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__fulfillment_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__fulfillment_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__fulfillment_tmp.sql", "original_file_path": "models/tmp/stg_shopify__fulfillment_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__fulfillment_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__fulfillment_tmp"], "alias": "stg_shopify__fulfillment_tmp", "checksum": {"name": "sha256", "checksum": "82ff263fd38a0deffc05c810f434c4a207e8925ffd99ca3ee476da5a5ab3df13"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.545074, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='fulfillment', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='fulfillment_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "fulfillment"], ["shopify", "fulfillment"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.fulfillment"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__fulfillment_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_fulfillment_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__collection_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__collection_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__collection_tmp.sql", "original_file_path": "models/tmp/stg_shopify__collection_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__collection_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__collection_tmp"], "alias": "stg_shopify__collection_tmp", "checksum": {"name": "sha256", "checksum": "63ca1d11cf49ec0f1c1d7838691d6a198856b21ea836ba6a6abe60180dd8b311"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.548449, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='collection', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='collection_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "collection"], ["shopify", "collection"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.collection"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__collection_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_collection_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__refund_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__refund_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__refund_tmp.sql", "original_file_path": "models/tmp/stg_shopify__refund_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__refund_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__refund_tmp"], "alias": "stg_shopify__refund_tmp", "checksum": {"name": "sha256", "checksum": "71f695efce335891a6d02136c9415bd892fe5eb2a2d0a8151a0886deda61a3a2"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.551591, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund_tmp\"", "raw_code": "-- this model will be all NULL until you create a refund in Shopify\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='refund', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='refund_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "refund"], ["shopify", "refund"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.refund"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__refund_tmp.sql", "compiled": true, "compiled_code": "-- this model will be all NULL until you create a refund in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_refund_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__discount_code_app_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_code_app_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__discount_code_app_tmp.sql", "original_file_path": "models/tmp/stg_shopify__discount_code_app_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__discount_code_app_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__discount_code_app_tmp"], "alias": "stg_shopify__discount_code_app_tmp", "checksum": {"name": "sha256", "checksum": "a5b1c55d1d84494ba420cfc0a9d7c4eb126ea577434930fc55ed9591cb917308"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951350.555113, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app_tmp\"", "raw_code": "{{ config(enabled=var('shopify_using_discount_code_app', False)) }}\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='discount_code_app', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='discount_code_app_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "discount_code_app"], ["shopify", "discount_code_app"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.discount_code_app"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__discount_code_app_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_app_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__fulfillment_event_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__fulfillment_event_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__fulfillment_event_tmp.sql", "original_file_path": "models/tmp/stg_shopify__fulfillment_event_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__fulfillment_event_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__fulfillment_event_tmp"], "alias": "stg_shopify__fulfillment_event_tmp", "checksum": {"name": "sha256", "checksum": "642c30aeecfa3b633eaa3cc6d4e1f888299406d7afd20047fb19c0cb52b78c4e"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951350.559407, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_event_tmp\"", "raw_code": "{{ config(enabled=var('shopify_using_fulfillment_event', false)) }}\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='fulfillment_event', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='fulfillment_event_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "fulfillment_event"], ["shopify", "fulfillment_event"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.fulfillment_event"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__fulfillment_event_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_fulfillment_event_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__product_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__product_tmp.sql", "original_file_path": "models/tmp/stg_shopify__product_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__product_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__product_tmp"], "alias": "stg_shopify__product_tmp", "checksum": {"name": "sha256", "checksum": "6e0ec47bb03cd45a1f88b08e349350aecbaf472cdb2df5a13b9e6c2cd6a11f09"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.562774, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='product', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "product"], ["shopify", "product"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.product"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__product_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_product_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__order_adjustment_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_adjustment_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_adjustment_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_adjustment_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_adjustment_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_adjustment_tmp"], "alias": "stg_shopify__order_adjustment_tmp", "checksum": {"name": "sha256", "checksum": "0dac797bcc892e629367b80b49a8d4ea7de967783b3243eab291179eaaa95fd8"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.5669172, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_adjustment_tmp\"", "raw_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='order_adjustment', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_adjustment_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order_adjustment"], ["shopify", "order_adjustment"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order_adjustment"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_adjustment_tmp.sql", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order adjustment in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_adjustment_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__inventory_item_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__inventory_item_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__inventory_item_tmp.sql", "original_file_path": "models/tmp/stg_shopify__inventory_item_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__inventory_item_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__inventory_item_tmp"], "alias": "stg_shopify__inventory_item_tmp", "checksum": {"name": "sha256", "checksum": "065c7e0531fbd3d7a70390edaf9efc9f6dab0f801d58aa40ddd75161edcfcf3e"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.570855, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_item_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='inventory_item', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='inventory_item_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "inventory_item"], ["shopify", "inventory_item"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.inventory_item"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__inventory_item_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_inventory_item_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__order_tag_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_tag_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_tag_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_tag_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_tag_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_tag_tmp"], "alias": "stg_shopify__order_tag_tmp", "checksum": {"name": "sha256", "checksum": "e23ce290098ef334a05f9bd0ee0218bd6ed80924ec5450e8d6a8ad3a5819e94d"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.57564, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_tag_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='order_tag', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_tag_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order_tag"], ["shopify", "order_tag"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order_tag"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_tag_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_tag_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__product_tag_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product_tag_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__product_tag_tmp.sql", "original_file_path": "models/tmp/stg_shopify__product_tag_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__product_tag_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__product_tag_tmp"], "alias": "stg_shopify__product_tag_tmp", "checksum": {"name": "sha256", "checksum": "e462111618395d0e18b6e92f37cf7c86a0c54d0516a95d32e88286dd66e4e190"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.579529, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='product_tag', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_tag_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "product_tag"], ["shopify", "product_tag"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.product_tag"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__product_tag_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_product_tag_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__order_line_refund_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_line_refund_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_line_refund_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_line_refund_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_line_refund_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_line_refund_tmp"], "alias": "stg_shopify__order_line_refund_tmp", "checksum": {"name": "sha256", "checksum": "62495e36aa92d9ef930eec1dbd028108534cc27f682e59124211e2fbd774f530"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.583681, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund_tmp\"", "raw_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='order_line_refund', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_line_refund_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order_line_refund"], ["shopify", "order_line_refund"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order_line_refund"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_line_refund_tmp.sql", "compiled": true, "compiled_code": "-- this model will be all NULL until you have made an order line refund in Shopify\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_line_refund_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__customer_tag_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__customer_tag_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__customer_tag_tmp.sql", "original_file_path": "models/tmp/stg_shopify__customer_tag_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__customer_tag_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__customer_tag_tmp"], "alias": "stg_shopify__customer_tag_tmp", "checksum": {"name": "sha256", "checksum": "f0a87965c0aeef7017bacf17cca0491f64a2524ac5711cd3db0b80876afeaa61"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.588081, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tag_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='customer_tag', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='customer_tag_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "customer_tag"], ["shopify", "customer_tag"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.customer_tag"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__customer_tag_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_customer_tag_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__tender_transaction_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__tender_transaction_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__tender_transaction_tmp.sql", "original_file_path": "models/tmp/stg_shopify__tender_transaction_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__tender_transaction_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__tender_transaction_tmp"], "alias": "stg_shopify__tender_transaction_tmp", "checksum": {"name": "sha256", "checksum": "d672579ba505eb38398ce575b38c6212f1f015ad1a42d9602799e9c2c3d11581"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.592105, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tender_transaction_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='tender_transaction', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='tender_transaction_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "tender_transaction"], ["shopify", "tender_transaction"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.tender_transaction"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__tender_transaction_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_tender_transaction_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__transaction_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__transaction_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__transaction_tmp.sql", "original_file_path": "models/tmp/stg_shopify__transaction_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__transaction_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__transaction_tmp"], "alias": "stg_shopify__transaction_tmp", "checksum": {"name": "sha256", "checksum": "0653b8a8bb9e4ea494142cf25444ddde325cb513d2bc86c79ff698aa96585459"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.5969448, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__transaction_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='transaction', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='transaction_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "transaction"], ["shopify", "transaction"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.transaction"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__transaction_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_transaction_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__abandoned_checkout_discount_code_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__abandoned_checkout_discount_code_tmp.sql", "original_file_path": "models/tmp/stg_shopify__abandoned_checkout_discount_code_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__abandoned_checkout_discount_code_tmp"], "alias": "stg_shopify__abandoned_checkout_discount_code_tmp", "checksum": {"name": "sha256", "checksum": "eb1698b6dc4b740cce7fb25cd0d1dce3317a200f2ec9d5e7f24bafbe0380674f"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951350.6003578, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code_tmp\"", "raw_code": "{{ config(enabled=var('shopify_using_abandoned_checkout', True)) }}\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='abandoned_checkout_discount_code', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='abandoned_checkout_discount_code_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "abandoned_checkout_discount_code"], ["shopify", "abandoned_checkout_discount_code"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.abandoned_checkout_discount_code"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__abandoned_checkout_discount_code_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_abandoned_checkout_discount_code_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__product_variant_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product_variant_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__product_variant_tmp.sql", "original_file_path": "models/tmp/stg_shopify__product_variant_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__product_variant_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__product_variant_tmp"], "alias": "stg_shopify__product_variant_tmp", "checksum": {"name": "sha256", "checksum": "4c4fe423298bfd8b9a80bf101f5fd05814acd2e8d7c5de7e2e5c630674e8e480"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.60381, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='product_variant', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_variant_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "product_variant"], ["shopify", "product_variant"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.product_variant"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__product_variant_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_product_variant_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__abandoned_checkout_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__abandoned_checkout_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__abandoned_checkout_tmp.sql", "original_file_path": "models/tmp/stg_shopify__abandoned_checkout_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__abandoned_checkout_tmp"], "alias": "stg_shopify__abandoned_checkout_tmp", "checksum": {"name": "sha256", "checksum": "9713f197c13ecae1022f943134f8faaeaf6b14cc1bd673f5ee706e5d466cd141"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951350.6082208, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_tmp\"", "raw_code": "{{ config(enabled=var('shopify_using_abandoned_checkout', True)) }}\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='abandoned_checkout', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='abandoned_checkout_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "abandoned_checkout"], ["shopify", "abandoned_checkout"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.abandoned_checkout"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__abandoned_checkout_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_abandoned_checkout_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__order_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__order_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__order_tmp.sql", "original_file_path": "models/tmp/stg_shopify__order_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__order_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__order_tmp"], "alias": "stg_shopify__order_tmp", "checksum": {"name": "sha256", "checksum": "a27b074681d173802dbe795b83dfae9dd53ced77341a38923431d90d1386cdca"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.613575, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='order',\n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='order_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "order"], ["shopify", "order"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.order"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__order_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_order_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__discount_allocation_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__discount_allocation_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__discount_allocation_tmp.sql", "original_file_path": "models/tmp/stg_shopify__discount_allocation_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__discount_allocation_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__discount_allocation_tmp"], "alias": "stg_shopify__discount_allocation_tmp", "checksum": {"name": "sha256", "checksum": "961a236e4e1ce7b565f092b7964f53e012b39b5d336f5532e76dc9e9584f95b9"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.617366, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_allocation_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='discount_allocation', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='discount_allocation_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "discount_allocation"], ["shopify", "discount_allocation"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.discount_allocation"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__discount_allocation_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_allocation_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__product_media_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__product_media_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__product_media_tmp.sql", "original_file_path": "models/tmp/stg_shopify__product_media_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__product_media_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__product_media_tmp"], "alias": "stg_shopify__product_media_tmp", "checksum": {"name": "sha256", "checksum": "8db5af7fd2255f92eec51cbee85ac58cef7613753796195106802f67426184ca"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.6210911, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='product_media', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='product_media_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "product_media"], ["shopify", "product_media"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.product_media"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__product_media_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_product_media_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__metafield_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__metafield_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__metafield_tmp.sql", "original_file_path": "models/tmp/stg_shopify__metafield_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__metafield_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__metafield_tmp"], "alias": "stg_shopify__metafield_tmp", "checksum": {"name": "sha256", "checksum": "486bab03fb66045594a1f7e9388888278fbe623b0ce0e64a6062e130be94ed22"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951350.624463, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__metafield_tmp\"", "raw_code": "{{ config(enabled=var('shopify_using_metafield', True)) }}\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='metafield', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='metafield_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "metafield"], ["shopify", "metafield"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.metafield"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__metafield_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_metafield_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__collection_product_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__collection_product_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__collection_product_tmp.sql", "original_file_path": "models/tmp/stg_shopify__collection_product_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__collection_product_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__collection_product_tmp"], "alias": "stg_shopify__collection_product_tmp", "checksum": {"name": "sha256", "checksum": "82d1ae1797de6303549e60a16cc386c7a74e94fba1653c447e9a7801f5a340ee"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.628701, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='collection_product', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='collection_product_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "collection_product"], ["shopify", "collection_product"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.collection_product"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__collection_product_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_collection_product_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__location_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__location_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__location_tmp.sql", "original_file_path": "models/tmp/stg_shopify__location_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__location_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__location_tmp"], "alias": "stg_shopify__location_tmp", "checksum": {"name": "sha256", "checksum": "b1b4fac87a55077449436c05fbcd6c7513b4d26a0ea1fedcfb6c5cec1e31d674"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951350.632871, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__location_tmp\"", "raw_code": "{{\n    shopify_source.shopify_union_data(\n        table_identifier='location', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='location_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "location"], ["shopify", "location"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.location"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__location_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_location_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "stg_shopify__abandoned_checkout_shipping_line_tmp", "resource_type": "model", "package_name": "shopify_source", "path": "tmp/stg_shopify__abandoned_checkout_shipping_line_tmp.sql", "original_file_path": "models/tmp/stg_shopify__abandoned_checkout_shipping_line_tmp.sql", "unique_id": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp", "fqn": ["shopify_source", "tmp", "stg_shopify__abandoned_checkout_shipping_line_tmp"], "alias": "stg_shopify__abandoned_checkout_shipping_line_tmp", "checksum": {"name": "sha256", "checksum": "481c835fcc2c677171a0cb540afe6ec1b181258b631924283ebbb4bc18e9202e"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view", "enabled": true}, "created_at": 1747951350.636493, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_shipping_line_tmp\"", "raw_code": "{{ config(enabled=var('shopify_using_abandoned_checkout', True)) }}\n\n{{\n    shopify_source.shopify_union_data(\n        table_identifier='abandoned_checkout_shipping_line', \n        database_variable='shopify_database', \n        schema_variable='shopify_schema', \n        default_database=target.database,\n        default_schema='shopify',\n        default_variable='abandoned_checkout_shipping_line_source',\n        union_schema_variable='shopify_union_schemas',\n        union_database_variable='shopify_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["shopify", "abandoned_checkout_shipping_line"], ["shopify", "abandoned_checkout_shipping_line"]], "metrics": [], "depends_on": {"macros": ["macro.shopify_source.shopify_union_data"], "nodes": ["source.shopify_source.shopify.abandoned_checkout_shipping_line"]}, "compiled_path": "target/compiled/shopify_source/models/tmp/stg_shopify__abandoned_checkout_shipping_line_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"shopify_integration_tests_17\".\"shopify_abandoned_checkout_shipping_line_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.shopify__customer_email_cohorts": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__customer_email_cohorts", "resource_type": "model", "package_name": "shopify", "path": "shopify__customer_email_cohorts.sql", "original_file_path": "models/shopify__customer_email_cohorts.sql", "unique_id": "model.shopify.shopify__customer_email_cohorts", "fqn": ["shopify", "shopify__customer_email_cohorts"], "alias": "shopify__customer_email_cohorts", "checksum": {"name": "sha256", "checksum": "86b868be698fb7ab2628a03701166b68217305348a80d05f37da91cc0ee28092"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "customer_cohort_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "partition_by": {"field": "date_month", "data_type": "date"}, "cluster_by": ["date_month", "email"], "file_format": "parquet"}, "tags": [], "description": "Each record represents a customer's (on the EMAIL grain) performance in a calendar month.", "columns": {"cohort_month": {"name": "cohort_month", "description": "The month the cohort belongs to, i.e the first month the customer had an order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cohort_month_number": {"name": "cohort_month_number", "description": "The 'number' of the `date_month` of the record, i.e. how many months from their start month this cohort occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_cohort_id": {"name": "customer_cohort_id", "description": "Unique key representing a customer in a given month. Hashed on 'date_month','email', and 'source_relation'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The ID of the related customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "date_month": {"name": "date_month", "description": "The calendar month the customer stats relate to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "The timestamp of the customer's first order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "line_item_count_in_month": {"name": "line_item_count_in_month", "description": "Number of line items purchased in the `date_month`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "line_item_count_lifetime": {"name": "line_item_count_lifetime", "description": "Number of line items purchased up until and including this `date_month`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_count_in_month": {"name": "order_count_in_month", "description": "Number of orders purchased in the `date_month`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_count_lifetime": {"name": "order_count_lifetime", "description": "Number of orders purchased up until and including this `date_month`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price_in_month": {"name": "total_price_in_month", "description": "Total amount (in shop currency) purchased in the `date_month`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price_lifetime": {"name": "total_price_lifetime", "description": "Total amount (in shop currency) up until and including this `date_month`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "incremental", "unique_key": "customer_cohort_id", "incremental_strategy": "delete+insert", "partition_by": {"field": "date_month", "data_type": "date"}, "cluster_by": ["date_month", "email"], "file_format": "parquet"}, "created_at": 1747951351.510783, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_email_cohorts\"", "raw_code": "{{\n    config(\n        materialized='table' if shopify.shopify_is_databricks_sql_warehouse() else 'incremental',\n        unique_key='customer_cohort_id',\n        incremental_strategy='insert_overwrite' if target.type in ('bigquery', 'databricks', 'spark') else 'delete+insert',\n        partition_by={\n            \"field\": \"date_month\", \n            \"data_type\": \"date\"\n            } if target.type not in ('spark','databricks') \n            else ['date_month'],\n        cluster_by=['date_month', 'email'],\n        file_format='delta' if shopify.shopify_is_databricks_sql_warehouse() else 'parquet'\n        ) \n}}\n\nwith calendar as (\n\n    select *\n    from {{ ref('shopify__calendar') }}\n    where cast({{ dbt.date_trunc('month','date_day') }} as date) = date_day\n\n    {% if is_incremental() %}\n    and cast(date_day as date) >= {{ shopify.shopify_lookback(from_date=\"max(date_month)\", interval=1, datepart='month') }}\n    {% endif %}\n\n), customers as (\n\n    select *\n    from {{ ref('shopify__customer_emails') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.email,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        {{ dbt.date_trunc('month', 'first_order_timestamp') }} as cohort_month\n    from calendar\n    inner join customers\n        on cast({{ dbt.date_trunc('month', 'first_order_timestamp') }} as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.email, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.email = orders.email\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast({{ dbt.date_trunc('month', 'created_timestamp') }} as date)\n    {{ dbt_utils.group_by(n=5) }}\n\n), windows as (\n\n    {% set partition_string = 'partition by ' ~ shopify.shopify_partition_by_cols('email', 'source_relation') ~ 'order by date_month rows between unbounded preceding and current row' %}\n\n    select\n        *,\n        sum(total_price_in_month) over ({{ partition_string }}) as total_price_lifetime,\n        sum(order_count_in_month) over ({{ partition_string }}) as order_count_lifetime,\n        sum(line_item_count_in_month) over ({{ partition_string }}) as line_item_count_lifetime,\n        row_number() over ( \n            partition by {{ shopify.shopify_partition_by_cols('email', 'source_relation') }}\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n{% if is_incremental() %}\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        email,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from {{ this }}\n    where date_month < {{ shopify.shopify_lookback(from_date=\"max(date_month)\", interval=1, datepart='month') }}\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.email, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        backfill_lifetime_sums.previous_cohort_month_number + windows.cohort_month_number as cohort_month_number,\n        backfill_lifetime_sums.previous_total_price_lifetime + windows.total_price_lifetime as total_price_lifetime,\n        backfill_lifetime_sums.previous_order_count_lifetime + windows.order_count_lifetime as order_count_lifetime,\n        backfill_lifetime_sums.previous_line_item_count_lifetime + windows.line_item_count_lifetime as line_item_count_lifetime,\n        {{ dbt_utils.generate_surrogate_key(['windows.date_month','windows.email','windows.source_relation']) }} as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.email = windows.email\n\n{% else %}\n), final as (\n\n    select \n        *, \n        {{ dbt_utils.generate_surrogate_key(['date_month','email','source_relation']) }} as customer_cohort_id\n    from windows\n\n{% endif %}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "shopify__calendar", "package": null, "version": null}, {"name": "shopify__customer_emails", "package": null, "version": null}, {"name": "shopify__orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify.shopify_is_databricks_sql_warehouse", "macro.dbt.date_trunc", "macro.dbt.is_incremental", "macro.dbt_utils.group_by", "macro.shopify.shopify_partition_by_cols", "macro.dbt_utils.generate_surrogate_key", "macro.shopify.shopify_lookback"], "nodes": ["model.shopify.shopify__calendar", "model.shopify.shopify__customer_emails", "model.shopify.shopify__orders"]}, "compiled_path": "target/compiled/shopify/models/shopify__customer_email_cohorts.sql", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__calendar\"\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n    \n    and cast(date_day as date) >= \n\n\n\n    \n\n    \n\n    cast('2025-05-01' as date) + ((interval '1 month') * (-1))\n\n\n\n\n    \n\n), customers as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_emails\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.email,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        date_trunc('month', first_order_timestamp) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.email, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.email = orders.email\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    email\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    email\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        email,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_email_cohorts\"\n    where date_month < \n\n\n\n    \n\n    \n\n    cast('2025-05-01' as date) + ((interval '1 month') * (-1))\n\n\n\n\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.email, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        backfill_lifetime_sums.previous_cohort_month_number + windows.cohort_month_number as cohort_month_number,\n        backfill_lifetime_sums.previous_total_price_lifetime + windows.total_price_lifetime as total_price_lifetime,\n        backfill_lifetime_sums.previous_order_count_lifetime + windows.order_count_lifetime as order_count_lifetime,\n        backfill_lifetime_sums.previous_line_item_count_lifetime + windows.line_item_count_lifetime as line_item_count_lifetime,\n        md5(cast(coalesce(cast(windows.date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.email as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.email = windows.email\n\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_cohort_id"], "time_spine": null}, "model.shopify.shopify__customer_cohorts": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__customer_cohorts", "resource_type": "model", "package_name": "shopify", "path": "shopify__customer_cohorts.sql", "original_file_path": "models/shopify__customer_cohorts.sql", "unique_id": "model.shopify.shopify__customer_cohorts", "fqn": ["shopify", "shopify__customer_cohorts"], "alias": "shopify__customer_cohorts", "checksum": {"name": "sha256", "checksum": "eaae13d08e96bac9c531c0be1720c1a96df1b027ddb25711e069ac54fb56b959"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "customer_cohort_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "partition_by": {"field": "date_month", "data_type": "date"}, "cluster_by": ["date_month", "customer_id"], "file_format": "parquet"}, "tags": [], "description": "Each record represents a customer's performance in a calendar month.", "columns": {"cohort_month": {"name": "cohort_month", "description": "The month the cohort belongs to, i.e the first month the customer had an order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cohort_month_number": {"name": "cohort_month_number", "description": "The 'number' of the `date_month` of the record, i.e. how many months from their start month this cohort occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_cohort_id": {"name": "customer_cohort_id", "description": "Unique key representing a customer in a given month. Hashed on 'date_month', 'customer_id', and 'source_relation'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "The ID of the related customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "date_month": {"name": "date_month", "description": "The calendar month the customer stats relate to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "The timestamp of the customer's first order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "line_item_count_in_month": {"name": "line_item_count_in_month", "description": "Number of line items purchased in the `date_month`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "line_item_count_lifetime": {"name": "line_item_count_lifetime", "description": "Number of line items purchased up until and including this `date_month`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_count_in_month": {"name": "order_count_in_month", "description": "Number of orders purchased in the `date_month`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_count_lifetime": {"name": "order_count_lifetime", "description": "Number of orders purchased up until and including this `date_month`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price_in_month": {"name": "total_price_in_month", "description": "Total amount (in shop currency) purchased in the `date_month`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price_lifetime": {"name": "total_price_lifetime", "description": "Total amount (in shop currency) up until and including this `date_month`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "incremental", "unique_key": "customer_cohort_id", "incremental_strategy": "delete+insert", "partition_by": {"field": "date_month", "data_type": "date"}, "cluster_by": ["date_month", "customer_id"], "file_format": "parquet"}, "created_at": 1747951351.510205, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_cohorts\"", "raw_code": "{{\n    config(\n        materialized='table' if shopify.shopify_is_databricks_sql_warehouse() else 'incremental',\n        unique_key='customer_cohort_id',\n        incremental_strategy='insert_overwrite' if target.type in ('bigquery', 'databricks', 'spark') else 'delete+insert',\n        partition_by={\n            \"field\": \"date_month\", \n            \"data_type\": \"date\"\n            } if target.type not in ('spark','databricks') \n            else ['date_month'],\n        cluster_by=['date_month', 'customer_id'],\n        file_format='delta' if shopify.shopify_is_databricks_sql_warehouse() else 'parquet'\n        ) \n}}\n\nwith calendar as (\n\n    select *\n    from {{ ref('shopify__calendar') }}\n    where cast({{ dbt.date_trunc('month','date_day') }} as date) = date_day\n\n    {% if is_incremental() %}\n    and cast(date_day as date) >= {{ shopify.shopify_lookback(from_date=\"max(date_month)\", interval=1, datepart='month') }}\n    {% endif %}\n\n), customers as (\n\n    select *\n    from {{ ref('shopify__customers') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        cast({{ dbt.date_trunc('month', 'first_order_timestamp') }} as date) as cohort_month\n    from calendar\n    inner join customers\n        on cast({{ dbt.date_trunc('month', 'first_order_timestamp') }} as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast({{ dbt.date_trunc('month', 'created_timestamp') }} as date)\n    {{ dbt_utils.group_by(n=5) }}\n\n), windows as (\n\n    {% set partition_string = 'partition by ' ~ shopify.shopify_partition_by_cols('customer_id', 'source_relation') ~ 'order by date_month rows between unbounded preceding and current row' %}\n\n    select\n        *,\n        sum(total_price_in_month) over ({{ partition_string }}) as total_price_lifetime,\n        sum(order_count_in_month) over ({{ partition_string }}) as order_count_lifetime,\n        sum(line_item_count_in_month) over ({{ partition_string }}) as line_item_count_lifetime,\n        row_number() over ( \n            partition by {{ shopify.shopify_partition_by_cols('customer_id', 'source_relation') }}\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n{% if is_incremental() %}\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        customer_id,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from {{ this }}\n    where date_month < {{ shopify.shopify_lookback(from_date=\"max(date_month)\", interval=1, datepart='month') }}\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.customer_id, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        coalesce(backfill_lifetime_sums.previous_cohort_month_number, 0) + coalesce(windows.cohort_month_number, 0) as cohort_month_number,\n        coalesce(backfill_lifetime_sums.previous_total_price_lifetime, 0) + coalesce(windows.total_price_lifetime, 0) as total_price_lifetime,\n        coalesce(backfill_lifetime_sums.previous_order_count_lifetime, 0) + coalesce(windows.order_count_lifetime, 0) as order_count_lifetime,\n        coalesce(backfill_lifetime_sums.previous_line_item_count_lifetime, 0) + coalesce(windows.line_item_count_lifetime, 0) as line_item_count_lifetime,\n        {{ dbt_utils.generate_surrogate_key(['windows.date_month','windows.customer_id','windows.source_relation']) }} as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.customer_id = windows.customer_id\n\n{% else %}\n), final as (\n\n    select \n        *, \n        {{ dbt_utils.generate_surrogate_key(['date_month','customer_id','source_relation']) }} as customer_cohort_id\n    from windows\n\n{% endif %}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "shopify__calendar", "package": null, "version": null}, {"name": "shopify__customers", "package": null, "version": null}, {"name": "shopify__orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify.shopify_is_databricks_sql_warehouse", "macro.dbt.date_trunc", "macro.dbt.is_incremental", "macro.dbt_utils.group_by", "macro.shopify.shopify_partition_by_cols", "macro.dbt_utils.generate_surrogate_key", "macro.shopify.shopify_lookback"], "nodes": ["model.shopify.shopify__calendar", "model.shopify.shopify__customers", "model.shopify.shopify__orders"]}, "compiled_path": "target/compiled/shopify/models/shopify__customer_cohorts.sql", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__calendar\"\n    where cast(date_trunc('month', date_day) as date) = date_day\n\n    \n    and cast(date_day as date) >= \n\n\n\n    \n\n    \n\n    cast('2025-05-01' as date) + ((interval '1 month') * (-1))\n\n\n\n\n    \n\n), customers as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customers\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n), customer_calendar as (\n\n    select\n        cast(calendar.date_day as date) as date_month,\n        customers.customer_id,\n        customers.first_order_timestamp,\n        customers.source_relation,\n        cast(date_trunc('month', first_order_timestamp) as date) as cohort_month\n    from calendar\n    inner join customers\n        on cast(date_trunc('month', first_order_timestamp) as date) <= calendar.date_day\n\n), orders_joined as (\n\n    select \n        customer_calendar.date_month, \n        customer_calendar.customer_id, \n        customer_calendar.first_order_timestamp,\n        customer_calendar.cohort_month,\n        customer_calendar.source_relation,\n        coalesce(count(distinct orders.order_id), 0) as order_count_in_month,\n        coalesce(sum(orders.order_adjusted_total), 0) as total_price_in_month,\n        coalesce(sum(orders.line_item_count), 0) as line_item_count_in_month\n    from customer_calendar\n    left join orders\n        on customer_calendar.customer_id = orders.customer_id\n        and customer_calendar.source_relation = orders.source_relation\n        and customer_calendar.date_month = cast(date_trunc('month', created_timestamp) as date)\n    group by 1,2,3,4,5\n\n), windows as (\n\n    \n\n    select\n        *,\n        sum(total_price_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as total_price_lifetime,\n        sum(order_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as order_count_lifetime,\n        sum(line_item_count_in_month) over (partition by \n\n\n    customer_id\n\norder by date_month rows between unbounded preceding and current row) as line_item_count_lifetime,\n        row_number() over ( \n            partition by \n\n\n    customer_id\n\n\n            order by date_month asc) \n            as cohort_month_number\n    from orders_joined\n\n\n), backfill_lifetime_sums as (\n    -- for incremental runs we need to fetch the prior lifetimes to properly continue adding to them\n    select\n        source_relation,\n        customer_id,\n        max(total_price_lifetime) as previous_total_price_lifetime,\n        max(order_count_lifetime) as previous_order_count_lifetime,\n        max(line_item_count_lifetime) as previous_line_item_count_lifetime,\n        max(cohort_month_number) as previous_cohort_month_number\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_cohorts\"\n    where date_month < \n\n\n\n    \n\n    \n\n    cast('2025-05-01' as date) + ((interval '1 month') * (-1))\n\n\n\n\n    group by 1,2\n\n), final as (\n\n    select \n        windows.date_month, \n        windows.customer_id, \n        windows.first_order_timestamp,\n        windows.cohort_month,\n        windows.source_relation,\n        windows.order_count_in_month,\n        windows.total_price_in_month,\n        windows.line_item_count_in_month,\n        coalesce(backfill_lifetime_sums.previous_cohort_month_number, 0) + coalesce(windows.cohort_month_number, 0) as cohort_month_number,\n        coalesce(backfill_lifetime_sums.previous_total_price_lifetime, 0) + coalesce(windows.total_price_lifetime, 0) as total_price_lifetime,\n        coalesce(backfill_lifetime_sums.previous_order_count_lifetime, 0) + coalesce(windows.order_count_lifetime, 0) as order_count_lifetime,\n        coalesce(backfill_lifetime_sums.previous_line_item_count_lifetime, 0) + coalesce(windows.line_item_count_lifetime, 0) as line_item_count_lifetime,\n        md5(cast(coalesce(cast(windows.date_month as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.customer_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(windows.source_relation as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_cohort_id\n    from windows\n    left join backfill_lifetime_sums\n        on backfill_lifetime_sums.source_relation = windows.source_relation\n        and backfill_lifetime_sums.customer_id = windows.customer_id\n\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_cohort_id"], "time_spine": null}, "model.shopify.shopify__discounts": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__discounts", "resource_type": "model", "package_name": "shopify", "path": "shopify__discounts.sql", "original_file_path": "models/shopify__discounts.sql", "unique_id": "model.shopify.shopify__discounts", "fqn": ["shopify", "shopify__discounts"], "alias": "shopify__discounts", "checksum": {"name": "sha256", "checksum": "8dbd7e1cb4b6423e89eea3bfe645c3ddf051ef85df72b48bddbfb7ce18cba7f3"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a unique discount, enriched with discount metadata and metrics regarding orders and abandoned checkouts.\n", "columns": {"discounts_unique_key": {"name": "discounts_unique_key", "description": "Unique key representing a discount. Hashed on 'discount_code_id' and 'source_relation'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "The case-insensitive discount code that customers use at checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_code_id": {"name": "discount_code_id", "description": "The ID for the discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_type": {"name": "discount_type", "description": "The type of discount (e.g. 'basic', 'bxgy', 'free_shipping', 'app').", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_once_per_customer": {"name": "applies_once_per_customer", "description": "Whether the discount can be used only once per customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_count": {"name": "usage_count", "description": "Number of times the discount has been used (asynchronously updated).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count": {"name": "codes_count", "description": "Number of unique redeem codes associated with the discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_precision": {"name": "codes_precision", "description": "Indicates whether `codes_count` is exact or estimated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_order_discounts": {"name": "combines_with_order_discounts", "description": "Whether this discount can be combined with order-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_product_discounts": {"name": "combines_with_product_discounts", "description": "Whether this discount can be combined with product-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_shipping_discounts": {"name": "combines_with_shipping_discounts", "description": "Whether this discount can be combined with shipping-level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp when the discount was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_selection_all_customers": {"name": "customer_selection_all_customers", "description": "Whether the discount is available to all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ends_at": {"name": "ends_at", "description": "Timestamp when the discount ends or expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starts_at": {"name": "starts_at", "description": "Timestamp when the discount becomes active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "Current status of the discount (e.g. 'active', 'expired', 'scheduled').", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The discount\u2019s display name in the Shopify admin and to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_amount": {"name": "total_sales_amount", "description": "The total sales amount that resulted from the usage of this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_currency_code": {"name": "total_sales_currency_code", "description": "The currency code associated with `total_sales_amount`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the discount was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_limit": {"name": "usage_limit", "description": "The total number of times the discount code can be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "allocation_method": {"name": "allocation_method", "description": "The method by which the discount is allocated. Valid values include `each` (applies the discount to each eligible item) and `across` (spreads the discount value across eligible items).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "A description of the discount, often corresponding to the rule or promotion name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_selection": {"name": "target_selection", "description": "Indicates whether the discount applies to 'all' or 'entitled' items.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_type": {"name": "target_type", "description": "The type of target this discount applies to (e.g., `line_item` or `shipping_line`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "application_type": {"name": "application_type", "description": "The type of discount (e.g., `manual`, `script`, or `automatic`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Numeric value of the discount (e.g., percentage or fixed amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_type": {"name": "value_type", "description": "How the discount value is interpreted (e.g., 'percentage', 'fixed_amount').", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_order_discount_amount": {"name": "total_order_discount_amount", "description": "Total monetary amount (in shop currency) of discounts taken off of orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_abandoned_checkout_discount_amount": {"name": "total_abandoned_checkout_discount_amount", "description": "Total monetary amount (in shop currency) of discounts taken off abandoned checkout orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_order_line_items_price": {"name": "total_order_line_items_price", "description": "Total monetary amount (in shop currency) of line items for orders that have used this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_order_shipping_cost": {"name": "total_order_shipping_cost", "description": "Total shipping costs for orders that used this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_abandoned_checkout_shipping_price": {"name": "total_abandoned_checkout_shipping_price", "description": "Total projected shipping costs for abandoned checkouts that applied this discount first.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_order_refund_amount": {"name": "total_order_refund_amount", "description": "Total refunded amount (in shop currency) for orders that used this discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_customers": {"name": "count_customers", "description": "Count of distinct customers who placed orders using this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_customer_emails": {"name": "count_customer_emails", "description": "Count of distinct customer emails who placed orders using this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_order_discount_amount": {"name": "avg_order_discount_amount", "description": "Average amount (in shop currency) of discount taken off orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_orders": {"name": "count_orders", "description": "Count of orders in which this discount code was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_abandoned_checkouts": {"name": "count_abandoned_checkouts", "description": "Count of abandoned checkouts in which this discount code was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_abandoned_checkout_customers": {"name": "count_abandoned_checkout_customers", "description": "Distinct count of customers who applied this discount in a checkout that they abandoned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_abandoned_checkout_customer_emails": {"name": "count_abandoned_checkout_customer_emails", "description": "Distinct count of customer emails who applied this discount in a checkout that they abandoned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.641723, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__discounts\"", "raw_code": "with discounts_enriched as (\n\n    select *,\n        {{ dbt_utils.generate_surrogate_key(['source_relation', 'discount_code_id']) }} as discounts_unique_key\n    from {{ ref('int_shopify__discount_code_enriched')}}\n),\n\norders_aggregated as (\n\n    select *\n    from {{ ref('int_shopify__discounts__order_aggregates')}}\n),\n\n{% if var('shopify_using_abandoned_checkout', True) %}\nabandoned_checkouts_aggregated as (\n\n    select *\n    from {{ ref('int_shopify__discounts__abandoned_checkouts')}}\n),\n{% endif %}\n\n\naggregates_joined as (\n\n    select \n        discounts_enriched.*,\n        coalesce(orders_aggregated.count_orders, 0) as count_orders,\n        orders_aggregated.avg_order_discount_amount,\n        coalesce(orders_aggregated.total_order_discount_amount, 0) as total_order_discount_amount,\n        coalesce(orders_aggregated.total_order_line_items_price, 0) as total_order_line_items_price,\n        coalesce(orders_aggregated.total_order_shipping_cost, 0) as total_order_shipping_cost,\n        coalesce(orders_aggregated.total_order_refund_amount, 0) as total_order_refund_amount,\n        coalesce(orders_aggregated.count_customers, 0) as count_customers,\n        coalesce(orders_aggregated.count_customer_emails, 0) as count_customer_emails\n        \n        {% if var('shopify_using_abandoned_checkout', True) %}\n        , coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_discount_amount, 0) as total_abandoned_checkout_discount_amount,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_shipping_price, 0) as total_abandoned_checkout_shipping_price,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customers, 0) as count_abandoned_checkout_customers,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customer_emails, 0) as count_abandoned_checkout_customer_emails\n        {% endif %} \n\n    from discounts_enriched\n    left join orders_aggregated\n        on discounts_enriched.code = orders_aggregated.code\n        and discounts_enriched.source_relation = orders_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discounts_enriched.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discounts_enriched.value_type end) = orders_aggregated.type\n\n    {% if var('shopify_using_abandoned_checkout', True) %}\n    left join abandoned_checkouts_aggregated\n        on discounts_enriched.code = abandoned_checkouts_aggregated.code\n        and discounts_enriched.source_relation = abandoned_checkouts_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discounts_enriched.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discounts_enriched.value_type end) = abandoned_checkouts_aggregated.type\n    {% endif %}\n)\n\nselect * \nfrom aggregates_joined", "language": "sql", "refs": [{"name": "int_shopify__discount_code_enriched", "package": null, "version": null}, {"name": "int_shopify__discounts__order_aggregates", "package": null, "version": null}, {"name": "int_shopify__discounts__abandoned_checkouts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.shopify.int_shopify__discount_code_enriched", "model.shopify.int_shopify__discounts__order_aggregates", "model.shopify.int_shopify__discounts__abandoned_checkouts"]}, "compiled_path": "target/compiled/shopify/models/shopify__discounts.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__discount_code_enriched as (\nwith discount_redeem_codes as (\n    \n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code\"\n),\n\ndiscount_applications as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application\"\n),\n\nunified_discount_codes as (\n\n    select\n        discount_code_id,\n        'basic' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'bxgy' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'free_shipping' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping\"\n\n    \n    \n    union all\n\n    select  \n        discount_code_id,\n        'app' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app\"\n    \n),\n\ndiscounts_with_codes as (\n\n    select\n        discount_redeem_codes.code,\n        unified_discount_codes.*\n    from unified_discount_codes \n    left join discount_redeem_codes \n        on unified_discount_codes.discount_code_id = discount_redeem_codes.discount_id\n        and unified_discount_codes.source_relation = discount_redeem_codes.source_relation\n),\n\ndiscounts_with_applications as (\n\n    select\n        discounts_with_codes.*,\n        discount_applications.allocation_method,\n        discount_applications.description,\n        discount_applications.target_selection,\n        discount_applications.target_type,\n        discount_applications.type as application_type,\n        discount_applications.value,\n        discount_applications.value_type\n    from discounts_with_codes\n    left join discount_applications \n        on discounts_with_codes.code = discount_applications.code\n        and discounts_with_codes.source_relation = discount_applications.source_relation\n)\n\nselect *\nfrom discounts_with_applications\n),  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n),  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\n\n\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), discounts_enriched as (\n\n    select *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(discount_code_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as discounts_unique_key\n    from __dbt__cte__int_shopify__discount_code_enriched\n),\n\norders_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n),\n\n\nabandoned_checkouts_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n),\n\n\n\naggregates_joined as (\n\n    select \n        discounts_enriched.*,\n        coalesce(orders_aggregated.count_orders, 0) as count_orders,\n        orders_aggregated.avg_order_discount_amount,\n        coalesce(orders_aggregated.total_order_discount_amount, 0) as total_order_discount_amount,\n        coalesce(orders_aggregated.total_order_line_items_price, 0) as total_order_line_items_price,\n        coalesce(orders_aggregated.total_order_shipping_cost, 0) as total_order_shipping_cost,\n        coalesce(orders_aggregated.total_order_refund_amount, 0) as total_order_refund_amount,\n        coalesce(orders_aggregated.count_customers, 0) as count_customers,\n        coalesce(orders_aggregated.count_customer_emails, 0) as count_customer_emails\n        \n        \n        , coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_discount_amount, 0) as total_abandoned_checkout_discount_amount,\n        coalesce(abandoned_checkouts_aggregated.total_abandoned_checkout_shipping_price, 0) as total_abandoned_checkout_shipping_price,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customers, 0) as count_abandoned_checkout_customers,\n        coalesce(abandoned_checkouts_aggregated.count_abandoned_checkout_customer_emails, 0) as count_abandoned_checkout_customer_emails\n         \n\n    from discounts_enriched\n    left join orders_aggregated\n        on discounts_enriched.code = orders_aggregated.code\n        and discounts_enriched.source_relation = orders_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discounts_enriched.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discounts_enriched.value_type end) = orders_aggregated.type\n\n    \n    left join abandoned_checkouts_aggregated\n        on discounts_enriched.code = abandoned_checkouts_aggregated.code\n        and discounts_enriched.source_relation = abandoned_checkouts_aggregated.source_relation\n        -- in case one CODE can apply to both shipping and line items, percentages and fixed_amounts\n        and (case \n                when discounts_enriched.target_type = 'shipping_line' then 'shipping' -- when target_type = 'shipping', value_type = 'percentage'\n                else discounts_enriched.value_type end) = abandoned_checkouts_aggregated.type\n    \n)\n\nselect * \nfrom aggregates_joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__discount_code_enriched", "sql": " __dbt__cte__int_shopify__discount_code_enriched as (\nwith discount_redeem_codes as (\n    \n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code\"\n),\n\ndiscount_applications as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application\"\n),\n\nunified_discount_codes as (\n\n    select\n        discount_code_id,\n        'basic' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'bxgy' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'free_shipping' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping\"\n\n    \n    \n    union all\n\n    select  \n        discount_code_id,\n        'app' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app\"\n    \n),\n\ndiscounts_with_codes as (\n\n    select\n        discount_redeem_codes.code,\n        unified_discount_codes.*\n    from unified_discount_codes \n    left join discount_redeem_codes \n        on unified_discount_codes.discount_code_id = discount_redeem_codes.discount_id\n        and unified_discount_codes.source_relation = discount_redeem_codes.source_relation\n),\n\ndiscounts_with_applications as (\n\n    select\n        discounts_with_codes.*,\n        discount_applications.allocation_method,\n        discount_applications.description,\n        discount_applications.target_selection,\n        discount_applications.target_type,\n        discount_applications.type as application_type,\n        discount_applications.value,\n        discount_applications.value_type\n    from discounts_with_codes\n    left join discount_applications \n        on discounts_with_codes.code = discount_applications.code\n        and discounts_with_codes.source_relation = discount_applications.source_relation\n)\n\nselect *\nfrom discounts_with_applications\n)"}, {"id": "model.shopify.int_shopify__discounts__order_aggregates", "sql": " __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n)"}, {"id": "model.shopify.int_shopify__discounts__abandoned_checkouts", "sql": " __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\n\n\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["discounts_unique_key"], "time_spine": null}, "model.shopify.shopify__customer_emails": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__customer_emails", "resource_type": "model", "package_name": "shopify", "path": "shopify__customer_emails.sql", "original_file_path": "models/shopify__customer_emails.sql", "unique_id": "model.shopify.shopify__customer_emails", "fqn": ["shopify", "shopify__customer_emails"], "alias": "shopify__customer_emails", "checksum": {"name": "sha256", "checksum": "a8afc1928eb21dcbbdd039bce0e6e9eaa7597c0319b08e5dade79a5e1eaae0d0"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a customer email in Shopify.", "columns": {"last_fivetran_synced": {"name": "last_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_address_id": {"name": "default_address_id", "description": "The default address for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The unique email address of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_name": {"name": "first_name", "description": "The customer's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_ids": {"name": "customer_ids", "description": "Comma-separated list of customer IDs associated with the email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_name": {"name": "last_name", "description": "The customer's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_count_orders": {"name": "lifetime_count_orders", "description": "The number of orders associated with this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone_numbers": {"name": "phone_numbers", "description": "Comma-separated list of phone numbers associated with this email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state": {"name": "account_state", "description": "The state of the customer's account with a shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_tax_exempt": {"name": "is_tax_exempt", "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_updated_at": {"name": "last_updated_at", "description": "The date and time when the customer information was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_verified_email": {"name": "is_verified_email", "description": "Whether the customer has verified their email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "The timestamp the customer completed their first order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "most_recent_order_timestamp": {"name": "most_recent_order_timestamp", "description": "The timestamp the customer completed their most recent order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_order_value": {"name": "avg_order_value", "description": "The average order value for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_spent": {"name": "lifetime_total_spent", "description": "The total amount of money that the customer has spent on orders across their order history (in shop currency).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_refunded": {"name": "lifetime_total_refunded", "description": "The total amount of money that the customer has been refunded on orders across their order history.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_net": {"name": "lifetime_total_net", "description": "The total amount of money (minus refunds) that the customer has spent across their order history.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_account_created_at": {"name": "first_account_created_at", "description": "Timestamp of when the first account associated with this email was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_account_created_at": {"name": "last_account_created_at", "description": "Timestamp of when the last account associated with this email was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from, if you are unioning multiple connectors. Null if not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_abandoned_checkouts": {"name": "lifetime_abandoned_checkouts", "description": "Total number of abandoned checkouts abandoned by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_tags": {"name": "customer_tags", "description": "A string aggregated list of all tags associated with a customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_quantity_per_order": {"name": "avg_quantity_per_order", "description": "Average quantity of items per order customer orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_tax": {"name": "lifetime_total_tax", "description": "Total amount of tax attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_tax_per_order": {"name": "avg_tax_per_order", "description": "Average tax per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_discount": {"name": "lifetime_total_discount", "description": "Total discounts attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_discount_per_order": {"name": "avg_discount_per_order", "description": "Average discount per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_shipping": {"name": "lifetime_total_shipping", "description": "Total shipping costs attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_shipping_per_order": {"name": "avg_shipping_per_order", "description": "Average shipping cost per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_shipping_with_discounts": {"name": "lifetime_total_shipping_with_discounts", "description": "Total shipping costs after discounts attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_shipping_with_discounts_per_order": {"name": "avg_shipping_with_discounts_per_order", "description": "Average shipping costs after discounts per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_shipping_tax": {"name": "lifetime_total_shipping_tax", "description": "Total shipping tax attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_shipping_tax_per_order": {"name": "avg_shipping_tax_per_order", "description": "Average shipping tax per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_consent_updated_at": {"name": "marketing_consent_updated_at", "description": "The date and time when the customer consented to receive marketing material by email. If no date is provided, then the date and time when the consent information was sent is used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency that the customer used when they paid for their last order. Defaults to the shop currency. Returns the shop currency for test orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_consent_state": {"name": "marketing_consent_state", "description": "Field indicating if the customer has consented to receive marketing material via email. Coalescing of the new `email_marketing_consent_state` field and the deprecated `accepts_marketing` field. Records with the old field will be marked with '(legacy)'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_opt_in_level": {"name": "marketing_opt_in_level", "description": "The marketing subscription opt-in level, as described in the M3AAWG Sender Best Common Practices, that the customer gave when they consented to receive marketing material by email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "A note about the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.614447, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_emails\"", "raw_code": "with customer_emails as (\n\n    select \n        {{ dbt_utils.star(from=ref('int_shopify__customer_email_rollup'), except=[\"orders_count\", \"total_spent\"]) }}\n    from {{ ref('int_shopify__customer_email_rollup') }}\n\n), orders as (\n\n    select *\n    from {{ ref('int_shopify__emails__order_aggregates' )}}\n    where email is not null\n\n{% if var('shopify_using_abandoned_checkout', True) %}\n), abandoned as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from {{ var('shopify_abandoned_checkout' )}}\n    where email is not null\n    group by 1,2\n{% endif %}\n\n), joined as (\n\n    select \n        customer_emails.*,\n\n        {% if var('shopify_using_abandoned_checkout', True) %}\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        {% endif %}\n\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customer_emails\n    left join orders\n        on customer_emails.email = orders.email\n        and customer_emails.source_relation = orders.source_relation\n\n    {% if var('shopify_using_abandoned_checkout', True) %}\n    left join abandoned\n        on customer_emails.email = abandoned.email\n        and customer_emails.source_relation = abandoned.source_relation\n    {% endif %}\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "int_shopify__customer_email_rollup", "package": null, "version": null}, {"name": "int_shopify__customer_email_rollup", "package": null, "version": null}, {"name": "int_shopify__emails__order_aggregates", "package": null, "version": null}, {"name": "stg_shopify__abandoned_checkout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.shopify.int_shopify__customer_email_rollup", "model.shopify.int_shopify__emails__order_aggregates", "model.shopify_source.stg_shopify__abandoned_checkout"]}, "compiled_path": "target/compiled/shopify/models/shopify__customer_emails.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), customer_emails as (\n\n    select \n        \"email\",\n  \"source_relation\",\n  \"customer_ids\",\n  \"phone_numbers\",\n  \"customer_tags\",\n  \"first_account_created_at\",\n  \"last_account_created_at\",\n  \"last_updated_at\",\n  \"marketing_consent_updated_at\",\n  \"last_fivetran_synced\",\n  \"is_tax_exempt\",\n  \"is_verified_email\",\n  \"first_name\",\n  \"last_name\",\n  \"default_address_id\",\n  \"account_state\",\n  \"note\",\n  \"currency\",\n  \"marketing_consent_state\",\n  \"marketing_opt_in_level\"\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"int_shopify__customer_email_rollup\"\n\n), orders as (\n\n    select *\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    where email is not null\n\n\n), abandoned as (\n\n    select \n        lower(email) as email,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n    where email is not null\n    group by 1,2\n\n\n), joined as (\n\n    select \n        customer_emails.*,\n\n        \n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        \n\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customer_emails\n    left join orders\n        on customer_emails.email = orders.email\n        and customer_emails.source_relation = orders.source_relation\n\n    \n    left join abandoned\n        on customer_emails.email = abandoned.email\n        and customer_emails.source_relation = abandoned.source_relation\n    \n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__emails__order_aggregates", "sql": " __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["email", "source_relation"], "time_spine": null}, "model.shopify.shopify__inventory_levels": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__inventory_levels", "resource_type": "model", "package_name": "shopify", "path": "shopify__inventory_levels.sql", "original_file_path": "models/shopify__inventory_levels.sql", "unique_id": "model.shopify.shopify__inventory_levels", "fqn": ["shopify", "shopify__inventory_levels"], "alias": "shopify__inventory_levels", "checksum": {"name": "sha256", "checksum": "b29653b2f6648671893aa4f9a28b256b40ffdfbdcd7a0c574922b0ae1f783ec7"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Model representing the current status of an inventory level in Shopify. Inventory Levels are unique pairings of  inventory items (which have a 1:1 relationship with product variants) and locations. \nInventory Level = Inventory item @ a Location.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_id": {"name": "inventory_item_id", "description": "The ID of the inventory item associated with the inventory level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the location that the inventory level belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the inventory level was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_inventory_item_deleted": {"name": "is_inventory_item_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sku": {"name": "sku", "description": "The unique SKU (stock keeping unit) of the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province_code_of_origin": {"name": "province_code_of_origin", "description": "The province code (ISO 3166-2 alpha-2) of where the item came from. The province code is only used if the shipping provider for the inventory item is Canada Post.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "duplicate_sku_count": {"name": "duplicate_sku_count", "description": "The number of inventory items that share the same SKU with this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "harmonized_system_code": {"name": "harmonized_system_code", "description": "The harmonized system code of the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_history_url": {"name": "inventory_history_url", "description": "The URL that points to the inventory history for the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "legacy_resource_id": {"name": "legacy_resource_id", "description": "The ID of the corresponding resource in the REST Admin API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_id": {"name": "measurement_id", "description": "The unique identifier for the inventory item's measurement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_weight_value": {"name": "measurement_weight_value", "description": "The weight value of the inventory item's measurement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_weight_unit": {"name": "measurement_weight_unit", "description": "The unit of measurement for the inventory item's weight.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_tracked_editable_locked": {"name": "is_tracked_editable_locked", "description": "Indicates whether the 'tracked' field for the inventory item is locked from editing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracked_editable_reason": {"name": "tracked_editable_reason", "description": "Provides the reason why the 'tracked' field for the inventory item is locked from editing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unit_cost_amount": {"name": "unit_cost_amount", "description": "The unit cost associated with the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unit_cost_currency_code": {"name": "unit_cost_currency_code", "description": "Currency of the unit cost associated with the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code_of_origin": {"name": "country_code_of_origin", "description": "The country code (ISO 3166-1 alpha-2) of where the item came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_shipping_required": {"name": "is_shipping_required", "description": "(DEPRECATED 2025-01-06) Boolean representing whether a customer needs to provide a shipping address when placing an order containing the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_inventory_quantity_tracked": {"name": "is_inventory_quantity_tracked", "description": "Boolean representing whether inventory levels are tracked for the item. If true, then the inventory quantity changes are tracked by Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "can_deactivate": {"name": "can_deactivate", "description": "Indicates whether the inventory item can be deactivated at the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "deactivation_alert": {"name": "deactivation_alert", "description": "Provides an alert message when the inventory item is deactivated at the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the inventory level was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_created_at": {"name": "inventory_item_created_at", "description": "The date and time (ISO 8601 format) when the inventory item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_updated_at": {"name": "inventory_item_updated_at", "description": "The date and time (ISO 8601 format) when the inventory item was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_location_deleted": {"name": "is_location_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_location_active": {"name": "is_location_active", "description": "Boolean representing whether the location is active. If true, then the location can be used to sell products, stock inventory, and fulfill orders.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_1": {"name": "address_1", "description": "The location's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_2": {"name": "address_2", "description": "The optional second line of the location's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "city": {"name": "city", "description": "The city the location is in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "The country the location is in (two-letter code).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "The two-letter code (ISO 3166-1 alpha-2 format) corresponding to country the location is in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_created_at": {"name": "location_created_at", "description": "The date and time (ISO 8601 format) when the location was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_legacy_location": {"name": "is_legacy_location", "description": "Boolean representing whether this is a fulfillment service location. If true, then the location is a fulfillment service location.  If false, then the location was created by the merchant and isn't tied to a fulfillment service.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_name": {"name": "location_name", "description": "The name of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The phone number of the location. This value can contain special characters, such as - or +.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province": {"name": "province", "description": "The province, state, or district of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province_code": {"name": "province_code", "description": "The province, state, or district code (ISO 3166-2 alpha-2 format) of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_updated_at": {"name": "location_updated_at", "description": "The date and time (ISO 8601 format) when the location was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "zip": {"name": "zip", "description": "The zip or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_barcode": {"name": "variant_barcode", "description": "The barcode, UPC, or ISBN number for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_created_at": {"name": "variant_created_at", "description": "The date and time (ISO 8601 format) when the product variant was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_fulfillment_service": {"name": "variant_fulfillment_service", "description": "(DEPRECATED 2025-01-06) The fulfillment service associated with the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_grams": {"name": "variant_grams", "description": "(DEPRECATED 2025-01-06) The weight of the product variant in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_id": {"name": "variant_id", "description": "The unique numeric identifier for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_inventory_management": {"name": "variant_inventory_management", "description": "(DEPRECATED 2025-01-06) The fulfillment service that tracks the number of items in stock for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_inventory_policy": {"name": "variant_inventory_policy", "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_inventory_quantity": {"name": "variant_inventory_quantity", "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_option_1": {"name": "variant_option_1", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3. \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_option_2": {"name": "variant_option_2", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_option_3": {"name": "variant_option_3", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_price": {"name": "variant_price", "description": "The price of the product variant in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_media_id": {"name": "variant_media_id", "description": "The unique numeric identifier for a product variant's media.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "The unique numeric identifier for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_variant_taxable": {"name": "is_variant_taxable", "description": "Whether a tax is charged when the product variant is sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_tax_code": {"name": "variant_tax_code", "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_title": {"name": "variant_title", "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_updated_at": {"name": "variant_updated_at", "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_weight": {"name": "variant_weight", "description": "(DEPRECATED 2025-01-06) The weight of the product variant in the unit system specified with weight_unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_weight_unit": {"name": "variant_weight_unit", "description": "(DEPRECATED 2025-01-06) The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_is_available_for_sale": {"name": "variant_is_available_for_sale", "description": "Indicates whether the product variant is available for sale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_display_name": {"name": "variant_display_name", "description": "The display name of the variant, based on the product's title and variant's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_legacy_resource_id": {"name": "variant_legacy_resource_id", "description": "The ID of the corresponding resource in the REST Admin API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_has_components_required": {"name": "variant_has_components_required", "description": "Indicates whether a product variant requires components.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_sellable_online_quantity": {"name": "variant_sellable_online_quantity", "description": "The total sellable quantity of the variant for online channels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_sold": {"name": "subtotal_sold", "description": "Total amount (monetary, in shop currency) sold from the inventory level. Includes refunds.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_sold": {"name": "quantity_sold", "description": "Total quantity sold from the inventory level. Includes refunds.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_distinct_orders": {"name": "count_distinct_orders", "description": "The number of distinct orders placed from this inventory level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_distinct_customers": {"name": "count_distinct_customers", "description": "The number of distinct customers (based on customer_id) that have placed orders against this inventory level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_distinct_customer_emails": {"name": "count_distinct_customer_emails", "description": "The number of distinct customer emails that have placed orders against this inventory level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "The timetamp of the first order against this inventory level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_order_timestamp": {"name": "last_order_timestamp", "description": "The timestamp of the first order against this inventory level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_sold_refunds": {"name": "subtotal_sold_refunds", "description": "The monetary amount (in shop currency) of inventory level goods that have been refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_sold_refunds": {"name": "quantity_sold_refunds", "description": "The quantity of inventory level goods that have been refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "net_subtotal_sold": {"name": "net_subtotal_sold", "description": "Net monetary amount sold (in shop currency) from the inventory level. Excludes refunds.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "net_quantity_sold": {"name": "net_quantity_sold", "description": "Net quantity sold from this inventory level. Excludes refunds.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_pending": {"name": "count_fulfillment_pending", "description": "Count of currently pending distinct fulfillments for this inventory level. \"Pending\" = Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to 'open' or 'success'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_open": {"name": "count_fulfillment_open", "description": "Count of currently open distinct fulfillments for this inventory level. \"Open\" = The fulfillment has been acknowledged by the service and is in processing.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_success": {"name": "count_fulfillment_success", "description": "Count of successful distinct fulfillments for this inventory level. \"Success\" = The fulfillment was successful.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_cancelled": {"name": "count_fulfillment_cancelled", "description": "Count of cancelled distinct fulfillments for this inventory level. \"Cancelled\" = The fulfillment was cancelled.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_error": {"name": "count_fulfillment_error", "description": "Count of distinct fulfillments for this inventory level that encountered an error. \"Error\" = There was an error with the fulfillment request.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_failure": {"name": "count_fulfillment_failure", "description": "Count of distinct fulfillments for this inventory level that failed. \"Failure\" = The fulfillment request failed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "available_quantity": {"name": "available_quantity", "description": "The available quantity that a merchant can sell, determined by coalescing the `quantity` where  inventory_state_name = 'available' from `stg_shopify__inventory_quantity`and `available_quantity`  from the deprecated `stg_shopify__inventory_level`. Returns null if the inventory item is not tracked.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "incoming_quantity": {"name": "incoming_quantity", "description": "The incoming quantity on its way to a merchant's location. Returns null if the inventory item is not tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "on_hand_quantity": {"name": "on_hand_quantity", "description": "The total number of units that are physically at a location. The `on_hand` state equals the sum of inventory quantities that  are in the `available`, `committed`, `reserved`, `damaged`, `safety_stock`, and `quality_control` states. Returns null if the inventory item is not tracked.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "committed_quantity": {"name": "committed_quantity", "description": "The number of units that are part of a placed order but aren't fulfilled. When a draft order is created, the inventory isn't committed until the draft order is completed and an order is created. Returns null if the inventory item is not tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "reserved_quantity": {"name": "reserved_quantity", "description": "The on-hand units that are temporarily set aside. Returns null if the inventory item is not tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "damaged_quantity": {"name": "damaged_quantity", "description": "The on-hand units that aren't sellable or usable due to damage. Returns null if the inventory item is not tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "safety_stock_quantity": {"name": "safety_stock_quantity", "description": "The on-hand units that are set aside to help guard against overselling. Returns null if the inventory item is not tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quality_control_quantity": {"name": "quality_control_quantity", "description": "The on-hand units that aren't sellable because they're currently in inspection for quality purposes. Returns null if the inventory item is not tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.637766, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__inventory_levels\"", "raw_code": "with inventory_level as (\n\n    select *\n    from {{ var('shopify_inventory_level') }}\n), \n\ninventory_item as (\n\n    select *\n    from {{ var('shopify_inventory_item') }}\n),\n\ninventory_quantity as (\n\n    select *\n    from {{ var('shopify_inventory_quantity') }}\n),\n\nlocation as (\n\n    select *\n    from {{ var('shopify_location') }}\n),\n\nproduct_variant as (\n\n    select *\n    from {{ var('shopify_product_variant') }}\n),\n\nproduct as (\n\n    select *\n    from {{ var('shopify_product') }}\n),\n\ninventory_level_aggregated as (\n\n    select *\n    from {{ ref('int_shopify__inventory_level__aggregates') }}\n),\n\n{% if var('shopify_using_product_variant_media', False) %}\nproduct_variant_media as (\n\n    select *\n    from {{ var('shopify_product_variant_media') }}\n),\n{% endif %}\n\ninventory_quantity_aggregated as (\n\n    select\n        inventory_quantity.source_relation,\n        inventory_quantity.inventory_item_id,\n        inventory_quantity.inventory_level_id\n\n        {% set inventory_states = var('shopify_inventory_states', ['incoming', 'on_hand', 'available', 'committed', 'reserved', 'damaged', 'safety_stock', 'quality_control']) -%}\n        {% for inventory_state in inventory_states -%}\n            , sum(case when lower(inventory_state_name) = {{ \"'\" ~ inventory_state|lower ~ \"'\" }}\n                {% if inventory_state|lower == 'available ' -%}\n                then coalesce(inventory_quantity.quantity, inventory_level.available_quantity)\n                {% else -%}\n                then inventory_quantity.quantity\n                {% endif -%}\n                end) as {{ inventory_state }}_quantity\n        {% endfor -%}\n\n    from inventory_quantity\n    left join inventory_level\n        on inventory_quantity.inventory_item_id = inventory_level.inventory_item_id\n        and inventory_quantity.inventory_level_id = inventory_level.inventory_level_id\n        and inventory_quantity.source_relation = inventory_level.source_relation\n    group by 1,2,3\n),\n\njoined_info as (\n\n    select \n        inventory_level.inventory_level_id,\n        inventory_level.inventory_item_id,\n        inventory_level.location_id,\n        inventory_level.can_deactivate,\n        inventory_level.deactivation_alert,\n        inventory_level.created_at,\n        inventory_level.updated_at,\n        inventory_level._fivetran_synced,\n        inventory_level.source_relation,\n\n        inventory_item.sku,\n        inventory_item.is_deleted as is_inventory_item_deleted,\n        inventory_item.unit_cost_amount,\n        inventory_item.unit_cost_currency_code,\n        inventory_item.country_code_of_origin,\n        inventory_item.province_code_of_origin,\n        inventory_item.is_shipping_required,\n        inventory_item.is_inventory_quantity_tracked,\n        inventory_item.created_at as inventory_item_created_at,\n        inventory_item.updated_at as inventory_item_updated_at,\n        inventory_item.duplicate_sku_count,\n        inventory_item.harmonized_system_code,\n        inventory_item.inventory_history_url,\n        inventory_item.legacy_resource_id,\n        inventory_item.measurement_id,\n        inventory_item.measurement_weight_value,\n        inventory_item.measurement_weight_unit,\n        inventory_item.is_tracked_editable_locked,\n        inventory_item.tracked_editable_reason,\n\n        location.name as location_name, \n        location.is_deleted as is_location_deleted,\n        location.is_active as is_location_active,\n        location.address_1,\n        location.address_2,\n        location.city,\n        location.country,\n        location.country_code,\n        location.is_legacy as is_legacy_location,\n        location.province,\n        location.province_code,\n        location.phone,\n        location.zip,\n        location.created_at as location_created_at,\n        location.updated_at as location_updated_at,\n\n        product_variant.variant_id,\n        product_variant.product_id,\n        product_variant.title as variant_title,\n        product_variant.inventory_policy as variant_inventory_policy,\n        product_variant.price as variant_price,\n        \n        {% if var('shopify_using_product_variant_media', False) %}\n        product_variant_media.media_id as variant_media_id,\n        {% endif %}\n\n        product_variant.fulfillment_service as variant_fulfillment_service,\n        product_variant.inventory_management as variant_inventory_management,\n        product_variant.is_taxable as is_variant_taxable,\n        product_variant.barcode as variant_barcode,\n        product_variant.grams as variant_grams, \n        product_variant.inventory_quantity as variant_inventory_quantity,\n        product_variant.weight as variant_weight,\n        product_variant.weight_unit as variant_weight_unit,\n        product_variant.option_1 as variant_option_1,\n        product_variant.option_2 as variant_option_2,\n        product_variant.option_3 as variant_option_3,\n        product_variant.tax_code as variant_tax_code,\n        product_variant.created_timestamp as variant_created_at,\n        product_variant.updated_timestamp as variant_updated_at,\n        product_variant.is_available_for_sale as variant_is_available_for_sale,\n        product_variant.display_name as variant_display_name,\n        product_variant.legacy_resource_id as variant_legacy_resource_id,\n        product_variant.has_components_required as variant_has_components_required,\n        product_variant.sellable_online_quantity as variant_sellable_online_quantity\n\n        {{ fivetran_utils.persist_pass_through_columns('product_variant_pass_through_columns', identifier='product_variant') }}\n\n    from inventory_level\n    join inventory_item \n        on inventory_level.inventory_item_id = inventory_item.inventory_item_id \n        and inventory_level.source_relation = inventory_item.source_relation \n    join location \n        on inventory_level.location_id = location.location_id \n        and inventory_level.source_relation = location.source_relation \n    join product_variant \n        on inventory_item.inventory_item_id = product_variant.inventory_item_id \n        and inventory_item.source_relation = product_variant.source_relation\n\n    {% if var('shopify_using_product_variant_media', False) %}\n    join product_variant_media \n        on product_variant.variant_id = product_variant_media.product_variant_id\n        and product_variant.source_relation = product_variant_media.source_relation\n    {% endif %}\n),\n\njoined_aggregates as (\n\n    select \n        joined_info.*,\n        coalesce(inventory_level_aggregated.subtotal_sold, 0) as subtotal_sold,\n        coalesce(inventory_level_aggregated.quantity_sold, 0) as quantity_sold,\n        coalesce(inventory_level_aggregated.count_distinct_orders, 0) as count_distinct_orders,\n        coalesce(inventory_level_aggregated.count_distinct_customers, 0) as count_distinct_customers,\n        coalesce(inventory_level_aggregated.count_distinct_customer_emails, 0) as count_distinct_customer_emails,\n        inventory_level_aggregated.first_order_timestamp,\n        inventory_level_aggregated.last_order_timestamp,\n        coalesce(inventory_level_aggregated.subtotal_sold_refunds, 0) as subtotal_sold_refunds,\n        coalesce(inventory_level_aggregated.quantity_sold_refunds, 0) as quantity_sold_refunds\n\n        {% for status in ['pending', 'open', 'success', 'cancelled', 'error', 'failure'] %}\n        , coalesce(inventory_level_aggregated.count_fulfillment_{{ status }}, 0) as count_fulfillment_{{ status }}\n        {% endfor %}\n\n        {% for inventory_state in inventory_states -%}\n        , inventory_quantity_aggregated.{{ inventory_state }}_quantity\n        {% endfor -%}\n\n    from joined_info\n    left join inventory_level_aggregated\n        on joined_info.location_id = inventory_level_aggregated.location_id\n        and joined_info.variant_id = inventory_level_aggregated.variant_id\n        and joined_info.source_relation = inventory_level_aggregated.source_relation\n    left join inventory_quantity_aggregated\n        on joined_info.inventory_item_id = inventory_quantity_aggregated.inventory_item_id\n        and joined_info.inventory_level_id = inventory_quantity_aggregated.inventory_level_id\n        and joined_info.source_relation = inventory_quantity_aggregated.source_relation\n),\n\nfinal as (\n\n    select \n        *,\n        subtotal_sold - subtotal_sold_refunds as net_subtotal_sold,\n        quantity_sold - quantity_sold_refunds as net_quantity_sold\n    from joined_aggregates\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__inventory_level", "package": null, "version": null}, {"name": "stg_shopify__inventory_item", "package": null, "version": null}, {"name": "stg_shopify__inventory_quantity", "package": null, "version": null}, {"name": "stg_shopify__location", "package": null, "version": null}, {"name": "stg_shopify__product_variant", "package": null, "version": null}, {"name": "stg_shopify__product", "package": null, "version": null}, {"name": "int_shopify__inventory_level__aggregates", "package": null, "version": null}, {"name": "stg_shopify__product_variant_media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns"], "nodes": ["model.shopify_source.stg_shopify__inventory_level", "model.shopify_source.stg_shopify__inventory_item", "model.shopify_source.stg_shopify__inventory_quantity", "model.shopify_source.stg_shopify__location", "model.shopify_source.stg_shopify__product_variant", "model.shopify_source.stg_shopify__product", "model.shopify.int_shopify__inventory_level__aggregates", "model.shopify_source.stg_shopify__product_variant_media"]}, "compiled_path": "target/compiled/shopify/models/shopify__inventory_levels.sql", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), inventory_level as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_level\"\n), \n\ninventory_item as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_item\"\n),\n\ninventory_quantity as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_quantity\"\n),\n\nlocation as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__location\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"\n),\n\nproduct as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"\n),\n\ninventory_level_aggregated as (\n\n    select *\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n),\n\n\nproduct_variant_media as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_media\"\n),\n\n\ninventory_quantity_aggregated as (\n\n    select\n        inventory_quantity.source_relation,\n        inventory_quantity.inventory_item_id,\n        inventory_quantity.inventory_level_id\n\n        , sum(case when lower(inventory_state_name) = 'incoming'\n                then inventory_quantity.quantity\n                end) as incoming_quantity\n        , sum(case when lower(inventory_state_name) = 'on_hand'\n                then inventory_quantity.quantity\n                end) as on_hand_quantity\n        , sum(case when lower(inventory_state_name) = 'available'\n                then inventory_quantity.quantity\n                end) as available_quantity\n        , sum(case when lower(inventory_state_name) = 'committed'\n                then inventory_quantity.quantity\n                end) as committed_quantity\n        , sum(case when lower(inventory_state_name) = 'reserved'\n                then inventory_quantity.quantity\n                end) as reserved_quantity\n        , sum(case when lower(inventory_state_name) = 'damaged'\n                then inventory_quantity.quantity\n                end) as damaged_quantity\n        , sum(case when lower(inventory_state_name) = 'safety_stock'\n                then inventory_quantity.quantity\n                end) as safety_stock_quantity\n        , sum(case when lower(inventory_state_name) = 'quality_control'\n                then inventory_quantity.quantity\n                end) as quality_control_quantity\n        from inventory_quantity\n    left join inventory_level\n        on inventory_quantity.inventory_item_id = inventory_level.inventory_item_id\n        and inventory_quantity.inventory_level_id = inventory_level.inventory_level_id\n        and inventory_quantity.source_relation = inventory_level.source_relation\n    group by 1,2,3\n),\n\njoined_info as (\n\n    select \n        inventory_level.inventory_level_id,\n        inventory_level.inventory_item_id,\n        inventory_level.location_id,\n        inventory_level.can_deactivate,\n        inventory_level.deactivation_alert,\n        inventory_level.created_at,\n        inventory_level.updated_at,\n        inventory_level._fivetran_synced,\n        inventory_level.source_relation,\n\n        inventory_item.sku,\n        inventory_item.is_deleted as is_inventory_item_deleted,\n        inventory_item.unit_cost_amount,\n        inventory_item.unit_cost_currency_code,\n        inventory_item.country_code_of_origin,\n        inventory_item.province_code_of_origin,\n        inventory_item.is_shipping_required,\n        inventory_item.is_inventory_quantity_tracked,\n        inventory_item.created_at as inventory_item_created_at,\n        inventory_item.updated_at as inventory_item_updated_at,\n        inventory_item.duplicate_sku_count,\n        inventory_item.harmonized_system_code,\n        inventory_item.inventory_history_url,\n        inventory_item.legacy_resource_id,\n        inventory_item.measurement_id,\n        inventory_item.measurement_weight_value,\n        inventory_item.measurement_weight_unit,\n        inventory_item.is_tracked_editable_locked,\n        inventory_item.tracked_editable_reason,\n\n        location.name as location_name, \n        location.is_deleted as is_location_deleted,\n        location.is_active as is_location_active,\n        location.address_1,\n        location.address_2,\n        location.city,\n        location.country,\n        location.country_code,\n        location.is_legacy as is_legacy_location,\n        location.province,\n        location.province_code,\n        location.phone,\n        location.zip,\n        location.created_at as location_created_at,\n        location.updated_at as location_updated_at,\n\n        product_variant.variant_id,\n        product_variant.product_id,\n        product_variant.title as variant_title,\n        product_variant.inventory_policy as variant_inventory_policy,\n        product_variant.price as variant_price,\n        \n        \n        product_variant_media.media_id as variant_media_id,\n        \n\n        product_variant.fulfillment_service as variant_fulfillment_service,\n        product_variant.inventory_management as variant_inventory_management,\n        product_variant.is_taxable as is_variant_taxable,\n        product_variant.barcode as variant_barcode,\n        product_variant.grams as variant_grams, \n        product_variant.inventory_quantity as variant_inventory_quantity,\n        product_variant.weight as variant_weight,\n        product_variant.weight_unit as variant_weight_unit,\n        product_variant.option_1 as variant_option_1,\n        product_variant.option_2 as variant_option_2,\n        product_variant.option_3 as variant_option_3,\n        product_variant.tax_code as variant_tax_code,\n        product_variant.created_timestamp as variant_created_at,\n        product_variant.updated_timestamp as variant_updated_at,\n        product_variant.is_available_for_sale as variant_is_available_for_sale,\n        product_variant.display_name as variant_display_name,\n        product_variant.legacy_resource_id as variant_legacy_resource_id,\n        product_variant.has_components_required as variant_has_components_required,\n        product_variant.sellable_online_quantity as variant_sellable_online_quantity\n\n        \n\n\n\n\n\n    from inventory_level\n    join inventory_item \n        on inventory_level.inventory_item_id = inventory_item.inventory_item_id \n        and inventory_level.source_relation = inventory_item.source_relation \n    join location \n        on inventory_level.location_id = location.location_id \n        and inventory_level.source_relation = location.source_relation \n    join product_variant \n        on inventory_item.inventory_item_id = product_variant.inventory_item_id \n        and inventory_item.source_relation = product_variant.source_relation\n\n    \n    join product_variant_media \n        on product_variant.variant_id = product_variant_media.product_variant_id\n        and product_variant.source_relation = product_variant_media.source_relation\n    \n),\n\njoined_aggregates as (\n\n    select \n        joined_info.*,\n        coalesce(inventory_level_aggregated.subtotal_sold, 0) as subtotal_sold,\n        coalesce(inventory_level_aggregated.quantity_sold, 0) as quantity_sold,\n        coalesce(inventory_level_aggregated.count_distinct_orders, 0) as count_distinct_orders,\n        coalesce(inventory_level_aggregated.count_distinct_customers, 0) as count_distinct_customers,\n        coalesce(inventory_level_aggregated.count_distinct_customer_emails, 0) as count_distinct_customer_emails,\n        inventory_level_aggregated.first_order_timestamp,\n        inventory_level_aggregated.last_order_timestamp,\n        coalesce(inventory_level_aggregated.subtotal_sold_refunds, 0) as subtotal_sold_refunds,\n        coalesce(inventory_level_aggregated.quantity_sold_refunds, 0) as quantity_sold_refunds\n\n        \n        , coalesce(inventory_level_aggregated.count_fulfillment_pending, 0) as count_fulfillment_pending\n        \n        , coalesce(inventory_level_aggregated.count_fulfillment_open, 0) as count_fulfillment_open\n        \n        , coalesce(inventory_level_aggregated.count_fulfillment_success, 0) as count_fulfillment_success\n        \n        , coalesce(inventory_level_aggregated.count_fulfillment_cancelled, 0) as count_fulfillment_cancelled\n        \n        , coalesce(inventory_level_aggregated.count_fulfillment_error, 0) as count_fulfillment_error\n        \n        , coalesce(inventory_level_aggregated.count_fulfillment_failure, 0) as count_fulfillment_failure\n        \n\n        , inventory_quantity_aggregated.incoming_quantity\n        , inventory_quantity_aggregated.on_hand_quantity\n        , inventory_quantity_aggregated.available_quantity\n        , inventory_quantity_aggregated.committed_quantity\n        , inventory_quantity_aggregated.reserved_quantity\n        , inventory_quantity_aggregated.damaged_quantity\n        , inventory_quantity_aggregated.safety_stock_quantity\n        , inventory_quantity_aggregated.quality_control_quantity\n        from joined_info\n    left join inventory_level_aggregated\n        on joined_info.location_id = inventory_level_aggregated.location_id\n        and joined_info.variant_id = inventory_level_aggregated.variant_id\n        and joined_info.source_relation = inventory_level_aggregated.source_relation\n    left join inventory_quantity_aggregated\n        on joined_info.inventory_item_id = inventory_quantity_aggregated.inventory_item_id\n        and joined_info.inventory_level_id = inventory_quantity_aggregated.inventory_level_id\n        and joined_info.source_relation = inventory_quantity_aggregated.source_relation\n),\n\nfinal as (\n\n    select \n        *,\n        subtotal_sold - subtotal_sold_refunds as net_subtotal_sold,\n        quantity_sold - quantity_sold_refunds as net_quantity_sold\n    from joined_aggregates\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__orders__order_refunds", "sql": " __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n)"}, {"id": "model.shopify.int_shopify__inventory_level__aggregates", "sql": " __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["inventory_item_id", "location_id"], "time_spine": null}, "model.shopify.shopify__orders": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__orders", "resource_type": "model", "package_name": "shopify", "path": "shopify__orders.sql", "original_file_path": "models/shopify__orders.sql", "unique_id": "model.shopify.shopify__orders", "fqn": ["shopify", "shopify__orders"], "alias": "shopify__orders", "checksum": {"name": "sha256", "checksum": "ae65b84e25a8ac17050fc34dfac3a68d55826c6ef8601434e8bebaaf1d006572"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents an order in Shopify.", "columns": {"orders_unique_key": {"name": "orders_unique_key", "description": "Unique key representing an order. Hashed on 'order_id' and 'source_relation'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "app_id": {"name": "app_id", "description": "The ID of the app that created the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_1": {"name": "billing_address_address_1", "description": "The street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_2": {"name": "billing_address_address_2", "description": "An optional additional field for the street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_city": {"name": "billing_address_city", "description": "The city, town, or village of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_company": {"name": "billing_address_company", "description": "The company of the person associated with the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country": {"name": "billing_address_country", "description": "The name of the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country_code": {"name": "billing_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_first_name": {"name": "billing_address_first_name", "description": "The first name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_last_name": {"name": "billing_address_last_name", "description": "The last name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_latitude": {"name": "billing_address_latitude", "description": "The latitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_longitude": {"name": "billing_address_longitude", "description": "The longitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_name": {"name": "billing_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_phone": {"name": "billing_address_phone", "description": "The phone number at the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province": {"name": "billing_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province_code": {"name": "billing_address_province_code", "description": "The two-letter abbreviation of the region of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_zip": {"name": "billing_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "browser_ip": {"name": "browser_ip", "description": "The IP address of the browser used by the customer when they placed the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_buyer_accepted_marketing": {"name": "has_buyer_accepted_marketing", "description": "Whether the customer consented to receive email updates from the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cancel_reason": {"name": "cancel_reason", "description": "The reason why the order was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cancelled_timestamp": {"name": "cancelled_timestamp", "description": "The date and time when the order was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cart_token": {"name": "cart_token", "description": "The ID of the cart that's associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "closed_timestamp": {"name": "closed_timestamp", "description": "The date and time when the order was closed (archived).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_timestamp": {"name": "created_timestamp", "description": "The autogenerated date and time when the order was created in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code for the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "The ID of the order's customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The customer's email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "financial_status": {"name": "financial_status", "description": "The status of payments associated with the order. Can only be set when the order is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_status": {"name": "fulfillment_status", "description": "The order's status in terms of fulfilled line items.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "landing_site_base_url": {"name": "landing_site_base_url", "description": "The URL for the page where the buyer landed when they entered the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the order was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "An optional note that a shop owner can attach to the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number": {"name": "number", "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_number": {"name": "order_number", "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "referring_site": {"name": "referring_site", "description": "The website where the customer clicked a link to the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_1": {"name": "shipping_address_address_1", "description": "The street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_2": {"name": "shipping_address_address_2", "description": "An optional additional field for the street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_city": {"name": "shipping_address_city", "description": "The city, town, or village of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_company": {"name": "shipping_address_company", "description": "The company of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country": {"name": "shipping_address_country", "description": "The name of the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_first_name": {"name": "shipping_address_first_name", "description": "The first name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_last_name": {"name": "shipping_address_last_name", "description": "The last name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_latitude": {"name": "shipping_address_latitude", "description": "The latitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_longitude": {"name": "shipping_address_longitude", "description": "The longitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_name": {"name": "shipping_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province": {"name": "shipping_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province_code": {"name": "shipping_address_province_code", "description": "The two-letter abbreviation of the region of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_zip": {"name": "shipping_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_name": {"name": "source_name", "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The ID of the order placed on the originating platform. This value doesn't correspond to the Shopify ID that's generated from a completed draft.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_price": {"name": "subtotal_price", "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_taxes_included": {"name": "has_taxes_included", "description": "Whether taxes are included in the order subtotal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_test_order": {"name": "is_test_order", "description": "Whether this is a test order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "token": {"name": "token", "description": "A unique token for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discounts": {"name": "total_discounts", "description": "The total discounts applied to the price of the order in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of all line item prices in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price": {"name": "total_price", "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax": {"name": "total_tax", "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_weight": {"name": "total_weight", "description": "The sum of all line item weights in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time (ISO 8601 format) when the order was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "line_item_count": {"name": "line_item_count", "description": "Number of line items included in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_order_seq_number": {"name": "customer_order_seq_number", "description": "The sequential number of the order as it relates to the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "new_vs_repeat": {"name": "new_vs_repeat", "description": "Whether the order was a new or repeat order for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_cost": {"name": "shipping_cost", "description": "The shipping cost of the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_adjustment_amount": {"name": "order_adjustment_amount", "description": "Total adjustment amount applied to the order in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_adjustment_tax_amount": {"name": "order_adjustment_tax_amount", "description": "Total tax applied to the adjustment on the order in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_subtotal": {"name": "refund_subtotal", "description": "Total refund amount applied to the order in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_total_tax": {"name": "refund_total_tax", "description": "Total tax applied to the refund on the order in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_adjusted_total": {"name": "order_adjusted_total", "description": "Order total adjusted for refunds and other adjustments. The calculation used for this field is as follows: total price listed on the original order (including shipping costs and discounts) + adjustments + adjustments tax - total refunds - refunds tax The order_adjusted_total will equate to the total sales - refunds listed within the transactions table for the order (after currency exchange).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_token": {"name": "checkout_token", "description": "The checkout token applied to the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_shipping_price_set": {"name": "total_shipping_price_set", "description": "The total shipping price set to the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_total_shipping_tax": {"name": "order_total_shipping_tax", "description": "Total shipping tax attributed to the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_tags": {"name": "order_tags", "description": "List of tags associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_url_tags": {"name": "order_url_tags", "description": "List of url tags associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number_of_fulfillments": {"name": "number_of_fulfillments", "description": "Total fulfillments for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_services": {"name": "fulfillment_services", "description": "List of fulfillment services for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_companies": {"name": "tracking_companies", "description": "List of tracking companies for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_numbers": {"name": "tracking_numbers", "description": "List of tracking numbers for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tip_received": {"name": "total_tip_received", "description": "The sum of all the tips in the order in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_id": {"name": "checkout_id", "description": "The ID for the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_details_user_agent": {"name": "client_details_user_agent", "description": "Details of the browsing client, including software and operating versions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_locale": {"name": "customer_locale", "description": "The two or three-letter language code, optionally followed by a region modifier. Example values - en, en-CA.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_status_url": {"name": "order_status_url", "description": "The URL pointing to the order status web page, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "presentment_currency": {"name": "presentment_currency", "description": "The three-letter code (ISO 4217 format) of the currency that the customer used at checkout. For the shop's default currency, see `currency`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_deleted": {"name": "is_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discounts_set": {"name": "total_discounts_set", "description": "The total discounts applied to the price of the order in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_line_items_price_set": {"name": "total_line_items_price_set", "description": "The total of all line item prices in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price_set": {"name": "total_price_set", "description": "The total price of the order in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax_set": {"name": "total_tax_set", "description": "The total tax applied to the order in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_confirmed": {"name": "is_confirmed", "description": "Whether the order is confirmed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_amount": {"name": "shipping_discount_amount", "description": "The total amount of discount (in shop currency) allocated toward shipping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "percentage_calc_discount_amount": {"name": "percentage_calc_discount_amount", "description": "The total amount of discount (in shop currency) allocated via a percentage-based discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fixed_amount_discount_amount": {"name": "fixed_amount_discount_amount", "description": "The total amount of discount (in shop currency) allocated via a fixed-amount discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_discount_codes_applied": {"name": "count_discount_codes_applied", "description": "Distinct discount codes applied on the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.573039, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"", "raw_code": "with orders as (\n\n    select \n        *,\n        {{ dbt_utils.generate_surrogate_key(['source_relation', 'order_id']) }} as orders_unique_key\n    from {{ var('shopify_order') }}\n \n), order_lines as (\n\n    select *\n    from {{ ref('shopify__orders__order_line_aggregates') }}\n\n), order_adjustments as (\n\n    select *\n    from {{ var('shopify_order_adjustment') }}\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n), refunds as (\n\n    select *\n    from {{ ref('shopify__orders__order_refunds') }}\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n), order_discount_code as (\n    \n    select *\n    from {{ var('shopify_order_discount_code') }}\n\n), discount_aggregates as (\n\n    select \n        order_id,\n        source_relation,\n        sum(case when type = 'shipping' then amount else 0 end) as shipping_discount_amount,\n        sum(case when type = 'percentage' then amount else 0 end) as percentage_calc_discount_amount,\n        sum(case when type = 'fixed_amount' then amount else 0 end) as fixed_amount_discount_amount,\n        count(distinct code) as count_discount_codes_applied\n\n    from order_discount_code\n    group by 1,2\n\n), order_tag as (\n\n    select\n        order_id,\n        source_relation,\n        {{ fivetran_utils.string_agg(\"distinct cast(value as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as order_tags\n    \n    from {{ var('shopify_order_tag') }}\n    group by 1,2\n\n), order_url_tag as (\n\n    select\n        order_id,\n        source_relation,\n        {{ fivetran_utils.string_agg(\"distinct cast(value as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as order_url_tags\n    \n    from {{ var('shopify_order_url_tag') }}\n    group by 1,2\n\n), fulfillments as (\n\n    select \n        order_id,\n        source_relation,\n        count(fulfillment_id) as number_of_fulfillments,\n        {{ fivetran_utils.string_agg(\"distinct cast(service as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as fulfillment_services,\n        {{ fivetran_utils.string_agg(\"distinct cast(tracking_company as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as tracking_companies,\n        {{ fivetran_utils.string_agg(\"distinct cast(tracking_number as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as tracking_numbers\n\n    from {{ var('shopify_fulfillment') }}\n    group by 1,2\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast({{ fivetran_utils.json_parse(\"total_shipping_price_set\",[\"shop_money\",\"amount\"]) }} as {{ dbt.type_float() }}) ,0) as shipping_cost,\n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n\n        (orders.total_price\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)) as order_adjusted_total,\n        order_lines.line_item_count,\n\n        coalesce(discount_aggregates.shipping_discount_amount, 0) as shipping_discount_amount,\n        coalesce(discount_aggregates.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        coalesce(discount_aggregates.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        coalesce(discount_aggregates.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(order_lines.order_total_shipping_tax, 0) as order_total_shipping_tax,\n        order_tag.order_tags,\n        order_url_tag.order_url_tags,\n        fulfillments.number_of_fulfillments,\n        fulfillments.fulfillment_services,\n        fulfillments.tracking_companies,\n        fulfillments.tracking_numbers\n\n\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    left join discount_aggregates\n        on orders.order_id = discount_aggregates.order_id \n        and orders.source_relation = discount_aggregates.source_relation\n    left join order_tag\n        on orders.order_id = order_tag.order_id\n        and orders.source_relation = order_tag.source_relation\n    left join order_url_tag\n        on orders.order_id = order_url_tag.order_id\n        and orders.source_relation = order_url_tag.source_relation\n    left join fulfillments\n        on orders.order_id = fulfillments.order_id\n        and orders.source_relation = fulfillments.source_relation\n\n), windows as (\n\n    select \n        *,\n        row_number() over (\n            partition by {{ shopify.shopify_partition_by_cols('customer_id', 'source_relation') }}\n            order by created_timestamp) \n            as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "language": "sql", "refs": [{"name": "stg_shopify__order", "package": null, "version": null}, {"name": "shopify__orders__order_line_aggregates", "package": null, "version": null}, {"name": "stg_shopify__order_adjustment", "package": null, "version": null}, {"name": "shopify__orders__order_refunds", "package": null, "version": null}, {"name": "stg_shopify__order_discount_code", "package": null, "version": null}, {"name": "stg_shopify__order_tag", "package": null, "version": null}, {"name": "stg_shopify__order_url_tag", "package": null, "version": null}, {"name": "stg_shopify__fulfillment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.type_string", "macro.fivetran_utils.string_agg", "macro.fivetran_utils.json_parse", "macro.dbt.type_float", "macro.shopify.shopify_partition_by_cols"], "nodes": ["model.shopify_source.stg_shopify__order", "model.shopify.shopify__orders__order_line_aggregates", "model.shopify_source.stg_shopify__order_adjustment", "model.shopify.shopify__orders__order_refunds", "model.shopify_source.stg_shopify__order_discount_code", "model.shopify_source.stg_shopify__order_tag", "model.shopify_source.stg_shopify__order_url_tag", "model.shopify_source.stg_shopify__fulfillment"]}, "compiled_path": "target/compiled/shopify/models/shopify__orders.sql", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), orders as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as orders_unique_key\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n \n), order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), order_adjustments as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_adjustment\"\n\n), order_adjustments_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(amount) as order_adjustment_amount,\n        sum(tax_amount) as order_adjustment_tax_amount\n    from order_adjustments\n    group by 1,2\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refund_aggregates as (\n    select\n        order_id,\n        source_relation,\n        sum(subtotal) as refund_subtotal,\n        sum(total_tax) as refund_total_tax\n    from refunds\n    group by 1,2\n\n), order_discount_code as (\n    \n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"\n\n), discount_aggregates as (\n\n    select \n        order_id,\n        source_relation,\n        sum(case when type = 'shipping' then amount else 0 end) as shipping_discount_amount,\n        sum(case when type = 'percentage' then amount else 0 end) as percentage_calc_discount_amount,\n        sum(case when type = 'fixed_amount' then amount else 0 end) as fixed_amount_discount_amount,\n        count(distinct code) as count_discount_codes_applied\n\n    from order_discount_code\n    group by 1,2\n\n), order_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as order_tags\n    \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_tag\"\n    group by 1,2\n\n), order_url_tag as (\n\n    select\n        order_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as order_url_tags\n    \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_url_tag\"\n    group by 1,2\n\n), fulfillments as (\n\n    select \n        order_id,\n        source_relation,\n        count(fulfillment_id) as number_of_fulfillments,\n        \n    string_agg(distinct cast(service as TEXT), ', ')\n\n as fulfillment_services,\n        \n    string_agg(distinct cast(tracking_company as TEXT), ', ')\n\n as tracking_companies,\n        \n    string_agg(distinct cast(tracking_number as TEXT), ', ')\n\n as tracking_numbers\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"\n    group by 1,2\n\n), joined as (\n\n    select\n        orders.*,\n        coalesce(cast(\n\n  total_shipping_price_set::json #>> '{shop_money,amount}'\n\n as float) ,0) as shipping_cost,\n        \n        order_adjustments_aggregates.order_adjustment_amount,\n        order_adjustments_aggregates.order_adjustment_tax_amount,\n\n        refund_aggregates.refund_subtotal,\n        refund_aggregates.refund_total_tax,\n\n        (orders.total_price\n            + coalesce(order_adjustments_aggregates.order_adjustment_amount,0) + coalesce(order_adjustments_aggregates.order_adjustment_tax_amount,0) \n            - coalesce(refund_aggregates.refund_subtotal,0) - coalesce(refund_aggregates.refund_total_tax,0)) as order_adjusted_total,\n        order_lines.line_item_count,\n\n        coalesce(discount_aggregates.shipping_discount_amount, 0) as shipping_discount_amount,\n        coalesce(discount_aggregates.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        coalesce(discount_aggregates.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        coalesce(discount_aggregates.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(order_lines.order_total_shipping_tax, 0) as order_total_shipping_tax,\n        order_tag.order_tags,\n        order_url_tag.order_url_tags,\n        fulfillments.number_of_fulfillments,\n        fulfillments.fulfillment_services,\n        fulfillments.tracking_companies,\n        fulfillments.tracking_numbers\n\n\n    from orders\n    left join order_lines\n        on orders.order_id = order_lines.order_id\n        and orders.source_relation = order_lines.source_relation\n    left join refund_aggregates\n        on orders.order_id = refund_aggregates.order_id\n        and orders.source_relation = refund_aggregates.source_relation\n    left join order_adjustments_aggregates\n        on orders.order_id = order_adjustments_aggregates.order_id\n        and orders.source_relation = order_adjustments_aggregates.source_relation\n    left join discount_aggregates\n        on orders.order_id = discount_aggregates.order_id \n        and orders.source_relation = discount_aggregates.source_relation\n    left join order_tag\n        on orders.order_id = order_tag.order_id\n        and orders.source_relation = order_tag.source_relation\n    left join order_url_tag\n        on orders.order_id = order_url_tag.order_id\n        and orders.source_relation = order_url_tag.source_relation\n    left join fulfillments\n        on orders.order_id = fulfillments.order_id\n        and orders.source_relation = fulfillments.source_relation\n\n), windows as (\n\n    select \n        *,\n        row_number() over (\n            partition by \n\n\n    customer_id\n\n\n            order by created_timestamp) \n            as customer_order_seq_number\n    from joined\n\n), new_vs_repeat as (\n\n    select \n        *,\n        case \n            when customer_order_seq_number = 1 then 'new'\n            else 'repeat'\n        end as new_vs_repeat\n    from windows\n\n)\n\nselect *\nfrom new_vs_repeat", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__orders__order_refunds", "sql": " __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["orders_unique_key"], "time_spine": null}, "model.shopify.shopify__daily_shop": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__daily_shop", "resource_type": "model", "package_name": "shopify", "path": "shopify__daily_shop.sql", "original_file_path": "models/shopify__daily_shop.sql", "unique_id": "model.shopify.shopify__daily_shop", "fqn": ["shopify", "shopify__daily_shop"], "alias": "shopify__daily_shop", "checksum": {"name": "sha256", "checksum": "f9aec062eb481d13b417411a0940b98a7a169905c45ae9e7f122e341b4cfa1b2"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a day in your Shop, enriched with a suite of metrics.\n", "columns": {"date_day": {"name": "date_day", "description": "Day for which the shop activity is being measured.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shop_id": {"name": "shop_id", "description": "The ID for the shop. A 64-bit unsigned integer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The name of the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "domain": {"name": "domain", "description": "The shop's domain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_deleted": {"name": "is_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the shop's default currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "enabled_presentment_currencies": {"name": "enabled_presentment_currencies", "description": "An array of of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify Admin.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "iana_timezone": {"name": "iana_timezone", "description": "The name of the timezone assigned by the [IANA](https://www.iana.org/time-zones).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601) when the shop was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_orders": {"name": "count_orders", "description": "Count of the distinct orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_line_items": {"name": "count_line_items", "description": "Count of the line items included in orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_customers": {"name": "count_customers", "description": "Count of distinct customers who placed an order on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_customer_emails": {"name": "count_customer_emails", "description": "Count of distinct customer email addresses who placed an order on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_adjusted_total": {"name": "order_adjusted_total", "description": "Order total adjusted for refunds and other adjustments. The calculation used for this field is as follows: total price listed on the original order (including shipping costs and discounts) + adjustments + adjustments tax - total refunds - refunds tax The order_adjusted_total will equate to the total sales - refunds listed within the transactions table for the order (after currency exchange).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_order_value": {"name": "avg_order_value", "description": "Average adjusted total per order placed on this day (in shop currency).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_cost": {"name": "shipping_cost", "description": "The shipping cost of the orders placed on this day (in shop currency).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_adjustment_amount": {"name": "order_adjustment_amount", "description": "Total adjustment amount (in shop currency) applied to the orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_adjustment_tax_amount": {"name": "order_adjustment_tax_amount", "description": "Total tax applied to adjustments (in shop currency) on the orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_subtotal": {"name": "refund_subtotal", "description": "Total refund amount applied to the orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_total_tax": {"name": "refund_total_tax", "description": "Total tax applied to the refund on the orders placed on this day (in shop currency).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discounts": {"name": "total_discounts", "description": "The total amount of the discount allocated to this day's orders in the shop's currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_discount_amount": {"name": "shipping_discount_amount", "description": "The total amount of discount (in shop currency) allocated toward shipping for orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "percentage_calc_discount_amount": {"name": "percentage_calc_discount_amount", "description": "The total amount of discount (in shop currency) allocated via a percentage-based discount for orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fixed_amount_discount_amount": {"name": "fixed_amount_discount_amount", "description": "The total amount of discount (in shop currency) allocated via a fixed-amount discount for orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_discount_codes_applied": {"name": "count_discount_codes_applied", "description": "Distinct discount codes applied by customers on orders for this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_locations_ordered_from": {"name": "count_locations_ordered_from", "description": "Distinct locations with orders placed against them on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_orders_with_discounts": {"name": "count_orders_with_discounts", "description": "Count of orders in which a discount was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_orders_with_refunds": {"name": "count_orders_with_refunds", "description": "Count of orders in which there was a refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "Timestamp of the first order of the day for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_order_timestamp": {"name": "last_order_timestamp", "description": "Timestamp of the last order of the day for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_sold": {"name": "quantity_sold", "description": "Total quantity sold from the inventory level. Includes refunds.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_refunded": {"name": "quantity_refunded", "description": "The quantity of goods ORDERED on this day that have been refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_net": {"name": "quantity_net", "description": "Net quantity sold from this shop on this day. Excludes refunds.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_variants_sold": {"name": "count_variants_sold", "description": "Distinct product variants sold on this day (includes refunds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_products_sold": {"name": "count_products_sold", "description": "Distinct products sold on this day (includes refunds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_gift_cards_sold": {"name": "quantity_gift_cards_sold", "description": "Quantity of gift cards sold on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_requiring_shipping": {"name": "quantity_requiring_shipping", "description": "Quantity of goods sold on this day that require shipping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_abandoned_checkouts": {"name": "count_abandoned_checkouts", "description": "Count of abandoned checkouts on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_customers_abandoned_checkout": {"name": "count_customers_abandoned_checkout", "description": "Count of distinct customers who abandoned checkouts on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_customer_emails_abandoned_checkout": {"name": "count_customer_emails_abandoned_checkout", "description": "Count of distinct customer emails who abandoned checkouts on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_attempted_delivery": {"name": "count_fulfillment_attempted_delivery", "description": "Count of distinct fulfillments on this day where the delivery of the shipment was attempted, but unable to be completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_delivered": {"name": "count_fulfillment_delivered", "description": "Count of successful distinct fulfillments successfully delivered on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_failure": {"name": "count_fulfillment_failure", "description": "Count of failed distinct fulfillments on this day. Something went wrong when pulling tracking information for the shipment, such as the tracking number was invalid or the shipment was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_in_transit": {"name": "count_fulfillment_in_transit", "description": "Count of distinct fulfillments in transit on this day. Each shipment is being transported between shipping facilities on the way to its destination.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_out_for_delivery": {"name": "count_fulfillment_out_for_delivery", "description": "Count of distinct fulfillments being delivered to their final destination.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_ready_for_pickup": {"name": "count_fulfillment_ready_for_pickup", "description": "Count of distinct fulfillments ready for pickup at a shipping depot.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_picked_up": {"name": "count_fulfillment_picked_up", "description": "Count of distinct fulfillments successfully picked up on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_label_printed": {"name": "count_fulfillment_label_printed", "description": "Count of distinct fulfillments for which a purchased shipping label has been printed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_label_purchased": {"name": "count_fulfillment_label_purchased", "description": "Count of distinct fulfillments for which a shipping label has been purchased (but not printed yet) on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_confirmed": {"name": "count_fulfillment_confirmed", "description": "Count of confirmed distinct fulfillments. This is the default status when no other information is available about a fulfillment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_fulfillment_delayed": {"name": "count_fulfillment_delayed", "description": "Count of delayed distinct fulfillments.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_line_item_count": {"name": "avg_line_item_count", "description": "Average line item count for orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_discount": {"name": "avg_discount", "description": "Average total discount placed on orders on this day (in shop currency).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_shipping_discount_amount": {"name": "avg_shipping_discount_amount", "description": "Average discount amount (in shop currency) allocated toward shipping on orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_percentage_calc_discount_amount": {"name": "avg_percentage_calc_discount_amount", "description": "Average discount amount (in shop currency) allocated via a percentage-based-discount on orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_fixed_amount_discount_amount": {"name": "avg_fixed_amount_discount_amount", "description": "Average discount amount (in shop currency) allocated via a fixed-amount-discount on orders placed on this day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_quantity_sold": {"name": "avg_quantity_sold", "description": "Average quantity sold per order on this day. Includes refunds. (in shop currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_quantity_net": {"name": "avg_quantity_net", "description": "Average net quantity sold per order on this day. Excludes refunds. (in shop currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.647378, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__daily_shop\"", "raw_code": "with shop as (\n\n    select *\n    from {{ var('shopify_shop') }}\n),\n\ncalendar as (\n\n    select *\n    from {{ ref('shopify__calendar') }}\n    where cast({{ dbt.date_trunc('day','date_day') }} as date) = date_day\n),\n\ndaily_orders as (\n\n    select *\n    from {{ ref('int_shopify__daily_orders') }}\n),\n\n{% if var('shopify_using_abandoned_checkout', True) %}\ndaily_abandoned_checkouts as (\n\n    select *\n    from {{ ref('int_shopify__daily_abandoned_checkouts') }}\n),\n{% endif %}\n\n{% if var('shopify_using_fulfillment_event', false) %}\ndaily_fulfillment as (\n\n    select *\n    from {{ ref('int_shopify__daily_fulfillment') }}\n),\n{% endif %}\n\nshop_calendar as (\n\n    select\n        cast({{ dbt.date_trunc('day','calendar.date_day') }} as date) as date_day,\n        shop.shop_id,\n        shop.name,\n        shop.domain,\n        shop.is_deleted,\n        shop.currency,\n        shop.enabled_presentment_currencies,\n        shop.iana_timezone,\n        shop.created_at,\n        shop.source_relation\n\n    from calendar\n    join shop \n        on cast(shop.created_at as date) <= calendar.date_day\n),\n\nfinal as (\n\n    select \n        shop_calendar.*,\n\n        coalesce(daily_orders.count_orders, 0) as count_orders,\n        coalesce(daily_orders.count_line_items, 0) as count_line_items,\n        daily_orders.avg_line_item_count,\n        coalesce(daily_orders.count_customers, 0) as count_customers,\n        coalesce(daily_orders.count_customer_emails, 0) as count_customer_emails,\n        coalesce(daily_orders.order_adjusted_total, 0) as order_adjusted_total,\n        daily_orders.avg_order_value,\n        coalesce(daily_orders.shipping_cost, 0) as shipping_cost,\n        coalesce(daily_orders.order_adjustment_amount, 0) as order_adjustment_amount,\n        coalesce(daily_orders.order_adjustment_tax_amount, 0) as order_adjustment_tax_amount,\n        coalesce(daily_orders.refund_subtotal, 0) as refund_subtotal,\n        coalesce(daily_orders.refund_total_tax, 0) as refund_total_tax,\n        coalesce(daily_orders.total_discounts, 0) as total_discounts,\n        daily_orders.avg_discount,\n        coalesce(daily_orders.shipping_discount_amount, 0) as shipping_discount_amount,\n        daily_orders.avg_shipping_discount_amount,\n        coalesce(daily_orders.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        daily_orders.avg_percentage_calc_discount_amount,\n        coalesce(daily_orders.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        daily_orders.avg_fixed_amount_discount_amount,\n        coalesce(daily_orders.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(daily_orders.count_locations_ordered_from, 0) as count_locations_ordered_from,\n        coalesce(daily_orders.count_orders_with_discounts, 0) as count_orders_with_discounts,\n        coalesce(daily_orders.count_orders_with_refunds, 0) as count_orders_with_refunds,\n        daily_orders.first_order_timestamp,\n        daily_orders.last_order_timestamp,\n        coalesce(daily_orders.quantity_sold, 0) as quantity_sold,\n        coalesce(daily_orders.quantity_refunded, 0) as quantity_refunded,\n        coalesce(daily_orders.quantity_net, 0) as quantity_net,\n        daily_orders.avg_quantity_sold,\n        daily_orders.avg_quantity_net,\n        coalesce(daily_orders.count_variants_sold, 0) as count_variants_sold,\n        coalesce(daily_orders.count_products_sold, 0) as count_products_sold,\n        coalesce(daily_orders.quantity_gift_cards_sold, 0) as quantity_gift_cards_sold,\n        coalesce(daily_orders.quantity_requiring_shipping, 0) as quantity_requiring_shipping\n\n        {% if var('shopify_using_abandoned_checkout', True) %}\n        , coalesce(daily_abandoned_checkouts.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(daily_abandoned_checkouts.count_customers_abandoned_checkout, 0) as count_customers_abandoned_checkout,\n        coalesce(daily_abandoned_checkouts.count_customer_emails_abandoned_checkout, 0) as count_customer_emails_abandoned_checkout\n        {% endif %}\n\n        {% if var('shopify_using_fulfillment_event', false) %}\n            {% for status in ['attempted_delivery', 'delayed', 'delivered', 'failure', 'in_transit', 'out_for_delivery', 'ready_for_pickup', 'picked_up', 'label_printed', 'label_purchased', 'confirmed']%}\n        , coalesce(count_fulfillment_{{ status }}, 0) as count_fulfillment_{{ status }}\n            {% endfor %}\n        {% endif %}\n\n    from shop_calendar\n    left join daily_orders \n        on shop_calendar.source_relation = daily_orders.source_relation\n        and shop_calendar.date_day = daily_orders.date_day\n\n    {% if var('shopify_using_abandoned_checkout', True) %}\n    left join daily_abandoned_checkouts \n        on shop_calendar.source_relation = daily_abandoned_checkouts.source_relation\n        and shop_calendar.date_day = daily_abandoned_checkouts.date_day\n    {% endif %}\n\n    {% if var('shopify_using_fulfillment_event', false) %}\n    left join daily_fulfillment \n        on shop_calendar.source_relation = daily_fulfillment.source_relation\n        and shop_calendar.date_day = daily_fulfillment.date_day\n    {% endif %}\n    \n)\n\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__shop", "package": null, "version": null}, {"name": "shopify__calendar", "package": null, "version": null}, {"name": "int_shopify__daily_orders", "package": null, "version": null}, {"name": "int_shopify__daily_abandoned_checkouts", "package": null, "version": null}, {"name": "int_shopify__daily_fulfillment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc"], "nodes": ["model.shopify_source.stg_shopify__shop", "model.shopify.shopify__calendar", "model.shopify.int_shopify__daily_orders", "model.shopify.int_shopify__daily_abandoned_checkouts", "model.shopify.int_shopify__daily_fulfillment"]}, "compiled_path": "target/compiled/shopify/models/shopify__daily_shop.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__daily_orders as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_timestamp) as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast(date_trunc('day', orders.created_timestamp) as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_shopify__daily_abandoned_checkouts as (\n\n\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_at) as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates\n),  __dbt__cte__int_shopify__daily_fulfillment as (\n\n\nwith fulfillment_event as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_event\"\n),\n\nfulfillment_aggregates as (\n\n    select \n        source_relation,\n        cast(date_trunc('day', happened_at) as date) as date_day\n\n        \n        , count(distinct case when lower(status) = 'attempted_delivery' then fulfillment_id end) as count_fulfillment_attempted_delivery\n        \n        , count(distinct case when lower(status) = 'delayed' then fulfillment_id end) as count_fulfillment_delayed\n        \n        , count(distinct case when lower(status) = 'delivered' then fulfillment_id end) as count_fulfillment_delivered\n        \n        , count(distinct case when lower(status) = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n        , count(distinct case when lower(status) = 'in_transit' then fulfillment_id end) as count_fulfillment_in_transit\n        \n        , count(distinct case when lower(status) = 'out_for_delivery' then fulfillment_id end) as count_fulfillment_out_for_delivery\n        \n        , count(distinct case when lower(status) = 'ready_for_pickup' then fulfillment_id end) as count_fulfillment_ready_for_pickup\n        \n        , count(distinct case when lower(status) = 'picked_up' then fulfillment_id end) as count_fulfillment_picked_up\n        \n        , count(distinct case when lower(status) = 'label_printed' then fulfillment_id end) as count_fulfillment_label_printed\n        \n        , count(distinct case when lower(status) = 'label_purchased' then fulfillment_id end) as count_fulfillment_label_purchased\n        \n        , count(distinct case when lower(status) = 'confirmed' then fulfillment_id end) as count_fulfillment_confirmed\n        \n    \n    from fulfillment_event\n    group by 1,2\n\n)\n\nselect *\nfrom fulfillment_aggregates\n), shop as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__shop\"\n),\n\ncalendar as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__calendar\"\n    where cast(date_trunc('day', date_day) as date) = date_day\n),\n\ndaily_orders as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_orders\n),\n\n\ndaily_abandoned_checkouts as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_abandoned_checkouts\n),\n\n\n\ndaily_fulfillment as (\n\n    select *\n    from __dbt__cte__int_shopify__daily_fulfillment\n),\n\n\nshop_calendar as (\n\n    select\n        cast(date_trunc('day', calendar.date_day) as date) as date_day,\n        shop.shop_id,\n        shop.name,\n        shop.domain,\n        shop.is_deleted,\n        shop.currency,\n        shop.enabled_presentment_currencies,\n        shop.iana_timezone,\n        shop.created_at,\n        shop.source_relation\n\n    from calendar\n    join shop \n        on cast(shop.created_at as date) <= calendar.date_day\n),\n\nfinal as (\n\n    select \n        shop_calendar.*,\n\n        coalesce(daily_orders.count_orders, 0) as count_orders,\n        coalesce(daily_orders.count_line_items, 0) as count_line_items,\n        daily_orders.avg_line_item_count,\n        coalesce(daily_orders.count_customers, 0) as count_customers,\n        coalesce(daily_orders.count_customer_emails, 0) as count_customer_emails,\n        coalesce(daily_orders.order_adjusted_total, 0) as order_adjusted_total,\n        daily_orders.avg_order_value,\n        coalesce(daily_orders.shipping_cost, 0) as shipping_cost,\n        coalesce(daily_orders.order_adjustment_amount, 0) as order_adjustment_amount,\n        coalesce(daily_orders.order_adjustment_tax_amount, 0) as order_adjustment_tax_amount,\n        coalesce(daily_orders.refund_subtotal, 0) as refund_subtotal,\n        coalesce(daily_orders.refund_total_tax, 0) as refund_total_tax,\n        coalesce(daily_orders.total_discounts, 0) as total_discounts,\n        daily_orders.avg_discount,\n        coalesce(daily_orders.shipping_discount_amount, 0) as shipping_discount_amount,\n        daily_orders.avg_shipping_discount_amount,\n        coalesce(daily_orders.percentage_calc_discount_amount, 0) as percentage_calc_discount_amount,\n        daily_orders.avg_percentage_calc_discount_amount,\n        coalesce(daily_orders.fixed_amount_discount_amount, 0) as fixed_amount_discount_amount,\n        daily_orders.avg_fixed_amount_discount_amount,\n        coalesce(daily_orders.count_discount_codes_applied, 0) as count_discount_codes_applied,\n        coalesce(daily_orders.count_locations_ordered_from, 0) as count_locations_ordered_from,\n        coalesce(daily_orders.count_orders_with_discounts, 0) as count_orders_with_discounts,\n        coalesce(daily_orders.count_orders_with_refunds, 0) as count_orders_with_refunds,\n        daily_orders.first_order_timestamp,\n        daily_orders.last_order_timestamp,\n        coalesce(daily_orders.quantity_sold, 0) as quantity_sold,\n        coalesce(daily_orders.quantity_refunded, 0) as quantity_refunded,\n        coalesce(daily_orders.quantity_net, 0) as quantity_net,\n        daily_orders.avg_quantity_sold,\n        daily_orders.avg_quantity_net,\n        coalesce(daily_orders.count_variants_sold, 0) as count_variants_sold,\n        coalesce(daily_orders.count_products_sold, 0) as count_products_sold,\n        coalesce(daily_orders.quantity_gift_cards_sold, 0) as quantity_gift_cards_sold,\n        coalesce(daily_orders.quantity_requiring_shipping, 0) as quantity_requiring_shipping\n\n        \n        , coalesce(daily_abandoned_checkouts.count_abandoned_checkouts, 0) as count_abandoned_checkouts,\n        coalesce(daily_abandoned_checkouts.count_customers_abandoned_checkout, 0) as count_customers_abandoned_checkout,\n        coalesce(daily_abandoned_checkouts.count_customer_emails_abandoned_checkout, 0) as count_customer_emails_abandoned_checkout\n        \n\n        \n            \n        , coalesce(count_fulfillment_attempted_delivery, 0) as count_fulfillment_attempted_delivery\n            \n        , coalesce(count_fulfillment_delayed, 0) as count_fulfillment_delayed\n            \n        , coalesce(count_fulfillment_delivered, 0) as count_fulfillment_delivered\n            \n        , coalesce(count_fulfillment_failure, 0) as count_fulfillment_failure\n            \n        , coalesce(count_fulfillment_in_transit, 0) as count_fulfillment_in_transit\n            \n        , coalesce(count_fulfillment_out_for_delivery, 0) as count_fulfillment_out_for_delivery\n            \n        , coalesce(count_fulfillment_ready_for_pickup, 0) as count_fulfillment_ready_for_pickup\n            \n        , coalesce(count_fulfillment_picked_up, 0) as count_fulfillment_picked_up\n            \n        , coalesce(count_fulfillment_label_printed, 0) as count_fulfillment_label_printed\n            \n        , coalesce(count_fulfillment_label_purchased, 0) as count_fulfillment_label_purchased\n            \n        , coalesce(count_fulfillment_confirmed, 0) as count_fulfillment_confirmed\n            \n        \n\n    from shop_calendar\n    left join daily_orders \n        on shop_calendar.source_relation = daily_orders.source_relation\n        and shop_calendar.date_day = daily_orders.date_day\n\n    \n    left join daily_abandoned_checkouts \n        on shop_calendar.source_relation = daily_abandoned_checkouts.source_relation\n        and shop_calendar.date_day = daily_abandoned_checkouts.date_day\n    \n\n    \n    left join daily_fulfillment \n        on shop_calendar.source_relation = daily_fulfillment.source_relation\n        and shop_calendar.date_day = daily_fulfillment.date_day\n    \n    \n)\n\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__daily_orders", "sql": " __dbt__cte__int_shopify__daily_orders as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_timestamp) as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast(date_trunc('day', orders.created_timestamp) as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final\n)"}, {"id": "model.shopify.int_shopify__daily_abandoned_checkouts", "sql": " __dbt__cte__int_shopify__daily_abandoned_checkouts as (\n\n\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_at) as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates\n)"}, {"id": "model.shopify.int_shopify__daily_fulfillment", "sql": " __dbt__cte__int_shopify__daily_fulfillment as (\n\n\nwith fulfillment_event as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_event\"\n),\n\nfulfillment_aggregates as (\n\n    select \n        source_relation,\n        cast(date_trunc('day', happened_at) as date) as date_day\n\n        \n        , count(distinct case when lower(status) = 'attempted_delivery' then fulfillment_id end) as count_fulfillment_attempted_delivery\n        \n        , count(distinct case when lower(status) = 'delayed' then fulfillment_id end) as count_fulfillment_delayed\n        \n        , count(distinct case when lower(status) = 'delivered' then fulfillment_id end) as count_fulfillment_delivered\n        \n        , count(distinct case when lower(status) = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n        , count(distinct case when lower(status) = 'in_transit' then fulfillment_id end) as count_fulfillment_in_transit\n        \n        , count(distinct case when lower(status) = 'out_for_delivery' then fulfillment_id end) as count_fulfillment_out_for_delivery\n        \n        , count(distinct case when lower(status) = 'ready_for_pickup' then fulfillment_id end) as count_fulfillment_ready_for_pickup\n        \n        , count(distinct case when lower(status) = 'picked_up' then fulfillment_id end) as count_fulfillment_picked_up\n        \n        , count(distinct case when lower(status) = 'label_printed' then fulfillment_id end) as count_fulfillment_label_printed\n        \n        , count(distinct case when lower(status) = 'label_purchased' then fulfillment_id end) as count_fulfillment_label_purchased\n        \n        , count(distinct case when lower(status) = 'confirmed' then fulfillment_id end) as count_fulfillment_confirmed\n        \n    \n    from fulfillment_event\n    group by 1,2\n\n)\n\nselect *\nfrom fulfillment_aggregates\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.shopify__products": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__products", "resource_type": "model", "package_name": "shopify", "path": "shopify__products.sql", "original_file_path": "models/shopify__products.sql", "unique_id": "model.shopify.shopify__products", "fqn": ["shopify", "shopify__products"], "alias": "shopify__products", "checksum": {"name": "sha256", "checksum": "8309d2ec598065b10841326f064dfe2dba9d373329e88af3f4455c11e045323f"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a product in Shopify.", "columns": {"is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted in the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "handle": {"name": "handle", "description": "A unique human-friendly string for the product. Automatically generated from the product's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_type": {"name": "product_type", "description": "A categorization for the product used for filtering and searching products.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_timestamp": {"name": "published_timestamp", "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_scope": {"name": "published_scope", "description": "Whether the product is published to the Point of Sale channel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the product was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vendor": {"name": "vendor", "description": "The name of the product's vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_quantity_sold": {"name": "total_quantity_sold", "description": "Quantity of the product sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_sold": {"name": "subtotal_sold", "description": "Total amount (in shop currency) of the product sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_sold_net_refunds": {"name": "quantity_sold_net_refunds", "description": "Quantity of the product sold, excluding refunds.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_sold_net_refunds": {"name": "subtotal_sold_net_refunds", "description": "Total amount (in shop currency) of the product sold, excluding refunds.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "The timestamp the product was first ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "most_recent_order_timestamp": {"name": "most_recent_order_timestamp", "description": "The timestamp the product was most recently ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from, if you are unioning multiple connectors. Null if not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_quantity_per_order_line": {"name": "avg_quantity_per_order_line", "description": "Average quantity per order line with this product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_total_discount": {"name": "product_total_discount", "description": "Total discounts associated with the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_avg_discount_per_order_line": {"name": "product_avg_discount_per_order_line", "description": "Average discount per order line with this product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_total_tax": {"name": "product_total_tax", "description": "Total taxes associated with the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_avg_tax_per_order_line": {"name": "product_avg_tax_per_order_line", "description": "Average taxes per order line with this product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "count_variants": {"name": "count_variants", "description": "Count of product variants.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_product_media": {"name": "has_product_media", "description": "If the product has media.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the product. Valid values: - active: The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active. - archived: The product is no longer being sold and isn't available to customers on sales channels and apps. - draft: The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "collections": {"name": "collections", "description": "Comma-separated list of collections associated with the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tags": {"name": "tags", "description": "Comma-separated list of tags associated with the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.6182232, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__products\"", "raw_code": "with products as (\n\n    select *\n    from {{ ref('int_shopify__products_with_aggregates') }}\n\n), product_order_lines as (\n\n    select *\n    from {{ ref('int_shopify__product__order_line_aggregates')}}\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(product_order_lines.quantity_sold,0) as total_quantity_sold,\n        coalesce(product_order_lines.subtotal_sold,0) as subtotal_sold,\n        coalesce(product_order_lines.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(product_order_lines.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        product_order_lines.first_order_timestamp,\n        product_order_lines.most_recent_order_timestamp,\n        product_order_lines.avg_quantity_per_order_line as avg_quantity_per_order_line,\n        coalesce(product_order_lines.product_total_discount,0) as product_total_discount,\n        product_order_lines.product_avg_discount_per_order_line as product_avg_discount_per_order_line,\n        coalesce(product_order_lines.product_total_tax,0) as product_total_tax,\n        product_order_lines.product_avg_tax_per_order_line as product_avg_tax_per_order_line\n\n    from products\n    left join product_order_lines\n        on products.product_id = product_order_lines.product_id\n        and products.source_relation = product_order_lines.source_relation\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "int_shopify__products_with_aggregates", "package": null, "version": null}, {"name": "int_shopify__product__order_line_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.shopify.int_shopify__products_with_aggregates", "model.shopify.int_shopify__product__order_line_aggregates"]}, "compiled_path": "target/compiled/shopify/models/shopify__products.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"\n), \n\nproduct_media as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media\"\n),\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nmedia_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(distinct media_id) as count_media\n    from product_media\n    group by 1,2\n), \n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(media_aggregated.count_media, 0) > 0 as has_product_media\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join media_aggregated\n        on products.product_id = media_aggregated.product_id\n        and products.source_relation = media_aggregated.source_relation\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), products as (\n\n    select *\n    from __dbt__cte__int_shopify__products_with_aggregates\n\n), product_order_lines as (\n\n    select *\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n\n), joined as (\n\n    select\n        products.*,\n        coalesce(product_order_lines.quantity_sold,0) as total_quantity_sold,\n        coalesce(product_order_lines.subtotal_sold,0) as subtotal_sold,\n        coalesce(product_order_lines.quantity_sold_net_refunds,0) as quantity_sold_net_refunds,\n        coalesce(product_order_lines.subtotal_sold_net_refunds,0) as subtotal_sold_net_refunds,\n        product_order_lines.first_order_timestamp,\n        product_order_lines.most_recent_order_timestamp,\n        product_order_lines.avg_quantity_per_order_line as avg_quantity_per_order_line,\n        coalesce(product_order_lines.product_total_discount,0) as product_total_discount,\n        product_order_lines.product_avg_discount_per_order_line as product_avg_discount_per_order_line,\n        coalesce(product_order_lines.product_total_tax,0) as product_total_tax,\n        product_order_lines.product_avg_tax_per_order_line as product_avg_tax_per_order_line\n\n    from products\n    left join product_order_lines\n        on products.product_id = product_order_lines.product_id\n        and products.source_relation = product_order_lines.source_relation\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__products_with_aggregates", "sql": " __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"\n), \n\nproduct_media as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media\"\n),\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nmedia_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(distinct media_id) as count_media\n    from product_media\n    group by 1,2\n), \n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(media_aggregated.count_media, 0) > 0 as has_product_media\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join media_aggregated\n        on products.product_id = media_aggregated.product_id\n        and products.source_relation = media_aggregated.source_relation\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.shopify.int_shopify__product__order_line_aggregates", "sql": " __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_id", "source_relation"], "time_spine": null}, "model.shopify.shopify__transactions": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__transactions", "resource_type": "model", "package_name": "shopify", "path": "shopify__transactions.sql", "original_file_path": "models/shopify__transactions.sql", "unique_id": "model.shopify.shopify__transactions", "fqn": ["shopify", "shopify__transactions"], "alias": "shopify__transactions", "checksum": {"name": "sha256", "checksum": "e55559a9c4ed474f509c385cb104c0405b37fed7627ad5e8022c59a09120d256"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a transaction in Shopify.", "columns": {"transactions_unique_id": {"name": "transactions_unique_id", "description": "Unique key representing a transaction. Hashed on 'transaction_id' and 'source_relation'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_id": {"name": "transaction_id", "description": "The ID for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID for the order that the transaction is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_id": {"name": "refund_id", "description": "The ID associated with a refund in the refund table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount of money included in the transaction in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the transaction was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_timestamp": {"name": "processed_timestamp", "description": "The date and time when a transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "The ID for the device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gateway": {"name": "gateway", "description": "The name of the gateway the transaction was issued through.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_name": {"name": "source_name", "description": "The origin of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "message": {"name": "message", "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_id": {"name": "parent_id", "description": "The ID of an associated transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_avs_result_code": {"name": "payment_avs_result_code", "description": "The response code from the address verification system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_credit_card_bin": {"name": "payment_credit_card_bin", "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_cvv_result_code": {"name": "payment_cvv_result_code", "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_credit_card_number": {"name": "payment_credit_card_number", "description": "The customer's credit card number, with most of the leading digits redacted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_credit_card_company": {"name": "payment_credit_card_company", "description": "The name of the company that issued the customer's credit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "kind": {"name": "kind", "description": "The transaction's type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "receipt": {"name": "receipt", "description": "A transaction receipt attached to the transaction by the gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_id": {"name": "currency_exchange_id", "description": "The ID of the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_adjustment": {"name": "currency_exchange_adjustment", "description": "The difference between the amounts on the associated transaction and the parent transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_original_amount": {"name": "currency_exchange_original_amount", "description": "The amount of the parent transaction in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_final_amount": {"name": "currency_exchange_final_amount", "description": "The amount of the associated transaction in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_currency": {"name": "currency_exchange_currency", "description": "The shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_code": {"name": "error_code", "description": "A standardized error code, independent of the payment provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of the date the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate between the home currency and the currency of sale at the time of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_calculated_amount": {"name": "currency_exchange_calculated_amount", "description": "The total amount of the transaction with the currency exchange rate applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from, if you are unioning multiple connectors. Null if not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_method": {"name": "payment_method", "description": "Method of payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_created_timestamp": {"name": "parent_created_timestamp", "description": "Created on timestamp of the parent transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_kind": {"name": "parent_kind", "description": "Kind of the parent transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_amount": {"name": "parent_amount", "description": "Amount of the parent transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_status": {"name": "parent_status", "description": "Status of the parent transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "authorization_expires_at": {"name": "authorization_expires_at", "description": "Timestamp when the authorization expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "authorization_code": {"name": "authorization_code", "description": "The authorization code associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.628884, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"", "raw_code": "with transactions as (\n    select \n        *,\n        {{ dbt_utils.generate_surrogate_key(['source_relation', 'transaction_id'])}} as transactions_unique_id\n    from {{ var('shopify_transaction') }} \n\n), tender_transactions as (\n\n    select *\n    from {{ var('shopify_tender_transaction') }}\n\n), joined as (\n    select \n        transactions.*,\n        tender_transactions.payment_method,\n        parent_transactions.created_timestamp as parent_created_timestamp,\n        parent_transactions.kind as parent_kind,\n        parent_transactions.amount as parent_amount,\n        parent_transactions.status as parent_status\n    from transactions\n    left join tender_transactions\n        on transactions.transaction_id = tender_transactions.transaction_id\n        and transactions.source_relation = tender_transactions.source_relation\n    left join transactions as parent_transactions\n        on transactions.parent_id = parent_transactions.transaction_id\n        and transactions.source_relation = parent_transactions.source_relation\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif({{ fivetran_utils.json_parse(\"receipt\",[\"charges\",\"data\",0,\"balance_transaction\",\"exchange_rate\"]) }}, '') as {{ dbt.type_numeric() }} ),1) as exchange_rate,\n        coalesce(cast(nullif({{ fivetran_utils.json_parse(\"receipt\",[\"charges\",\"data\",0,\"balance_transaction\",\"exchange_rate\"]) }}, '') as {{ dbt.type_numeric() }} ),1) * amount as currency_exchange_calculated_amount\n    from joined\n\n)\n\nselect *\nfrom exchange_rate", "language": "sql", "refs": [{"name": "stg_shopify__transaction", "package": null, "version": null}, {"name": "stg_shopify__tender_transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.fivetran_utils.json_parse", "macro.dbt.type_numeric"], "nodes": ["model.shopify_source.stg_shopify__transaction", "model.shopify_source.stg_shopify__tender_transaction"]}, "compiled_path": "target/compiled/shopify/models/shopify__transactions.sql", "compiled": true, "compiled_code": "with transactions as (\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transactions_unique_id\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__transaction\" \n\n), tender_transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tender_transaction\"\n\n), joined as (\n    select \n        transactions.*,\n        tender_transactions.payment_method,\n        parent_transactions.created_timestamp as parent_created_timestamp,\n        parent_transactions.kind as parent_kind,\n        parent_transactions.amount as parent_amount,\n        parent_transactions.status as parent_status\n    from transactions\n    left join tender_transactions\n        on transactions.transaction_id = tender_transactions.transaction_id\n        and transactions.source_relation = tender_transactions.source_relation\n    left join transactions as parent_transactions\n        on transactions.parent_id = parent_transactions.transaction_id\n        and transactions.source_relation = parent_transactions.source_relation\n\n), exchange_rate as (\n\n    select\n        *,\n        coalesce(cast(nullif(\n\n  receipt::json #>> '{charges,data,0,balance_transaction,exchange_rate}'\n\n, '') as numeric(28,6) ),1) as exchange_rate,\n        coalesce(cast(nullif(\n\n  receipt::json #>> '{charges,data,0,balance_transaction,exchange_rate}'\n\n, '') as numeric(28,6) ),1) * amount as currency_exchange_calculated_amount\n    from joined\n\n)\n\nselect *\nfrom exchange_rate", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["transactions_unique_id"], "time_spine": null}, "model.shopify.shopify__customers": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__customers", "resource_type": "model", "package_name": "shopify", "path": "shopify__customers.sql", "original_file_path": "models/shopify__customers.sql", "unique_id": "model.shopify.shopify__customers", "fqn": ["shopify", "shopify__customers"], "alias": "shopify__customers", "checksum": {"name": "sha256", "checksum": "39f51ada86e0457604bd52c44043711d09e1c716c11d1df4025c04b52b5b45ac"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a customer in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_timestamp": {"name": "created_timestamp", "description": "The date and time when the customer was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_address_id": {"name": "default_address_id", "description": "The default address for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_name": {"name": "first_name", "description": "The customer's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "A unique identifier for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_name": {"name": "last_name", "description": "The customer's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_count_orders": {"name": "lifetime_count_orders", "description": "The number of orders associated with this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "account_state": {"name": "account_state", "description": "The state of the customer's account with a shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_tax_exempt": {"name": "is_tax_exempt", "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_timestamp": {"name": "updated_timestamp", "description": "The date and time when the customer information was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_verified_email": {"name": "is_verified_email", "description": "Whether the customer has verified their email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_order_timestamp": {"name": "first_order_timestamp", "description": "The timestamp the customer completed their first order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "most_recent_order_timestamp": {"name": "most_recent_order_timestamp", "description": "The timestamp the customer completed their most recent order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_order_value": {"name": "avg_order_value", "description": "The average order value for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_spent": {"name": "lifetime_total_spent", "description": "The total amount of money in shop currency that the customer has spent on orders across their order history.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_refunded": {"name": "lifetime_total_refunded", "description": "The total amount of money that the customer has been refunded on orders across their order history.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_net": {"name": "lifetime_total_net", "description": "The total amount of money (minus refunds) that the customer has spent across their order history.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from, if you are unioning multiple connectors. Null if not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_abandoned_checkouts": {"name": "lifetime_abandoned_checkouts", "description": "Total number of abandoned checkouts abandoned by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_tags": {"name": "customer_tags", "description": "A string aggregated list of all tags associated with a customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_quantity_per_order": {"name": "avg_quantity_per_order", "description": "Average quantity of items per order customer orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_tax": {"name": "lifetime_total_tax", "description": "Total amount of tax attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_tax_per_order": {"name": "avg_tax_per_order", "description": "Average tax per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_discount": {"name": "lifetime_total_discount", "description": "Total discounts attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_discount_per_order": {"name": "avg_discount_per_order", "description": "Average discount per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_shipping": {"name": "lifetime_total_shipping", "description": "Total shipping costs attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_shipping_per_order": {"name": "avg_shipping_per_order", "description": "Average shipping cost per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_shipping_with_discounts": {"name": "lifetime_total_shipping_with_discounts", "description": "Total shipping costs after discounts attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_shipping_with_discounts_per_order": {"name": "avg_shipping_with_discounts_per_order", "description": "Average shipping costs after discounts per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "lifetime_total_shipping_tax": {"name": "lifetime_total_shipping_tax", "description": "Total shipping tax attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_shipping_tax_per_order": {"name": "avg_shipping_tax_per_order", "description": "Average shipping tax per order attributed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency that the customer used when they paid for their last order. Defaults to the shop currency. Returns the shop currency for test orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "A note about the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_consent_updated_at": {"name": "marketing_consent_updated_at", "description": "The date and time when the customer consented to receive marketing material by email. If no date is provided, then the date and time when the consent information was sent is used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_opt_in_level": {"name": "marketing_opt_in_level", "description": "The marketing subscription opt-in level, as described in the M3AAWG Sender Best Common Practices, that the customer gave when they consented to receive marketing material by email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_consent_state": {"name": "marketing_consent_state", "description": "Field indicating if the customer has consented to receive marketing material via email. Coalescing of the new `email_marketing_consent_state` field and the deprecated `accepts_marketing` field. Records with the old field will be marked with '(legacy)'.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.611864, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customers\"", "raw_code": "with customers as (\n\n    select \n        {{ dbt_utils.star(from=ref('stg_shopify__customer'), except=[\"orders_count\", \"total_spent\"]) }}\n    from {{ var('shopify_customer') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__customers__order_aggregates' )}}\n\n{% if var('shopify_using_abandoned_checkout', True) %}\n), abandoned as (\n\n    select \n        customer_id,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from {{ var('shopify_abandoned_checkout' )}}\n    where customer_id is not null\n    group by 1,2\n{% endif %}\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        {{ fivetran_utils.string_agg(\"distinct cast(value as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as customer_tags\n\n    from {{ var('shopify_customer_tag' )}}\n    group by 1,2\n\n), joined as (\n\n    select \n        customers.*,\n\n        {% if var('shopify_using_abandoned_checkout', True) %}\n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        {% endif %}\n\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        customer_tags_aggregated.customer_tags,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customers\n    left join orders\n        on customers.customer_id = orders.customer_id\n        and customers.source_relation = orders.source_relation\n    left join customer_tags_aggregated\n        on customers.customer_id = customer_tags_aggregated.customer_id\n        and customers.source_relation = customer_tags_aggregated.source_relation\n    \n    {% if var('shopify_using_abandoned_checkout', True) %}\n    left join abandoned\n        on customers.customer_id = abandoned.customer_id\n        and customers.source_relation = abandoned.source_relation\n    {% endif %}\n\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_shopify__customer", "package": null, "version": null}, {"name": "stg_shopify__customer", "package": null, "version": null}, {"name": "shopify__customers__order_aggregates", "package": null, "version": null}, {"name": "stg_shopify__abandoned_checkout", "package": null, "version": null}, {"name": "stg_shopify__customer_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt.type_string", "macro.fivetran_utils.string_agg"], "nodes": ["model.shopify_source.stg_shopify__customer", "model.shopify.shopify__customers__order_aggregates", "model.shopify_source.stg_shopify__abandoned_checkout", "model.shopify_source.stg_shopify__customer_tag"]}, "compiled_path": "target/compiled/shopify/models/shopify__customers.sql", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    \n    group by 1,2\n)\n\nselect *\nfrom aggregated\n), customers as (\n\n    select \n        \"customer_id\",\n  \"email\",\n  \"first_name\",\n  \"last_name\",\n  \"default_address_id\",\n  \"phone\",\n  \"account_state\",\n  \"is_tax_exempt\",\n  \"is_verified_email\",\n  \"note\",\n  \"currency\",\n  \"marketing_consent_state\",\n  \"marketing_opt_in_level\",\n  \"marketing_consent_updated_at\",\n  \"created_timestamp\",\n  \"updated_timestamp\",\n  \"_fivetran_synced\",\n  \"source_relation\"\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n\n), orders as (\n\n    select *\n    from __dbt__cte__shopify__customers__order_aggregates\n\n\n), abandoned as (\n\n    select \n        customer_id,\n        source_relation,\n        count(distinct checkout_id) as lifetime_abandoned_checkouts\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n    where customer_id is not null\n    group by 1,2\n\n\n), customer_tags_aggregated as (\n\n    select \n        customer_id,\n        source_relation,\n        \n    string_agg(distinct cast(value as TEXT), ', ')\n\n as customer_tags\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tag\"\n    group by 1,2\n\n), joined as (\n\n    select \n        customers.*,\n\n        \n        coalesce(abandoned.lifetime_abandoned_checkouts, 0) as lifetime_abandoned_checkouts,\n        \n\n        orders.first_order_timestamp,\n        orders.most_recent_order_timestamp,\n        customer_tags_aggregated.customer_tags,\n        orders.avg_order_value,\n        coalesce(orders.lifetime_total_spent, 0) as lifetime_total_spent,\n        coalesce(orders.lifetime_total_refunded, 0) as lifetime_total_refunded,\n        (coalesce(orders.lifetime_total_spent, 0) - coalesce(orders.lifetime_total_refunded, 0)) as lifetime_total_net,\n        coalesce(orders.lifetime_count_orders, 0) as lifetime_count_orders,\n        orders.avg_quantity_per_order,\n        coalesce(orders.lifetime_total_tax, 0) as lifetime_total_tax,\n        orders.avg_tax_per_order,\n        coalesce(orders.lifetime_total_discount, 0) as lifetime_total_discount,\n        orders.avg_discount_per_order,\n        coalesce(orders.lifetime_total_shipping, 0) as lifetime_total_shipping,\n        orders.avg_shipping_per_order,\n        coalesce(orders.lifetime_total_shipping_with_discounts, 0) as lifetime_total_shipping_with_discounts,\n        orders.avg_shipping_with_discounts_per_order,\n        coalesce(orders.lifetime_total_shipping_tax, 0) as lifetime_total_shipping_tax,\n        orders.avg_shipping_tax_per_order\n\n    from customers\n    left join orders\n        on customers.customer_id = orders.customer_id\n        and customers.source_relation = orders.source_relation\n    left join customer_tags_aggregated\n        on customers.customer_id = customer_tags_aggregated.customer_id\n        and customers.source_relation = customer_tags_aggregated.source_relation\n    \n    \n    left join abandoned\n        on customers.customer_id = abandoned.customer_id\n        and customers.source_relation = abandoned.source_relation\n    \n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__customers__order_aggregates", "sql": " __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    \n    group by 1,2\n)\n\nselect *\nfrom aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id", "source_relation"], "time_spine": null}, "model.shopify.shopify__order_lines": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__order_lines", "resource_type": "model", "package_name": "shopify", "path": "shopify__order_lines.sql", "original_file_path": "models/shopify__order_lines.sql", "unique_id": "model.shopify.shopify__order_lines", "fqn": ["shopify", "shopify__order_lines"], "alias": "shopify__order_lines", "checksum": {"name": "sha256", "checksum": "0d56e01084bae39a6b2a67ec1e46cd4dba818bcd956ebfde2ee1712a65606400"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Each record represents a line item of an order in Shopify.", "columns": {"order_lines_unique_key": {"name": "order_lines_unique_key", "description": "Unique key representing an order line. Hashed on 'order_line_id' and 'source_relation'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillable_quantity": {"name": "fulfillable_quantity", "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_status": {"name": "fulfillment_status", "description": "How far along an order is in terms line items fulfilled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_gift_card": {"name": "is_gift_card", "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "grams": {"name": "grams", "description": "The weight of the item in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_id": {"name": "order_line_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The name of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the related order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The price of the item before discounts have been applied in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The number of items that were purchased.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_shipping_required": {"name": "is_shipping_required", "description": "Whether the item requires shipping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sku": {"name": "sku", "description": "The item's SKU (stock keeping unit).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_taxable": {"name": "is_taxable", "description": "Whether the item was taxable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The title of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discount": {"name": "total_discount", "description": "The total amount of the discount allocated to the line item in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_id": {"name": "variant_id", "description": "The ID of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vendor": {"name": "vendor", "description": "The name of the item's supplier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refunded_quantity": {"name": "refunded_quantity", "description": "Quantity of the item that has been refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity_net_refunds": {"name": "quantity_net_refunds", "description": "Quantity ordered, excluding refunds.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_barcode": {"name": "variant_barcode", "description": "The barcode, UPC, or ISBN number for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_compare_at_price": {"name": "variant_compare_at_price", "description": "The original price of the item before an adjustment or a sale in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_created_at": {"name": "variant_created_at", "description": "The date and time (ISO 8601 format) when the product variant was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_fulfillment_service": {"name": "variant_fulfillment_service", "description": "(DEPRECATED 2025-01-06) The fulfillment service associated with the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_grams": {"name": "variant_grams", "description": "(DEPRECATED 2025-01-06) The weight of the product variant in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_id": {"name": "inventory_item_id", "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "media_id": {"name": "media_id", "description": "The unique numeric identifier for a product variant's media.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_inventory_management": {"name": "variant_inventory_management", "description": "(DEPRECATED 2025-01-06) The fulfillment service that tracks the number of items in stock for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_inventory_policy": {"name": "variant_inventory_policy", "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_inventory_quantity": {"name": "variant_inventory_quantity", "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_option_1": {"name": "variant_option_1", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3. \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_option_2": {"name": "variant_option_2", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_option_3": {"name": "variant_option_3", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_position": {"name": "variant_position", "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_price": {"name": "variant_price", "description": "The price of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_sku": {"name": "variant_sku", "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_is_taxable": {"name": "variant_is_taxable", "description": "Whether a tax is charged when the product variant is sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_tax_code": {"name": "variant_tax_code", "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_title": {"name": "variant_title", "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_updated_at": {"name": "variant_updated_at", "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_weight": {"name": "variant_weight", "description": "(DEPRECATED 2025-01-06) The weight of the product variant in the unit system specified with weight_unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_weight_unit": {"name": "variant_weight_unit", "description": "(DEPRECATED 2025-01-06) The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_is_available_for_sale": {"name": "variant_is_available_for_sale", "description": "Indicates whether the product variant is available for sale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_display_name": {"name": "variant_display_name", "description": "The display name of the variant, based on the product's title and variant's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_legacy_resource_id": {"name": "variant_legacy_resource_id", "description": "The ID of the corresponding resource in the REST Admin API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_has_components_required": {"name": "variant_has_components_required", "description": "Indicates whether a product variant requires components.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_sellable_online_quantity": {"name": "variant_sellable_online_quantity", "description": "The total sellable quantity of the variant for online channels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refunded_subtotal": {"name": "refunded_subtotal", "description": "Subtotal amount of the refund applied to the order line in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_net_refunds": {"name": "subtotal_net_refunds", "description": "Subtotal of the order line with refunds subtracted in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The schema or database this record came from, if you are unioning multiple connectors. Null if not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "restock_types": {"name": "restock_types", "description": "List of how this refund line item affects inventory levels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_tax": {"name": "order_line_tax", "description": "Total taxes for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "The index associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pre_tax_price": {"name": "pre_tax_price", "description": "The total pre tax price of the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_code": {"name": "tax_code", "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pre_tax_price_set": {"name": "pre_tax_price_set", "description": "The pre tax price of the line item in shop currency and presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_set": {"name": "price_set", "description": "The price of the line item in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discount_set": {"name": "total_discount_set", "description": "The total amount allocated to the line item in the presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "properties": {"name": "properties", "description": "Line item properties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/shopify.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.626644, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"", "raw_code": "with order_lines as (\n\n    select \n        *,\n        {{ dbt_utils.generate_surrogate_key(['source_relation', 'order_line_id']) }} as order_lines_unique_key\n    from {{ var('shopify_order_line') }}\n\n), product_variants as (\n\n    select *\n    from {{ var('shopify_product_variant') }}\n\n), refunds as (\n\n    select *\n    from {{ ref('shopify__orders__order_refunds') }}\n\n), \n\n{% if var('shopify_using_product_variant_media', False) %}\nproduct_variant_media as (\n\n    select *\n    from {{ var('shopify_product_variant_media') }}\n),\n{% endif %}\n\nrefunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal,\n        {{ fivetran_utils.string_agg(\"distinct cast(refunds.restock_type as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as restock_types\n    from refunds\n    group by 1,2\n\n), tax_lines as (\n\n    select *\n    from {{ var('shopify_tax_line')}}\n\n), tax_lines_aggregated as (\n\n    select\n        tax_lines.order_line_id,\n        tax_lines.source_relation,\n        sum(tax_lines.price) as order_line_tax\n\n    from tax_lines\n    group by 1,2\n\n), joined as (\n\n    select\n        order_lines.*,\n        \n        refunds_aggregated.restock_types,\n\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n\n        {% if var('shopify_using_product_variant_media', False) %}\n        product_variant_media.media_id,\n        {% endif %}\n\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n        product_variants.is_available_for_sale as variant_is_available_for_sale,\n        product_variants.display_name as variant_display_name,\n        product_variants.legacy_resource_id as variant_legacy_resource_id,\n        product_variants.has_components_required as variant_has_components_required,\n        product_variants.sellable_online_quantity as variant_sellable_online_quantity,\n\n        tax_lines_aggregated.order_line_tax\n\n    from order_lines\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n    left join tax_lines_aggregated\n        on tax_lines_aggregated.order_line_id = order_lines.order_line_id\n        and tax_lines_aggregated.source_relation = order_lines.source_relation\n\n    {% if var('shopify_using_product_variant_media', False) %}\n    left join product_variant_media\n        on product_variant_media.product_variant_id = product_variants.variant_id\n        and product_variant_media.source_relation = product_variants.source_relation\n    {% endif %}\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_shopify__order_line", "package": null, "version": null}, {"name": "stg_shopify__product_variant", "package": null, "version": null}, {"name": "shopify__orders__order_refunds", "package": null, "version": null}, {"name": "stg_shopify__product_variant_media", "package": null, "version": null}, {"name": "stg_shopify__tax_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.type_string", "macro.fivetran_utils.string_agg"], "nodes": ["model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__product_variant", "model.shopify.shopify__orders__order_refunds", "model.shopify_source.stg_shopify__product_variant_media", "model.shopify_source.stg_shopify__tax_line"]}, "compiled_path": "target/compiled/shopify/models/shopify__order_lines.sql", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), order_lines as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_line_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as order_lines_unique_key\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"\n\n), product_variants as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"\n\n), refunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), \n\n\nproduct_variant_media as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_media\"\n),\n\n\nrefunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal,\n        \n    string_agg(distinct cast(refunds.restock_type as TEXT), ', ')\n\n as restock_types\n    from refunds\n    group by 1,2\n\n), tax_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tax_line\"\n\n), tax_lines_aggregated as (\n\n    select\n        tax_lines.order_line_id,\n        tax_lines.source_relation,\n        sum(tax_lines.price) as order_line_tax\n\n    from tax_lines\n    group by 1,2\n\n), joined as (\n\n    select\n        order_lines.*,\n        \n        refunds_aggregated.restock_types,\n\n        coalesce(refunds_aggregated.quantity,0) as refunded_quantity,\n        coalesce(refunds_aggregated.subtotal,0) as refunded_subtotal,\n        order_lines.quantity - coalesce(refunds_aggregated.quantity,0) as quantity_net_refunds,\n        order_lines.pre_tax_price  - coalesce(refunds_aggregated.subtotal,0) as subtotal_net_refunds,\n        \n        product_variants.created_timestamp as variant_created_at,\n        product_variants.updated_timestamp as variant_updated_at,\n        product_variants.inventory_item_id,\n\n        \n        product_variant_media.media_id,\n        \n\n        product_variants.price as variant_price,\n        product_variants.sku as variant_sku,\n        product_variants.position as variant_position,\n        product_variants.inventory_policy as variant_inventory_policy,\n        product_variants.compare_at_price as variant_compare_at_price,\n        product_variants.fulfillment_service as variant_fulfillment_service,\n\n        product_variants.is_taxable as variant_is_taxable,\n        product_variants.barcode as variant_barcode,\n        product_variants.grams as variant_grams,\n        product_variants.inventory_quantity as variant_inventory_quantity,\n        product_variants.weight as variant_weight,\n        product_variants.weight_unit as variant_weight_unit,\n        product_variants.option_1 as variant_option_1,\n        product_variants.option_2 as variant_option_2,\n        product_variants.option_3 as variant_option_3,\n        product_variants.tax_code as variant_tax_code,\n        product_variants.is_available_for_sale as variant_is_available_for_sale,\n        product_variants.display_name as variant_display_name,\n        product_variants.legacy_resource_id as variant_legacy_resource_id,\n        product_variants.has_components_required as variant_has_components_required,\n        product_variants.sellable_online_quantity as variant_sellable_online_quantity,\n\n        tax_lines_aggregated.order_line_tax\n\n    from order_lines\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n    left join product_variants\n        on product_variants.variant_id = order_lines.variant_id\n        and product_variants.source_relation = order_lines.source_relation\n    left join tax_lines_aggregated\n        on tax_lines_aggregated.order_line_id = order_lines.order_line_id\n        and tax_lines_aggregated.source_relation = order_lines.source_relation\n\n    \n    left join product_variant_media\n        on product_variant_media.product_variant_id = product_variants.variant_id\n        and product_variant_media.source_relation = product_variants.source_relation\n    \n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__orders__order_refunds", "sql": " __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_lines_unique_key"], "time_spine": null}, "model.shopify.shopify__line_item_enhanced": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__line_item_enhanced", "resource_type": "model", "package_name": "shopify", "path": "standardized_models/shopify__line_item_enhanced.sql", "original_file_path": "models/standardized_models/shopify__line_item_enhanced.sql", "unique_id": "model.shopify.shopify__line_item_enhanced", "fqn": ["shopify", "standardized_models", "shopify__line_item_enhanced"], "alias": "shopify__line_item_enhanced", "checksum": {"name": "sha256", "checksum": "34642a170ab43bf01bbc17505abce1af80fa9850b3bd72c88a98783867e51f11"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model constructs a comprehensive, denormalized analytical table that enables reporting on key revenue, customer, and product metrics from your billing platform. It\u2019s designed to align with the schema of the `*__line_item_enhanced` model found in Shopify, Recharge, Stripe, Zuora, and Recurly, offering standardized reporting across various billing platforms. To see the kinds of insights this model can generate, explore example visualizations in the [Fivetran Billing Model Streamlit App](https://fivetran-billing-model.streamlit.app/). Visit the app for more details.", "columns": {"header_id": {"name": "header_id", "description": "Id of corresponding order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "line_item_id": {"name": "line_item_id", "description": "Order line item id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "line_item_index": {"name": "line_item_index", "description": "Unique index of each line item id for each order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "record_type": {"name": "record_type", "description": "header or line_item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "When the order was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "header_status": {"name": "header_status", "description": "Status of the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_type": {"name": "billing_type", "description": "NA for Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "Currency used in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "Product ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_name": {"name": "product_name", "description": "Product name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_type": {"name": "product_type", "description": "Product type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "transaction_type": {"name": "transaction_type", "description": "Transaction type (Charge, Refund, etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The number of units of this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unit_amount": {"name": "unit_amount", "description": "Amount per unit, or the price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_amount": {"name": "discount_amount", "description": "The discount amount associated with this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_amount": {"name": "tax_amount", "description": "The tax amount associated with this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_amount": {"name": "total_amount", "description": "Order total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_id": {"name": "payment_id", "description": "Transaction ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_method": {"name": "payment_method", "description": "Transaction gateway for Shopify ('gift card', 'shopify payments', etc)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_method_id": {"name": "payment_method_id", "description": "Shopify does not have a particular payment_method_id, therefore all records will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_at": {"name": "payment_at", "description": "Transaction processed timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fee_amount": {"name": "fee_amount", "description": "The total shipping fee associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_amount": {"name": "refund_amount", "description": "Refund amount associated with this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscription_id": {"name": "subscription_id", "description": "Shopify does not include subscriptions, therefore all records will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscription_plan": {"name": "subscription_plan", "description": "Shopify does not include subscriptions, therefore all records will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscription_period_started_at": {"name": "subscription_period_started_at", "description": "Shopify does not include subscriptions, therefore all records will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscription_period_ended_at": {"name": "subscription_period_ended_at", "description": "Shopify does not include subscriptions, therefore all records will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subscription_status": {"name": "subscription_status", "description": "Shopify does not include subscriptions, therefore all records will be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "Customer associated with this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_created_at": {"name": "customer_created_at", "description": "The date and time when the customer was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_level": {"name": "customer_level", "description": "Whether 'account' or 'customer'. For Shopify, the level is 'customer'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_name": {"name": "customer_name", "description": "Customer name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_company": {"name": "customer_company", "description": "Associated customer's company noted on the shipping address if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_email": {"name": "customer_email", "description": "Customer email", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_city": {"name": "customer_city", "description": "Customer's shipping address city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_country": {"name": "customer_country", "description": "Customer's shipping address country", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_relation": {"name": "source_relation", "description": "The source of the record if the unioning functionality is being used. If not this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/standardized_models/shopify__standardized_models.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table", "enabled": true}, "created_at": 1747951351.69313, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__line_item_enhanced\"", "raw_code": "{{ config(enabled=var('shopify__standardized_billing_model_enabled', True)) }}\n\nwith line_items as (\n\n    select * \n    from {{ var('shopify_order_line')}}\n\n), orders as ( \n\n    select * \n    from {{ var('shopify_order')}}\n\n), product as (\n\n    select *\n    from {{ var('shopify_product')}}\n\n), transactions as (\n\n    select\n        order_id,\n        kind, \n        source_relation,\n        {{ fivetran_utils.string_agg(\"cast (transaction_id as \" ~ dbt.type_string() ~ \")\", \"', '\") }} AS transaction_id,\n        {{ fivetran_utils.string_agg(\"cast (processed_timestamp as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as processed_timestamp,\n        {{ fivetran_utils.string_agg('gateway', \"', '\") }} as gateway\n\n    from {{ var('shopify_transaction')}}\n    where kind = 'capture'\n    and status = 'success'\n    group by 1,2,3\n\n), refund_transactions as (\n\n    select\n        order_id,\n        source_relation,\n        sum(amount) as total_order_refund_amount\n    from {{ var('shopify_transaction')}}\n    where kind = 'refund' \n    group by 1,2\n\n), order_line_refund as ( -- There is a unique row for each individual item. So if quantity = 4 of 1 line item, then each has its own row\n\n    select\n        order_line_id,\n        source_relation,\n        sum(subtotal + total_tax) as total_refund_amount\n    from {{ var('shopify_order_line_refund')}}\n    group by 1,2\n\n), customer as (\n\n    select *\n    from {{ var('shopify_customer')}}\n\n), shipping as (\n\n    select * \n    from {{ ref('int_shopify__order__shipping_aggregates')}}\n\n), enhanced as (\n\n    select\n        li.order_id as header_id,\n        li.order_line_id as line_item_id,\n        li.index as line_item_index,\n        o.created_timestamp as created_at,\n        o.currency as currency,\n        o.fulfillment_status as header_status,\n        li.product_id as product_id,\n        p.title as product_name,\n        t.kind as transaction_type,\n        null as billing_type,\n        p.product_type as product_type,\n        li.quantity as quantity,\n        li.price as unit_amount,\n        o.total_discounts as discount_amount,\n        o.total_tax as tax_amount,\n        (li.quantity * li.price) as total_amount,  \n        t.transaction_id as payment_id,\n        null as payment_method_id,\n        t.gateway as payment_method, -- payment_method in tender_transaction can be something like 'apply_pay', where gateway is like 'gift card' or 'shopify payments' which I think is more relevant here\n        t.processed_timestamp as payment_at,\n        shipping.discounted_shipping_price + shipping.shipping_tax as fee_amount,\n        rt.total_order_refund_amount as refund_amount,\n        cast(null as {{ dbt.type_string() }}) as subscription_id,\n        cast(null as {{ dbt.type_string() }}) as subscription_plan,\n        cast(null as {{ dbt.type_timestamp() }}) as subscription_period_started_at,\n        cast(null as {{ dbt.type_timestamp() }}) as subscription_period_ended_at,\n        cast(null as {{ dbt.type_string() }}) as subscription_status,\n        o.customer_id,\n        c.created_timestamp as customer_created_at,\n        'customer' as customer_level,\n        {{ dbt.concat([\"c.first_name\", \"''\", \"c.last_name\"]) }} as customer_name,\n        o.shipping_address_company as customer_company,\n        o.email as customer_email,\n        o.shipping_address_city as customer_city,\n        o.shipping_address_country as customer_country,\n        li.source_relation\n    from line_items li\n    left join orders o\n        on li.order_id = o.order_id\n        and li.source_relation = o.source_relation\n    left join transactions t\n        on o.order_id = t.order_id\n        and o.source_relation = t.source_relation\n    left join refund_transactions rt\n        on o.order_id = rt.order_id\n        and o.source_relation = rt.source_relation\n    left join product p \n        on li.product_id = p.product_id\n        and li.source_relation = p.source_relation\n    left join customer c\n        on o.customer_id = c.customer_id\n        and o.source_relation = c.source_relation\n    left join shipping\n        on o.order_id = shipping.order_id\n        and o.source_relation = shipping.source_relation\n        \n), final as (\n\n    select \n        header_id,\n        cast(line_item_id as {{ dbt.type_numeric() }}) as line_item_id,\n        cast(line_item_index as {{ dbt.type_numeric() }}) as line_item_index,\n        'line_item' as record_type,\n        created_at,\n        currency,\n        header_status,\n        cast(product_id as {{ dbt.type_numeric() }}) as product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        product_type,\n        cast(quantity as {{ dbt.type_numeric() }}) as quantity,\n        cast(unit_amount as {{ dbt.type_numeric() }}) as unit_amount,\n        cast(null as {{ dbt.type_numeric() }}) as discount_amount,\n        cast(null as {{ dbt.type_numeric() }}) as tax_amount,\n        cast(total_amount as {{ dbt.type_numeric() }}) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        cast(null as {{ dbt.type_numeric() }}) as fee_amount,\n        cast(null as {{ dbt.type_numeric() }}) as refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country,\n        source_relation\n    from enhanced\n\n    union all\n\n    select \n        header_id,\n        cast(null as {{ dbt.type_numeric() }}) as line_item_id,\n        cast(0 as {{ dbt.type_numeric() }}) as line_item_index,\n        'header' as record_type,\n        created_at,\n        currency,\n        header_status,\n        cast(null as {{ dbt.type_numeric() }}) as product_id,\n        cast(null as {{ dbt.type_string() }}) as product_name,\n        transaction_type,\n        billing_type,\n        cast(null as {{ dbt.type_string() }}) as product_type,\n        cast(null as {{ dbt.type_numeric() }}) as quantity,\n        cast(null as {{ dbt.type_numeric() }}) as unit_amount,\n        discount_amount,\n        tax_amount,\n        cast(null as {{ dbt.type_numeric() }}) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country,\n        source_relation\n    from enhanced\n    where line_item_index = 1 -- filter to just one arbitrary record\n\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_line", "package": null, "version": null}, {"name": "stg_shopify__order", "package": null, "version": null}, {"name": "stg_shopify__product", "package": null, "version": null}, {"name": "stg_shopify__transaction", "package": null, "version": null}, {"name": "stg_shopify__transaction", "package": null, "version": null}, {"name": "stg_shopify__order_line_refund", "package": null, "version": null}, {"name": "stg_shopify__customer", "package": null, "version": null}, {"name": "int_shopify__order__shipping_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.fivetran_utils.string_agg", "macro.dbt.type_timestamp", "macro.dbt.concat", "macro.dbt.type_numeric"], "nodes": ["model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__order", "model.shopify_source.stg_shopify__product", "model.shopify_source.stg_shopify__transaction", "model.shopify_source.stg_shopify__order_line_refund", "model.shopify_source.stg_shopify__customer", "model.shopify.int_shopify__order__shipping_aggregates"]}, "compiled_path": "target/compiled/shopify/models/standardized_models/shopify__line_item_enhanced.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), line_items as (\n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"\n\n), orders as ( \n\n    select * \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n\n), product as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"\n\n), transactions as (\n\n    select\n        order_id,\n        kind, \n        source_relation,\n        \n    string_agg(cast (transaction_id as TEXT), ', ')\n\n AS transaction_id,\n        \n    string_agg(cast (processed_timestamp as TEXT), ', ')\n\n as processed_timestamp,\n        \n    string_agg(gateway, ', ')\n\n as gateway\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__transaction\"\n    where kind = 'capture'\n    and status = 'success'\n    group by 1,2,3\n\n), refund_transactions as (\n\n    select\n        order_id,\n        source_relation,\n        sum(amount) as total_order_refund_amount\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__transaction\"\n    where kind = 'refund' \n    group by 1,2\n\n), order_line_refund as ( -- There is a unique row for each individual item. So if quantity = 4 of 1 line item, then each has its own row\n\n    select\n        order_line_id,\n        source_relation,\n        sum(subtotal + total_tax) as total_refund_amount\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    group by 1,2\n\n), customer as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n\n), shipping as (\n\n    select * \n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), enhanced as (\n\n    select\n        li.order_id as header_id,\n        li.order_line_id as line_item_id,\n        li.index as line_item_index,\n        o.created_timestamp as created_at,\n        o.currency as currency,\n        o.fulfillment_status as header_status,\n        li.product_id as product_id,\n        p.title as product_name,\n        t.kind as transaction_type,\n        null as billing_type,\n        p.product_type as product_type,\n        li.quantity as quantity,\n        li.price as unit_amount,\n        o.total_discounts as discount_amount,\n        o.total_tax as tax_amount,\n        (li.quantity * li.price) as total_amount,  \n        t.transaction_id as payment_id,\n        null as payment_method_id,\n        t.gateway as payment_method, -- payment_method in tender_transaction can be something like 'apply_pay', where gateway is like 'gift card' or 'shopify payments' which I think is more relevant here\n        t.processed_timestamp as payment_at,\n        shipping.discounted_shipping_price + shipping.shipping_tax as fee_amount,\n        rt.total_order_refund_amount as refund_amount,\n        cast(null as TEXT) as subscription_id,\n        cast(null as TEXT) as subscription_plan,\n        cast(null as timestamp) as subscription_period_started_at,\n        cast(null as timestamp) as subscription_period_ended_at,\n        cast(null as TEXT) as subscription_status,\n        o.customer_id,\n        c.created_timestamp as customer_created_at,\n        'customer' as customer_level,\n        c.first_name || '' || c.last_name as customer_name,\n        o.shipping_address_company as customer_company,\n        o.email as customer_email,\n        o.shipping_address_city as customer_city,\n        o.shipping_address_country as customer_country,\n        li.source_relation\n    from line_items li\n    left join orders o\n        on li.order_id = o.order_id\n        and li.source_relation = o.source_relation\n    left join transactions t\n        on o.order_id = t.order_id\n        and o.source_relation = t.source_relation\n    left join refund_transactions rt\n        on o.order_id = rt.order_id\n        and o.source_relation = rt.source_relation\n    left join product p \n        on li.product_id = p.product_id\n        and li.source_relation = p.source_relation\n    left join customer c\n        on o.customer_id = c.customer_id\n        and o.source_relation = c.source_relation\n    left join shipping\n        on o.order_id = shipping.order_id\n        and o.source_relation = shipping.source_relation\n        \n), final as (\n\n    select \n        header_id,\n        cast(line_item_id as numeric(28,6)) as line_item_id,\n        cast(line_item_index as numeric(28,6)) as line_item_index,\n        'line_item' as record_type,\n        created_at,\n        currency,\n        header_status,\n        cast(product_id as numeric(28,6)) as product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        product_type,\n        cast(quantity as numeric(28,6)) as quantity,\n        cast(unit_amount as numeric(28,6)) as unit_amount,\n        cast(null as numeric(28,6)) as discount_amount,\n        cast(null as numeric(28,6)) as tax_amount,\n        cast(total_amount as numeric(28,6)) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        cast(null as numeric(28,6)) as fee_amount,\n        cast(null as numeric(28,6)) as refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country,\n        source_relation\n    from enhanced\n\n    union all\n\n    select \n        header_id,\n        cast(null as numeric(28,6)) as line_item_id,\n        cast(0 as numeric(28,6)) as line_item_index,\n        'header' as record_type,\n        created_at,\n        currency,\n        header_status,\n        cast(null as numeric(28,6)) as product_id,\n        cast(null as TEXT) as product_name,\n        transaction_type,\n        billing_type,\n        cast(null as TEXT) as product_type,\n        cast(null as numeric(28,6)) as quantity,\n        cast(null as numeric(28,6)) as unit_amount,\n        discount_amount,\n        tax_amount,\n        cast(null as numeric(28,6)) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country,\n        source_relation\n    from enhanced\n    where line_item_index = 1 -- filter to just one arbitrary record\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__order__shipping_aggregates", "sql": " __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["header_id", "line_item_id", "source_relation"], "time_spine": null}, "model.shopify.shopify__calendar": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__calendar", "resource_type": "model", "package_name": "shopify", "path": "utils/shopify__calendar.sql", "original_file_path": "models/utils/shopify__calendar.sql", "unique_id": "model.shopify.shopify__calendar", "fqn": ["shopify", "utils", "shopify__calendar"], "alias": "shopify__calendar", "checksum": {"name": "sha256", "checksum": "5295fe06c949deb345450af0ad6b0335b6edc25b2e883a4f2452ae276a3e85f4"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951350.7997062, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__calendar\"", "raw_code": "{% set start_date = var('shopify__calendar_start_date', '2019-01-01') %}\n\n{{ dbt_utils.date_spine(\n    datepart=\"day\",\n    start_date=\"cast('\" ~ start_date ~ \"' as date)\",\n    end_date=\"current_date\"\n    )\n}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "compiled_path": "target/compiled/shopify/models/utils/shopify__calendar.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2333\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2019-01-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= current_date\n\n)\n\nselect * from filtered\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.shopify__product_variant_metafields": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__product_variant_metafields", "resource_type": "model", "package_name": "shopify", "path": "metafields/shopify__product_variant_metafields.sql", "original_file_path": "models/metafields/shopify__product_variant_metafields.sql", "unique_id": "model.shopify.shopify__product_variant_metafields", "fqn": ["shopify", "metafields", "shopify__product_variant_metafields"], "alias": "shopify__product_variant_metafields", "checksum": {"name": "sha256", "checksum": "d3036f12bb8e1528f465a28bff7017f37c3992d68e1ba8d85a893095efd7a2ab"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Replica of the stg_shopify__product_variant model with the addition of metafields pivoted out from the stg_shopify__metafield model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/metafields/shopify_metafields.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table", "enabled": true}, "created_at": 1747951351.698863, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__product_variant_metafields\"", "raw_code": "{{ config(enabled=var('shopify_using_metafield', True) and (var('shopify_using_all_metafields', False) or var('shopify_using_product_variant_metafields', False)) ) }}\n\n{{ shopify.get_metafields( \n    source_object = \"stg_shopify__product_variant\",\n    reference_values = ['variant', 'productvariant'],\n    id_column = \"variant_id\"\n) }}", "language": "sql", "refs": [{"name": "stg_shopify__metafield", "package": null, "version": null}, {"name": "stg_shopify__product_variant", "package": null, "version": null}, {"name": "stg_shopify__product_variant", "package": null, "version": null}, {"name": "stg_shopify__metafield", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify.get_metafields"], "nodes": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__product_variant"]}, "compiled_path": "target/compiled/shopify/models/metafields/shopify__product_variant_metafields.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n\n    \n\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"\n)\n\n,\nlookup_object as (\n    select \n        *,\n        \n  \n    (\n      \n      case\n      when metafield_reference = 'blade_runner_returnauthorizations'\n        then value\n      else null\n      end\n    )\n    \n      \n        as blade_runner_returnauthorizations\n      \n    \n    ,\n  \n    (\n      \n      case\n      when metafield_reference = 'avengers_wherearethey'\n        then value\n      else null\n      end\n    )\n    \n      \n        as avengers_wherearethey\n      \n    \n    ,\n  \n    (\n      \n      case\n      when metafield_reference = 'star_wars_wheninspace'\n        then value\n      else null\n      end\n    )\n    \n      \n        as star_wars_wheninspace\n      \n    \n    \n  \n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__metafield\"\n    where is_most_recent_record\n),\n\nfinal as (\n    select\n        \n            source_table.variant_id,\n        \n            source_table.product_id,\n        \n            source_table.inventory_item_id,\n        \n            source_table.title,\n        \n            source_table.price,\n        \n            source_table.sku,\n        \n            source_table.position,\n        \n            source_table.inventory_policy,\n        \n            source_table.compare_at_price,\n        \n            source_table.fulfillment_service,\n        \n            source_table.inventory_management,\n        \n            source_table.is_taxable,\n        \n            source_table.barcode,\n        \n            source_table.grams,\n        \n            source_table.inventory_quantity,\n        \n            source_table.is_available_for_sale,\n        \n            source_table.display_name,\n        \n            source_table.legacy_resource_id,\n        \n            source_table.has_components_required,\n        \n            source_table.sellable_online_quantity,\n        \n            source_table.weight,\n        \n            source_table.weight_unit,\n        \n            source_table.option_1,\n        \n            source_table.option_2,\n        \n            source_table.option_3,\n        \n            source_table.tax_code,\n        \n            source_table.created_timestamp,\n        \n            source_table.updated_timestamp,\n        \n            source_table._fivetran_synced,\n        \n            source_table.source_relation\n        \n        \n            , max(lookup_object.blade_runner_returnauthorizations) as metafield_blade_runner_returnauthorizations\n        \n            , max(lookup_object.avengers_wherearethey) as metafield_avengers_wherearethey\n        \n            , max(lookup_object.star_wars_wheninspace) as metafield_star_wars_wheninspace\n        \n    from source_table\n    left join lookup_object \n        on lookup_object.owner_resource_id = source_table.variant_id\n        and lower(lookup_object.owner_resource) in ('variant', 'productvariant')\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n)\n\nselect *\nfrom final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.shopify__product_metafields": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__product_metafields", "resource_type": "model", "package_name": "shopify", "path": "metafields/shopify__product_metafields.sql", "original_file_path": "models/metafields/shopify__product_metafields.sql", "unique_id": "model.shopify.shopify__product_metafields", "fqn": ["shopify", "metafields", "shopify__product_metafields"], "alias": "shopify__product_metafields", "checksum": {"name": "sha256", "checksum": "e5eadf2dfafe206d14047eac2577eeabfff0bef0f6364867550723efbf8f2ba9"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Replica of the stg_shopify__product model with the addition of metafields pivoted out from the stg_shopify__metafield model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/metafields/shopify_metafields.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table", "enabled": true}, "created_at": 1747951351.698617, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__product_metafields\"", "raw_code": "{{ config(enabled=var('shopify_using_metafield', True) and (var('shopify_using_all_metafields', False) or var('shopify_using_product_metafields', False)) ) }}\n\n{{ shopify.get_metafields( \n    source_object = \"stg_shopify__product\", \n    reference_values = ['product'],\n    id_column = \"product_id\"\n) }}", "language": "sql", "refs": [{"name": "stg_shopify__metafield", "package": null, "version": null}, {"name": "stg_shopify__product", "package": null, "version": null}, {"name": "stg_shopify__product", "package": null, "version": null}, {"name": "stg_shopify__metafield", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify.get_metafields"], "nodes": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__product"]}, "compiled_path": "target/compiled/shopify/models/metafields/shopify__product_metafields.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"\n)\n\n\n\nselect *\nfrom source_table\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.shopify__customer_metafields": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__customer_metafields", "resource_type": "model", "package_name": "shopify", "path": "metafields/shopify__customer_metafields.sql", "original_file_path": "models/metafields/shopify__customer_metafields.sql", "unique_id": "model.shopify.shopify__customer_metafields", "fqn": ["shopify", "metafields", "shopify__customer_metafields"], "alias": "shopify__customer_metafields", "checksum": {"name": "sha256", "checksum": "be6fb7ef63dd45770625be1b1d0f51cd1d50757e606f83212132059784286e40"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Replica of the stg_shopify__customer model with the addition of metafields pivoted out from the stg_shopify__metafield model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/metafields/shopify_metafields.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table", "enabled": true}, "created_at": 1747951351.698115, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_metafields\"", "raw_code": "{{ config(enabled=var('shopify_using_metafield', True) and (var('shopify_using_all_metafields', False) or var('shopify_using_customer_metafields', False)) )}}\n\n{{ shopify.get_metafields( \n    source_object = \"stg_shopify__customer\", \n    reference_values = ['customer'],\n    id_column = \"customer_id\"\n) }}", "language": "sql", "refs": [{"name": "stg_shopify__metafield", "package": null, "version": null}, {"name": "stg_shopify__customer", "package": null, "version": null}, {"name": "stg_shopify__customer", "package": null, "version": null}, {"name": "stg_shopify__metafield", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify.get_metafields"], "nodes": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__customer"]}, "compiled_path": "target/compiled/shopify/models/metafields/shopify__customer_metafields.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n)\n\n,\nlookup_object as (\n    select \n        *,\n        \n  \n    (\n      \n      case\n      when metafield_reference = 'star_wars_firstname'\n        then value\n      else null\n      end\n    )\n    \n      \n        as star_wars_firstname\n      \n    \n    ,\n  \n    (\n      \n      case\n      when metafield_reference = 'star_wars_fullname'\n        then value\n      else null\n      end\n    )\n    \n      \n        as star_wars_fullname\n      \n    \n    ,\n  \n    (\n      \n      case\n      when metafield_reference = 'star_wars_isjedi'\n        then value\n      else null\n      end\n    )\n    \n      \n        as star_wars_isjedi\n      \n    \n    ,\n  \n    (\n      \n      case\n      when metafield_reference = 'star_wars_lastname'\n        then value\n      else null\n      end\n    )\n    \n      \n        as star_wars_lastname\n      \n    \n    \n  \n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__metafield\"\n    where is_most_recent_record\n),\n\nfinal as (\n    select\n        \n            source_table.customer_id,\n        \n            source_table.email,\n        \n            source_table.first_name,\n        \n            source_table.last_name,\n        \n            source_table.orders_count,\n        \n            source_table.default_address_id,\n        \n            source_table.phone,\n        \n            source_table.account_state,\n        \n            source_table.is_tax_exempt,\n        \n            source_table.total_spent,\n        \n            source_table.is_verified_email,\n        \n            source_table.note,\n        \n            source_table.currency,\n        \n            source_table.marketing_consent_state,\n        \n            source_table.marketing_opt_in_level,\n        \n            source_table.marketing_consent_updated_at,\n        \n            source_table.created_timestamp,\n        \n            source_table.updated_timestamp,\n        \n            source_table._fivetran_synced,\n        \n            source_table.source_relation\n        \n        \n            , max(lookup_object.star_wars_firstname) as metafield_star_wars_firstname\n        \n            , max(lookup_object.star_wars_fullname) as metafield_star_wars_fullname\n        \n            , max(lookup_object.star_wars_isjedi) as metafield_star_wars_isjedi\n        \n            , max(lookup_object.star_wars_lastname) as metafield_star_wars_lastname\n        \n    from source_table\n    left join lookup_object \n        on lookup_object.owner_resource_id = source_table.customer_id\n        and lower(lookup_object.owner_resource) in ('customer')\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n)\n\nselect *\nfrom final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.shopify__shop_metafields": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__shop_metafields", "resource_type": "model", "package_name": "shopify", "path": "metafields/shopify__shop_metafields.sql", "original_file_path": "models/metafields/shopify__shop_metafields.sql", "unique_id": "model.shopify.shopify__shop_metafields", "fqn": ["shopify", "metafields", "shopify__shop_metafields"], "alias": "shopify__shop_metafields", "checksum": {"name": "sha256", "checksum": "6bd5459a4ec334f784c926efe1d3e5f72bd2abff18c5c6940037740a17f00fcf"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Replica of the stg_shopify__shop model with the addition of metafields pivoted out from the stg_shopify__metafield model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/metafields/shopify_metafields.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table", "enabled": true}, "created_at": 1747951351.699083, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__shop_metafields\"", "raw_code": "{{ config(enabled=var('shopify_using_metafield', True) and (var('shopify_using_all_metafields', False) or var('shopify_using_shop_metafields', False)) ) }}\n\n{{ shopify.get_metafields( \n    source_object = \"stg_shopify__shop\", \n    reference_values = ['shop'],\n    id_column = \"shop_id\"\n) }}", "language": "sql", "refs": [{"name": "stg_shopify__metafield", "package": null, "version": null}, {"name": "stg_shopify__shop", "package": null, "version": null}, {"name": "stg_shopify__shop", "package": null, "version": null}, {"name": "stg_shopify__metafield", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify.get_metafields"], "nodes": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__shop"]}, "compiled_path": "target/compiled/shopify/models/metafields/shopify__shop_metafields.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__shop\"\n)\n\n\n\nselect *\nfrom source_table\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.shopify__collection_metafields": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__collection_metafields", "resource_type": "model", "package_name": "shopify", "path": "metafields/shopify__collection_metafields.sql", "original_file_path": "models/metafields/shopify__collection_metafields.sql", "unique_id": "model.shopify.shopify__collection_metafields", "fqn": ["shopify", "metafields", "shopify__collection_metafields"], "alias": "shopify__collection_metafields", "checksum": {"name": "sha256", "checksum": "d41cda86572ae6aca208f8ba0de410df95ba41efef66928f720fc3771a2365ca"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Replica of the stg_shopify__collection model with the addition of metafields pivoted out from the stg_shopify__metafield model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/metafields/shopify_metafields.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table", "enabled": true}, "created_at": 1747951351.697386, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__collection_metafields\"", "raw_code": "{{ config(enabled=var('shopify_using_metafield', True) and (var('shopify_using_all_metafields', False) or var('shopify_using_collection_metafields', False)) ) }}\n\n{{ shopify.get_metafields( \n    source_object = \"stg_shopify__collection\", \n    reference_values = ['collection'],\n    id_column = \"collection_id\"\n) }}", "language": "sql", "refs": [{"name": "stg_shopify__metafield", "package": null, "version": null}, {"name": "stg_shopify__collection", "package": null, "version": null}, {"name": "stg_shopify__collection", "package": null, "version": null}, {"name": "stg_shopify__metafield", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify.get_metafields"], "nodes": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__collection"]}, "compiled_path": "target/compiled/shopify/models/metafields/shopify__collection_metafields.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection\"\n)\n\n\n\nselect *\nfrom source_table\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.shopify__order_metafields": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__order_metafields", "resource_type": "model", "package_name": "shopify", "path": "metafields/shopify__order_metafields.sql", "original_file_path": "models/metafields/shopify__order_metafields.sql", "unique_id": "model.shopify.shopify__order_metafields", "fqn": ["shopify", "metafields", "shopify__order_metafields"], "alias": "shopify__order_metafields", "checksum": {"name": "sha256", "checksum": "1cc0e1cff3fe52de7d415062d585a672e7af49e19c0596c993a5f874c0c10d9c"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Replica of the stg_shopify__order model with the addition of metafields pivoted out from the stg_shopify__metafield model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/metafields/shopify_metafields.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table", "enabled": true}, "created_at": 1747951351.698389, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_metafields\"", "raw_code": "{{ config(enabled=var('shopify_using_metafield', True) and (var('shopify_using_all_metafields', False) or var('shopify_using_order_metafields', False)) ) }}\n\n{{ shopify.get_metafields( \n    source_object = \"stg_shopify__order\", \n    reference_values = ['order'],\n    id_column = \"order_id\"\n) }}", "language": "sql", "refs": [{"name": "stg_shopify__metafield", "package": null, "version": null}, {"name": "stg_shopify__order", "package": null, "version": null}, {"name": "stg_shopify__order", "package": null, "version": null}, {"name": "stg_shopify__metafield", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify.get_metafields"], "nodes": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__order"]}, "compiled_path": "target/compiled/shopify/models/metafields/shopify__order_metafields.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\nwith source_table as (\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n)\n\n,\nlookup_object as (\n    select \n        *,\n        \n  \n    (\n      \n      case\n      when metafield_reference = 'blade_runner_returnauthorizations'\n        then value\n      else null\n      end\n    )\n    \n      \n        as blade_runner_returnauthorizations\n      \n    \n    ,\n  \n    (\n      \n      case\n      when metafield_reference = 'avengers_howmany'\n        then value\n      else null\n      end\n    )\n    \n      \n        as avengers_howmany\n      \n    \n    ,\n  \n    (\n      \n      case\n      when metafield_reference = 'star_wars_isinspace'\n        then value\n      else null\n      end\n    )\n    \n      \n        as star_wars_isinspace\n      \n    \n    ,\n  \n    (\n      \n      case\n      when metafield_reference = 'star_wars_numbersequels'\n        then value\n      else null\n      end\n    )\n    \n      \n        as star_wars_numbersequels\n      \n    \n    \n  \n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__metafield\"\n    where is_most_recent_record\n),\n\nfinal as (\n    select\n        \n            source_table.order_id,\n        \n            source_table.user_id,\n        \n            source_table.total_discounts,\n        \n            source_table.total_discounts_set,\n        \n            source_table.total_line_items_price,\n        \n            source_table.total_line_items_price_set,\n        \n            source_table.total_price,\n        \n            source_table.total_price_set,\n        \n            source_table.total_tax_set,\n        \n            source_table.total_tax,\n        \n            source_table.source_name,\n        \n            source_table.subtotal_price,\n        \n            source_table.has_taxes_included,\n        \n            source_table.total_weight,\n        \n            source_table.total_tip_received,\n        \n            source_table.landing_site_base_url,\n        \n            source_table.location_id,\n        \n            source_table.name,\n        \n            source_table.note,\n        \n            source_table.number,\n        \n            source_table.order_number,\n        \n            source_table.cancel_reason,\n        \n            source_table.cart_token,\n        \n            source_table.checkout_token,\n        \n            source_table.created_timestamp,\n        \n            source_table.cancelled_timestamp,\n        \n            source_table.closed_timestamp,\n        \n            source_table.processed_timestamp,\n        \n            source_table.updated_timestamp,\n        \n            source_table.currency,\n        \n            source_table.customer_id,\n        \n            source_table.email,\n        \n            source_table.financial_status,\n        \n            source_table.fulfillment_status,\n        \n            source_table.referring_site,\n        \n            source_table.billing_address_address_1,\n        \n            source_table.billing_address_address_2,\n        \n            source_table.billing_address_city,\n        \n            source_table.billing_address_company,\n        \n            source_table.billing_address_country,\n        \n            source_table.billing_address_country_code,\n        \n            source_table.billing_address_first_name,\n        \n            source_table.billing_address_last_name,\n        \n            source_table.billing_address_latitude,\n        \n            source_table.billing_address_longitude,\n        \n            source_table.billing_address_name,\n        \n            source_table.billing_address_phone,\n        \n            source_table.billing_address_province,\n        \n            source_table.billing_address_province_code,\n        \n            source_table.billing_address_zip,\n        \n            source_table.browser_ip,\n        \n            source_table.total_shipping_price_set,\n        \n            source_table.shipping_address_address_1,\n        \n            source_table.shipping_address_address_2,\n        \n            source_table.shipping_address_city,\n        \n            source_table.shipping_address_company,\n        \n            source_table.shipping_address_country,\n        \n            source_table.shipping_address_country_code,\n        \n            source_table.shipping_address_first_name,\n        \n            source_table.shipping_address_last_name,\n        \n            source_table.shipping_address_latitude,\n        \n            source_table.shipping_address_longitude,\n        \n            source_table.shipping_address_name,\n        \n            source_table.shipping_address_phone,\n        \n            source_table.shipping_address_province,\n        \n            source_table.shipping_address_province_code,\n        \n            source_table.shipping_address_zip,\n        \n            source_table.token,\n        \n            source_table.app_id,\n        \n            source_table.checkout_id,\n        \n            source_table.client_details_user_agent,\n        \n            source_table.customer_locale,\n        \n            source_table.order_status_url,\n        \n            source_table.presentment_currency,\n        \n            source_table.is_test_order,\n        \n            source_table.is_deleted,\n        \n            source_table.has_buyer_accepted_marketing,\n        \n            source_table.is_confirmed,\n        \n            source_table._fivetran_synced,\n        \n            source_table.source_relation\n        \n        \n            , max(lookup_object.blade_runner_returnauthorizations) as metafield_blade_runner_returnauthorizations\n        \n            , max(lookup_object.avengers_howmany) as metafield_avengers_howmany\n        \n            , max(lookup_object.star_wars_isinspace) as metafield_star_wars_isinspace\n        \n            , max(lookup_object.star_wars_numbersequels) as metafield_star_wars_numbersequels\n        \n    from source_table\n    left join lookup_object \n        on lookup_object.owner_resource_id = source_table.order_id\n        and lower(lookup_object.owner_resource) in ('order')\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80\n)\n\nselect *\nfrom final\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.int_shopify__customer_email_rollup": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__customer_email_rollup", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__customer_email_rollup.sql", "original_file_path": "models/intermediate/int_shopify__customer_email_rollup.sql", "unique_id": "model.shopify.int_shopify__customer_email_rollup", "fqn": ["shopify", "intermediate", "int_shopify__customer_email_rollup"], "alias": "int_shopify__customer_email_rollup", "checksum": {"name": "sha256", "checksum": "749547bd2069f90ac9da04db3e4a6fa95c2532a4bd216bd1be7c03291d751a57"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "view"}, "created_at": 1747951351.701207, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"int_shopify__customer_email_rollup\"", "raw_code": "with customers as (\n\n    select \n        *,\n        row_number() over(\n            partition by {{ shopify.shopify_partition_by_cols('email', 'source_relation') }}\n            order by created_timestamp desc) \n            as customer_index\n\n    from {{ var('shopify_customer') }}\n    where email is not null -- nonsensical to include any null emails here\n\n), customer_tags as (\n\n    select \n        *\n    from {{ var('shopify_customer_tag' )}}\n\n), rollup_customers as (\n\n    select\n        -- fields to group by\n        lower(customers.email) as email,\n        customers.source_relation,\n\n        -- fields to string agg together\n        {{ fivetran_utils.string_agg(\"distinct cast(customers.customer_id as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as customer_ids,\n        {{ fivetran_utils.string_agg(\"distinct cast(customers.phone as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as phone_numbers,\n        {{ fivetran_utils.string_agg(\"distinct cast(customer_tags.value as \" ~ dbt.type_string() ~ \")\", \"', '\") }} as customer_tags,\n\n        -- fields to take aggregates of\n        min(customers.created_timestamp) as first_account_created_at,\n        max(customers.created_timestamp) as last_account_created_at,\n        max(customers.updated_timestamp) as last_updated_at,\n        max(customers.marketing_consent_updated_at) as marketing_consent_updated_at,\n        max(customers._fivetran_synced) as last_fivetran_synced,\n\n        -- take true if ever given for boolean fields\n        {{ fivetran_utils.max_bool(\"case when customers.customer_index = 1 then customers.is_tax_exempt else null end\") }} as is_tax_exempt, -- since this changes every year\n        {{ fivetran_utils.max_bool(\"customers.is_verified_email\") }} as is_verified_email\n\n        -- for all other fields, just take the latest value\n        {% set cols = adapter.get_columns_in_relation(ref('stg_shopify__customer')) %}\n        {% set except_cols = ['_fivetran_synced', 'email', 'source_relation', 'customer_id', 'phone', 'created_at', \n                                'marketing_consent_updated_at', 'orders_count', 'total_spent', 'created_timestamp', 'updated_timestamp',\n                                'is_tax_exempt', 'is_verified_email'] %}\n        {% for col in cols %}\n            {% if col.column|lower not in except_cols %}\n            , max(case when customers.customer_index = 1 then customers.{{ col.column }} else null end) as {{ col.column }}\n            {% endif %}\n        {% endfor %}\n\n    from customers \n    left join customer_tags\n        on customers.customer_id = customer_tags.customer_id\n        and customers.source_relation = customer_tags.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom rollup_customers", "language": "sql", "refs": [{"name": "stg_shopify__customer", "package": null, "version": null}, {"name": "stg_shopify__customer_tag", "package": null, "version": null}, {"name": "stg_shopify__customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shopify.shopify_partition_by_cols", "macro.dbt.type_string", "macro.fivetran_utils.string_agg", "macro.fivetran_utils.max_bool"], "nodes": ["model.shopify_source.stg_shopify__customer", "model.shopify_source.stg_shopify__customer_tag"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__customer_email_rollup.sql", "compiled": true, "compiled_code": "with customers as (\n\n    select \n        *,\n        row_number() over(\n            partition by \n\n\n    email\n\n\n            order by created_timestamp desc) \n            as customer_index\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n    where email is not null -- nonsensical to include any null emails here\n\n), customer_tags as (\n\n    select \n        *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tag\"\n\n), rollup_customers as (\n\n    select\n        -- fields to group by\n        lower(customers.email) as email,\n        customers.source_relation,\n\n        -- fields to string agg together\n        \n    string_agg(distinct cast(customers.customer_id as TEXT), ', ')\n\n as customer_ids,\n        \n    string_agg(distinct cast(customers.phone as TEXT), ', ')\n\n as phone_numbers,\n        \n    string_agg(distinct cast(customer_tags.value as TEXT), ', ')\n\n as customer_tags,\n\n        -- fields to take aggregates of\n        min(customers.created_timestamp) as first_account_created_at,\n        max(customers.created_timestamp) as last_account_created_at,\n        max(customers.updated_timestamp) as last_updated_at,\n        max(customers.marketing_consent_updated_at) as marketing_consent_updated_at,\n        max(customers._fivetran_synced) as last_fivetran_synced,\n\n        -- take true if ever given for boolean fields\n        \n\n    bool_or( case when customers.customer_index = 1 then customers.is_tax_exempt else null end )\n\n as is_tax_exempt, -- since this changes every year\n        \n\n    bool_or( customers.is_verified_email )\n\n as is_verified_email\n\n        -- for all other fields, just take the latest value\n        \n        \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.first_name else null end) as first_name\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.last_name else null end) as last_name\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.default_address_id else null end) as default_address_id\n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.account_state else null end) as account_state\n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.note else null end) as note\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.currency else null end) as currency\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_consent_state else null end) as marketing_consent_state\n            \n        \n            \n            , max(case when customers.customer_index = 1 then customers.marketing_opt_in_level else null end) as marketing_opt_in_level\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n    from customers \n    left join customer_tags\n        on customers.customer_id = customer_tags.customer_id\n        and customers.source_relation = customer_tags.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom rollup_customers", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["email", "source_relation"], "time_spine": null}, "model.shopify.int_shopify__inventory_level__aggregates": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__inventory_level__aggregates", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__inventory_level__aggregates.sql", "original_file_path": "models/intermediate/int_shopify__inventory_level__aggregates.sql", "unique_id": "model.shopify.int_shopify__inventory_level__aggregates", "fqn": ["shopify", "intermediate", "int_shopify__inventory_level__aggregates"], "alias": "int_shopify__inventory_level__aggregates", "checksum": {"name": "sha256", "checksum": "058b7a288667703f9eb3e15b60c057fd1764b987f886f1f3b21e00712bba7854"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951351.7015748, "relation_name": null, "raw_code": "with order_lines as (\n\n    select *\n    from {{ var('shopify_order_line') }}\n),\n\nfulfillment as (\n\n    select *\n    from {{ var('shopify_fulfillment') }}\n),\n\norders as (\n\n    select *\n    from {{ var('shopify_order') }}\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from {{ ref('shopify__orders__order_refunds') }}\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        {% for status in ['pending', 'open', 'success', 'cancelled', 'error', 'failure'] %}\n        , count(distinct case when fulfillment_status = '{{ status }}' then fulfillment_id end) as count_fulfillment_{{ status }}\n        {% endfor %}\n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    {{ dbt_utils.group_by(n=3) }}\n)\n\nselect *\nfrom aggregated", "language": "sql", "refs": [{"name": "stg_shopify__order_line", "package": null, "version": null}, {"name": "stg_shopify__fulfillment", "package": null, "version": null}, {"name": "stg_shopify__order", "package": null, "version": null}, {"name": "shopify__orders__order_refunds", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__fulfillment", "model.shopify_source.stg_shopify__order", "model.shopify.shopify__orders__order_refunds"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__inventory_level__aggregates.sql", "compiled": true, "compiled_code": "with  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n), order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__orders__order_refunds", "sql": " __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["location_id", "source_relation", "variant_id"], "time_spine": null}, "model.shopify.int_shopify__discount_code_enriched": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__discount_code_enriched", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__discount_code_enriched.sql", "original_file_path": "models/intermediate/int_shopify__discount_code_enriched.sql", "unique_id": "model.shopify.int_shopify__discount_code_enriched", "fqn": ["shopify", "intermediate", "int_shopify__discount_code_enriched"], "alias": "int_shopify__discount_code_enriched", "checksum": {"name": "sha256", "checksum": "6063215438747a7456fa74071549f0b470e24e4e8d26d6ffc1b37e0972265276"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951351.7041678, "relation_name": null, "raw_code": "with discount_redeem_codes as (\n    \n    select *\n    from {{ var('shopify_discount_redeem_code') }}\n),\n\ndiscount_applications as (\n\n    select *\n    from {{ var('shopify_discount_application') }}\n),\n\nunified_discount_codes as (\n\n    select\n        discount_code_id,\n        'basic' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from {{ var('shopify_discount_code_basic') }}\n\n    union all\n    \n    select\n        discount_code_id,\n        'bxgy' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from {{ var('shopify_discount_code_bxgy') }}\n\n    union all\n    \n    select\n        discount_code_id,\n        'free_shipping' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from {{ var('shopify_discount_code_free_shipping') }}\n\n    {% if var('shopify_using_discount_code_app', False) %}\n    \n    union all\n\n    select  \n        discount_code_id,\n        'app' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from {{ var('shopify_discount_code_app') }}\n    {% endif %}\n),\n\ndiscounts_with_codes as (\n\n    select\n        discount_redeem_codes.code,\n        unified_discount_codes.*\n    from unified_discount_codes \n    left join discount_redeem_codes \n        on unified_discount_codes.discount_code_id = discount_redeem_codes.discount_id\n        and unified_discount_codes.source_relation = discount_redeem_codes.source_relation\n),\n\ndiscounts_with_applications as (\n\n    select\n        discounts_with_codes.*,\n        discount_applications.allocation_method,\n        discount_applications.description,\n        discount_applications.target_selection,\n        discount_applications.target_type,\n        discount_applications.type as application_type,\n        discount_applications.value,\n        discount_applications.value_type\n    from discounts_with_codes\n    left join discount_applications \n        on discounts_with_codes.code = discount_applications.code\n        and discounts_with_codes.source_relation = discount_applications.source_relation\n)\n\nselect *\nfrom discounts_with_applications", "language": "sql", "refs": [{"name": "stg_shopify__discount_redeem_code", "package": null, "version": null}, {"name": "stg_shopify__discount_application", "package": null, "version": null}, {"name": "stg_shopify__discount_code_basic", "package": null, "version": null}, {"name": "stg_shopify__discount_code_bxgy", "package": null, "version": null}, {"name": "stg_shopify__discount_code_free_shipping", "package": null, "version": null}, {"name": "stg_shopify__discount_code_app", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.shopify_source.stg_shopify__discount_redeem_code", "model.shopify_source.stg_shopify__discount_application", "model.shopify_source.stg_shopify__discount_code_basic", "model.shopify_source.stg_shopify__discount_code_bxgy", "model.shopify_source.stg_shopify__discount_code_free_shipping", "model.shopify_source.stg_shopify__discount_code_app"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__discount_code_enriched.sql", "compiled": true, "compiled_code": "with discount_redeem_codes as (\n    \n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code\"\n),\n\ndiscount_applications as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application\"\n),\n\nunified_discount_codes as (\n\n    select\n        discount_code_id,\n        'basic' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'bxgy' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'free_shipping' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping\"\n\n    \n    \n    union all\n\n    select  \n        discount_code_id,\n        'app' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app\"\n    \n),\n\ndiscounts_with_codes as (\n\n    select\n        discount_redeem_codes.code,\n        unified_discount_codes.*\n    from unified_discount_codes \n    left join discount_redeem_codes \n        on unified_discount_codes.discount_code_id = discount_redeem_codes.discount_id\n        and unified_discount_codes.source_relation = discount_redeem_codes.source_relation\n),\n\ndiscounts_with_applications as (\n\n    select\n        discounts_with_codes.*,\n        discount_applications.allocation_method,\n        discount_applications.description,\n        discount_applications.target_selection,\n        discount_applications.target_type,\n        discount_applications.type as application_type,\n        discount_applications.value,\n        discount_applications.value_type\n    from discounts_with_codes\n    left join discount_applications \n        on discounts_with_codes.code = discount_applications.code\n        and discounts_with_codes.source_relation = discount_applications.source_relation\n)\n\nselect *\nfrom discounts_with_applications", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["code", "source_relation"], "time_spine": null}, "model.shopify.int_shopify__products_with_aggregates": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__products_with_aggregates", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__products_with_aggregates.sql", "original_file_path": "models/intermediate/int_shopify__products_with_aggregates.sql", "unique_id": "model.shopify.int_shopify__products_with_aggregates", "fqn": ["shopify", "intermediate", "int_shopify__products_with_aggregates"], "alias": "int_shopify__products_with_aggregates", "checksum": {"name": "sha256", "checksum": "aa8200a37abd180cba490ed96ef7e7bc6fce4d314bdbd799995afebf107e2ba4"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951351.7038689, "relation_name": null, "raw_code": "with products as (\n\n    select *\n    from {{ var('shopify_product') }}\n), \n\ncollection_product as (\n\n    select *\n    from {{ var('shopify_collection_product') }}\n),\n\ncollection as (\n\n    select *\n    from {{ var('shopify_collection') }}\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from {{ var('shopify_product_tag') }}\n),\n\nproduct_variant as (\n\n    select *\n    from {{ var('shopify_product_variant') }}\n), \n\nproduct_media as (\n\n    select *\n    from {{ var('shopify_product_media') }}\n),\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        {{ fivetran_utils.string_agg(field_to_agg='collection.title', delimiter=\"', '\") }} as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        {{ fivetran_utils.string_agg(field_to_agg='value', delimiter=\"', '\") }} as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nmedia_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(distinct media_id) as count_media\n    from product_media\n    group by 1,2\n), \n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(media_aggregated.count_media, 0) > 0 as has_product_media\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join media_aggregated\n        on products.product_id = media_aggregated.product_id\n        and products.source_relation = media_aggregated.source_relation\n)\n\nselect *\nfrom joined", "language": "sql", "refs": [{"name": "stg_shopify__product", "package": null, "version": null}, {"name": "stg_shopify__collection_product", "package": null, "version": null}, {"name": "stg_shopify__collection", "package": null, "version": null}, {"name": "stg_shopify__product_tag", "package": null, "version": null}, {"name": "stg_shopify__product_variant", "package": null, "version": null}, {"name": "stg_shopify__product_media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.shopify_source.stg_shopify__product", "model.shopify_source.stg_shopify__collection_product", "model.shopify_source.stg_shopify__collection", "model.shopify_source.stg_shopify__product_tag", "model.shopify_source.stg_shopify__product_variant", "model.shopify_source.stg_shopify__product_media"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__products_with_aggregates.sql", "compiled": true, "compiled_code": "with products as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"\n), \n\nproduct_media as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media\"\n),\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nmedia_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(distinct media_id) as count_media\n    from product_media\n    group by 1,2\n), \n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(media_aggregated.count_media, 0) > 0 as has_product_media\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join media_aggregated\n        on products.product_id = media_aggregated.product_id\n        and products.source_relation = media_aggregated.source_relation\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_id", "source_relation"], "time_spine": null}, "model.shopify.int_shopify__discounts__order_aggregates": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__discounts__order_aggregates", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__discounts__order_aggregates.sql", "original_file_path": "models/intermediate/int_shopify__discounts__order_aggregates.sql", "unique_id": "model.shopify.int_shopify__discounts__order_aggregates", "fqn": ["shopify", "intermediate", "int_shopify__discounts__order_aggregates"], "alias": "int_shopify__discounts__order_aggregates", "checksum": {"name": "sha256", "checksum": "4beb1b1d58378cfd7da7cc12d8fa5b63c869432ad2d5700740a65e30a4495b5d"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951351.701824, "relation_name": null, "raw_code": "with order_discount_code as (\n\n    select *\n    from {{ var('shopify_order_discount_code') }}\n),\n\norders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated", "language": "sql", "refs": [{"name": "stg_shopify__order_discount_code", "package": null, "version": null}, {"name": "shopify__orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.shopify_source.stg_shopify__order_discount_code", "model.shopify.shopify__orders"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__discounts__order_aggregates.sql", "compiled": true, "compiled_code": "with order_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["code", "source_relation", "type"], "time_spine": null}, "model.shopify.shopify__orders__order_line_aggregates": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__orders__order_line_aggregates", "resource_type": "model", "package_name": "shopify", "path": "intermediate/shopify__orders__order_line_aggregates.sql", "original_file_path": "models/intermediate/shopify__orders__order_line_aggregates.sql", "unique_id": "model.shopify.shopify__orders__order_line_aggregates", "fqn": ["shopify", "intermediate", "shopify__orders__order_line_aggregates"], "alias": "shopify__orders__order_line_aggregates", "checksum": {"name": "sha256", "checksum": "d5560999f6cddaf9f36ab2783f209800ec0b4af4de7ca772a10901ac4f24d294"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "table"}, "created_at": 1747951351.69978, "relation_name": "\"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"", "raw_code": "{{ config(materialized='table') }}\n\nwith order_line as (\n\n    select *\n    from {{ var('shopify_order_line') }}\n\n), tax as (\n\n    select\n        *\n    from {{ var('shopify_tax_line') }}\n\n), shipping as (\n\n    select\n        *\n    from {{ ref('int_shopify__order__shipping_aggregates')}}\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) as price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_shopify__order_line", "package": null, "version": null}, {"name": "stg_shopify__tax_line", "package": null, "version": null}, {"name": "int_shopify__order__shipping_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__tax_line", "model.shopify.int_shopify__order__shipping_aggregates"]}, "compiled_path": "target/compiled/shopify/models/intermediate/shopify__orders__order_line_aggregates.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), order_line as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"\n\n), tax as (\n\n    select\n        *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tax_line\"\n\n), shipping as (\n\n    select\n        *\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n\n), tax_aggregates as (\n\n    select\n        order_line_id,\n        source_relation,\n        sum(price) as price\n\n    from tax\n    group by 1,2\n\n), order_line_aggregates as (\n\n    select \n        order_line.order_id,\n        order_line.source_relation,\n        count(*) as line_item_count,\n        sum(order_line.quantity) as order_total_quantity,\n        sum(tax_aggregates.price) as order_total_tax,\n        sum(order_line.total_discount) as order_total_discount\n\n    from order_line\n    left join tax_aggregates\n        on tax_aggregates.order_line_id = order_line.order_line_id\n        and tax_aggregates.source_relation = order_line.source_relation\n    group by 1,2\n\n), final as (\n\n    select\n        order_line_aggregates.order_id,\n        order_line_aggregates.source_relation,\n        order_line_aggregates.line_item_count,\n        order_line_aggregates.order_total_quantity,\n        order_line_aggregates.order_total_tax,\n        order_line_aggregates.order_total_discount,\n        shipping.shipping_price as order_total_shipping,\n        shipping.discounted_shipping_price as order_total_shipping_with_discounts,\n        shipping.shipping_tax as order_total_shipping_tax\n\n    from order_line_aggregates\n    left join shipping\n        on shipping.order_id = order_line_aggregates.order_id\n        and shipping.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__order__shipping_aggregates", "sql": " __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_id", "source_relation"], "time_spine": null}, "model.shopify.int_shopify__order__shipping_aggregates": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__order__shipping_aggregates", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__order__shipping_aggregates.sql", "original_file_path": "models/intermediate/int_shopify__order__shipping_aggregates.sql", "unique_id": "model.shopify.int_shopify__order__shipping_aggregates", "fqn": ["shopify", "intermediate", "int_shopify__order__shipping_aggregates"], "alias": "int_shopify__order__shipping_aggregates", "checksum": {"name": "sha256", "checksum": "86c15f2aa0570dc71557db52cdd9c433b5b6a9dca050f981ab8136012f0f470f"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951351.7030468, "relation_name": null, "raw_code": "with order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from {{ var('shopify_order_shipping_line') }}\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from {{ var('shopify_order_shipping_tax_line') }}\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated", "language": "sql", "refs": [{"name": "stg_shopify__order_shipping_line", "package": null, "version": null}, {"name": "stg_shopify__order_shipping_tax_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.shopify_source.stg_shopify__order_shipping_line", "model.shopify_source.stg_shopify__order_shipping_tax_line"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__order__shipping_aggregates.sql", "compiled": true, "compiled_code": "with order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_id", "source_relation"], "time_spine": null}, "model.shopify.int_shopify__product__order_line_aggregates": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__product__order_line_aggregates", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__product__order_line_aggregates.sql", "original_file_path": "models/intermediate/int_shopify__product__order_line_aggregates.sql", "unique_id": "model.shopify.int_shopify__product__order_line_aggregates", "fqn": ["shopify", "intermediate", "int_shopify__product__order_line_aggregates"], "alias": "int_shopify__product__order_line_aggregates", "checksum": {"name": "sha256", "checksum": "a1d9197bb23b4599a4ac7fad74e9b1efe64f4850934a1b3ce02eea3bc80e3937"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951351.7033842, "relation_name": null, "raw_code": "with order_lines as (\n\n    select *\n    from {{ ref('shopify__order_lines') }}\n\n), orders as (\n\n    select *\n    from {{ ref('shopify__orders')}}\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated", "language": "sql", "refs": [{"name": "shopify__order_lines", "package": null, "version": null}, {"name": "shopify__orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.shopify.shopify__order_lines", "model.shopify.shopify__orders"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__product__order_line_aggregates.sql", "compiled": true, "compiled_code": "with order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_id", "source_relation"], "time_spine": null}, "model.shopify.int_shopify__discounts__abandoned_checkouts": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__discounts__abandoned_checkouts", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__discounts__abandoned_checkouts.sql", "original_file_path": "models/intermediate/int_shopify__discounts__abandoned_checkouts.sql", "unique_id": "model.shopify.int_shopify__discounts__abandoned_checkouts", "fqn": ["shopify", "intermediate", "int_shopify__discounts__abandoned_checkouts"], "alias": "int_shopify__discounts__abandoned_checkouts", "checksum": {"name": "sha256", "checksum": "8c63376af41e25f771d2058d29155e579389d0ba83b078e3eab40df77bbe8de5"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1747951351.702334, "relation_name": null, "raw_code": "{{ config(enabled=var('shopify_using_abandoned_checkout', True)) }}\n\nwith abandoned_checkout as (\n\n    select *\n    from {{ var('shopify_abandoned_checkout') }}\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from {{ var('shopify_abandoned_checkout_discount_code') }}\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from {{ var('shopify_abandoned_checkout_shipping_line') }}\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout", "package": null, "version": null}, {"name": "stg_shopify__abandoned_checkout_discount_code", "package": null, "version": null}, {"name": "stg_shopify__abandoned_checkout_shipping_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout", "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__discounts__abandoned_checkouts.sql", "compiled": true, "compiled_code": "\n\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["code", "source_relation", "type"], "time_spine": null}, "model.shopify.int_shopify__daily_abandoned_checkouts": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__daily_abandoned_checkouts", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__daily_abandoned_checkouts.sql", "original_file_path": "models/intermediate/int_shopify__daily_abandoned_checkouts.sql", "unique_id": "model.shopify.int_shopify__daily_abandoned_checkouts", "fqn": ["shopify", "intermediate", "int_shopify__daily_abandoned_checkouts"], "alias": "int_shopify__daily_abandoned_checkouts", "checksum": {"name": "sha256", "checksum": "82baf85a508d2b8348b16e2f5d1b2154004e9eae6acf35dc66880b388f9680e9"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1747951350.902517, "relation_name": null, "raw_code": "{{ config(enabled=var('shopify_using_abandoned_checkout', True)) }}\n\nwith abandoned_checkout as (\n\n    select *\n    from {{ var('shopify_abandoned_checkout') }}\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast({{ dbt.date_trunc('day','created_at') }} as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc"], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__daily_abandoned_checkouts.sql", "compiled": true, "compiled_code": "\n\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_at) as date) as date_day,\n        count(distinct checkout_id) as count_abandoned_checkouts,\n        count(distinct customer_id) as count_customers_abandoned_checkout,\n        count(distinct email) as count_customer_emails_abandoned_checkout\n\n    from abandoned_checkout\n    group by 1,2\n)\n\nselect * \nfrom abandoned_checkout_aggregates", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.shopify__customers__order_aggregates": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__customers__order_aggregates", "resource_type": "model", "package_name": "shopify", "path": "intermediate/shopify__customers__order_aggregates.sql", "original_file_path": "models/intermediate/shopify__customers__order_aggregates.sql", "unique_id": "model.shopify.shopify__customers__order_aggregates", "fqn": ["shopify", "intermediate", "shopify__customers__order_aggregates"], "alias": "shopify__customers__order_aggregates", "checksum": {"name": "sha256", "checksum": "82336e6cc02d146583af1cc45dee1a1c7bfb4ef96d4855188e5cabf3e5f5e90b"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951351.6994119, "relation_name": null, "raw_code": "with orders as (\n\n    select *\n    from {{ var('shopify_order') }}\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from {{ ref('shopify__orders__order_line_aggregates') }}\n\n), transactions as (\n\n    select *\n    from {{ ref('shopify__transactions')}}\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    {{ dbt_utils.group_by(n=3) }}\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    \n    {{ dbt_utils.group_by(n=2) }}\n)\n\nselect *\nfrom aggregated", "language": "sql", "refs": [{"name": "stg_shopify__order", "package": null, "version": null}, {"name": "shopify__orders__order_line_aggregates", "package": null, "version": null}, {"name": "shopify__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.shopify_source.stg_shopify__order", "model.shopify.shopify__orders__order_line_aggregates", "model.shopify.shopify__transactions"]}, "compiled_path": "target/compiled/shopify/models/intermediate/shopify__customers__order_aggregates.sql", "compiled": true, "compiled_code": "with orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    \n    group by 1,2\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id", "source_relation"], "time_spine": null}, "model.shopify.shopify__orders__order_refunds": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "shopify__orders__order_refunds", "resource_type": "model", "package_name": "shopify", "path": "intermediate/shopify__orders__order_refunds.sql", "original_file_path": "models/intermediate/shopify__orders__order_refunds.sql", "unique_id": "model.shopify.shopify__orders__order_refunds", "fqn": ["shopify", "intermediate", "shopify__orders__order_refunds"], "alias": "shopify__orders__order_refunds", "checksum": {"name": "sha256", "checksum": "b3ef35b4caf837155133c8e3023704d7591c4dedd83597fb26fd2c35b3ef2103"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951351.700626, "relation_name": null, "raw_code": "with refunds as (\n\n    select *\n    from {{ var('shopify_refund') }}\n\n), order_line_refunds as (\n\n    select *\n    from {{ var('shopify_order_line_refund') }}\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join", "language": "sql", "refs": [{"name": "stg_shopify__refund", "package": null, "version": null}, {"name": "stg_shopify__order_line_refund", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.shopify_source.stg_shopify__refund", "model.shopify_source.stg_shopify__order_line_refund"]}, "compiled_path": "target/compiled/shopify/models/intermediate/shopify__orders__order_refunds.sql", "compiled": true, "compiled_code": "with refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.int_shopify__daily_orders": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__daily_orders", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__daily_orders.sql", "original_file_path": "models/intermediate/int_shopify__daily_orders.sql", "unique_id": "model.shopify.int_shopify__daily_orders", "fqn": ["shopify", "intermediate", "int_shopify__daily_orders"], "alias": "int_shopify__daily_orders", "checksum": {"name": "sha256", "checksum": "7c36ff8121f95cc7cb439601be47bb4da2aed71d5ad1fc7cd7cc0332b4df5811"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951350.9149818, "relation_name": null, "raw_code": "with orders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from {{ ref('shopify__order_lines') }}\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast({{ dbt.date_trunc('day','created_timestamp') }} as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast({{ dbt.date_trunc('day','orders.created_timestamp') }} as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "shopify__orders", "package": null, "version": null}, {"name": "shopify__order_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc"], "nodes": ["model.shopify.shopify__orders", "model.shopify.shopify__order_lines"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__daily_orders.sql", "compiled": true, "compiled_code": "with orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n    where not coalesce(is_deleted, false)\n),\n\norder_lines as(\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\n),\n\norder_aggregates as (\n\n    select\n        source_relation,\n        cast(date_trunc('day', created_timestamp) as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(line_item_count) as count_line_items,\n        avg(line_item_count) as avg_line_item_count,\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        sum(order_adjusted_total) as order_adjusted_total,\n        avg(order_adjusted_total) as avg_order_value,\n        sum(shipping_cost) as shipping_cost,\n        sum(order_adjustment_amount) as order_adjustment_amount,\n        sum(order_adjustment_tax_amount) as order_adjustment_tax_amount,\n        sum(refund_subtotal) as refund_subtotal,\n        sum(refund_total_tax) as refund_total_tax,\n        sum(total_discounts) as total_discounts,\n        avg(total_discounts) as avg_discount,\n        sum(shipping_discount_amount) as shipping_discount_amount,\n        avg(shipping_discount_amount) as avg_shipping_discount_amount,\n        sum(percentage_calc_discount_amount) as percentage_calc_discount_amount,\n        avg(percentage_calc_discount_amount) as avg_percentage_calc_discount_amount,\n        sum(fixed_amount_discount_amount) as fixed_amount_discount_amount,\n        avg(fixed_amount_discount_amount) as avg_fixed_amount_discount_amount,\n        sum(count_discount_codes_applied) as count_discount_codes_applied,\n        count(distinct location_id) as count_locations_ordered_from,\n        sum(case when count_discount_codes_applied > 0 then 1 else 0 end) as count_orders_with_discounts,\n        sum(case when refund_subtotal > 0 then 1 else 0 end) as count_orders_with_refunds,\n        min(created_timestamp) as first_order_timestamp,\n        max(created_timestamp) as last_order_timestamp\n\n    from orders\n    group by 1,2\n\n),\n\norder_line_aggregates as (\n\n    select\n        order_lines.source_relation,\n        cast(date_trunc('day', orders.created_timestamp) as date) as date_day,\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.refunded_quantity) as quantity_refunded,\n        sum(order_lines.quantity_net_refunds) as quantity_net,\n        sum(order_lines.quantity) / count(distinct order_lines.order_id) as avg_quantity_sold,\n        sum(order_lines.quantity_net_refunds) / count(distinct order_lines.order_id) as avg_quantity_net,\n        count(distinct order_lines.variant_id) as count_variants_sold, \n        count(distinct order_lines.product_id) as count_products_sold, \n        sum(case when order_lines.is_gift_card then order_lines.quantity_net_refunds else 0 end) as quantity_gift_cards_sold,\n        sum(case when order_lines.is_shipping_required then order_lines.quantity_net_refunds else 0 end) as quantity_requiring_shipping\n\n    from order_lines\n    left join orders -- just joining with order to get the created_timestamp\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n\n    group by 1,2\n),\n\nfinal as (\n\n    select \n        order_aggregates.*,\n        order_line_aggregates.quantity_sold,\n        order_line_aggregates.quantity_refunded,\n        order_line_aggregates.quantity_net,\n        order_line_aggregates.count_variants_sold,\n        order_line_aggregates.count_products_sold,\n        order_line_aggregates.quantity_gift_cards_sold,\n        order_line_aggregates.quantity_requiring_shipping,\n        order_line_aggregates.avg_quantity_sold,\n        order_line_aggregates.avg_quantity_net\n\n    from order_aggregates\n    left join order_line_aggregates\n        on order_aggregates.date_day = order_line_aggregates.date_day\n        and order_aggregates.source_relation = order_line_aggregates.source_relation\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.int_shopify__daily_fulfillment": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__daily_fulfillment", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__daily_fulfillment.sql", "original_file_path": "models/intermediate/int_shopify__daily_fulfillment.sql", "unique_id": "model.shopify.int_shopify__daily_fulfillment", "fqn": ["shopify", "intermediate", "int_shopify__daily_fulfillment"], "alias": "int_shopify__daily_fulfillment", "checksum": {"name": "sha256", "checksum": "219a579cbe3a8cfff98087ceee90515e31492dafde2188ff6d0052087c97d574"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral", "enabled": true}, "created_at": 1747951350.920154, "relation_name": null, "raw_code": "{{ config(enabled=var('shopify_using_fulfillment_event', false)) }}\n\nwith fulfillment_event as (\n\n    select *\n    from {{ var('shopify_fulfillment_event') }}\n),\n\nfulfillment_aggregates as (\n\n    select \n        source_relation,\n        cast({{ dbt.date_trunc('day','happened_at') }} as date) as date_day\n\n        {% for status in ['attempted_delivery', 'delayed', 'delivered', 'failure', 'in_transit', 'out_for_delivery', 'ready_for_pickup', 'picked_up', 'label_printed', 'label_purchased', 'confirmed']%}\n        , count(distinct case when lower(status) = '{{ status }}' then fulfillment_id end) as count_fulfillment_{{ status }}\n        {% endfor %}\n    \n    from fulfillment_event\n    group by 1,2\n\n)\n\nselect *\nfrom fulfillment_aggregates", "language": "sql", "refs": [{"name": "stg_shopify__fulfillment_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc"], "nodes": ["model.shopify_source.stg_shopify__fulfillment_event"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__daily_fulfillment.sql", "compiled": true, "compiled_code": "\n\nwith fulfillment_event as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_event\"\n),\n\nfulfillment_aggregates as (\n\n    select \n        source_relation,\n        cast(date_trunc('day', happened_at) as date) as date_day\n\n        \n        , count(distinct case when lower(status) = 'attempted_delivery' then fulfillment_id end) as count_fulfillment_attempted_delivery\n        \n        , count(distinct case when lower(status) = 'delayed' then fulfillment_id end) as count_fulfillment_delayed\n        \n        , count(distinct case when lower(status) = 'delivered' then fulfillment_id end) as count_fulfillment_delivered\n        \n        , count(distinct case when lower(status) = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n        , count(distinct case when lower(status) = 'in_transit' then fulfillment_id end) as count_fulfillment_in_transit\n        \n        , count(distinct case when lower(status) = 'out_for_delivery' then fulfillment_id end) as count_fulfillment_out_for_delivery\n        \n        , count(distinct case when lower(status) = 'ready_for_pickup' then fulfillment_id end) as count_fulfillment_ready_for_pickup\n        \n        , count(distinct case when lower(status) = 'picked_up' then fulfillment_id end) as count_fulfillment_picked_up\n        \n        , count(distinct case when lower(status) = 'label_printed' then fulfillment_id end) as count_fulfillment_label_printed\n        \n        , count(distinct case when lower(status) = 'label_purchased' then fulfillment_id end) as count_fulfillment_label_purchased\n        \n        , count(distinct case when lower(status) = 'confirmed' then fulfillment_id end) as count_fulfillment_confirmed\n        \n    \n    from fulfillment_event\n    group by 1,2\n\n)\n\nselect *\nfrom fulfillment_aggregates", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.shopify.int_shopify__emails__order_aggregates": {"database": "postgres", "schema": "shopify_integration_tests_17_shopify", "name": "int_shopify__emails__order_aggregates", "resource_type": "model", "package_name": "shopify", "path": "intermediate/int_shopify__emails__order_aggregates.sql", "original_file_path": "models/intermediate/int_shopify__emails__order_aggregates.sql", "unique_id": "model.shopify.int_shopify__emails__order_aggregates", "fqn": ["shopify", "intermediate", "int_shopify__emails__order_aggregates"], "alias": "int_shopify__emails__order_aggregates", "checksum": {"name": "sha256", "checksum": "a634e4aae220414328b7ab66cf8f782b7c6b722bf70dc8fa6c0888e84a8075a2"}, "config": {"enabled": true, "alias": null, "schema": "shopify", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "shopify://models/intermediate/intermediate.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'shopify_integrations_tests_sqlw' if target.name == 'databricks-sql' else 'shopify' }}", "materialized": "ephemeral"}, "created_at": 1747951351.700916, "relation_name": null, "raw_code": "with orders as (\n\n    select *\n    from {{ var('shopify_order') }}\n\n), order_aggregates as (\n\n    select *\n    from {{ ref('shopify__orders__order_line_aggregates') }}\n\n), transactions as (\n\n    select *\n    from {{ ref('shopify__transactions')}}\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    {{ dbt_utils.group_by(n=3) }}\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from {{ var('shopify_customer') }}\n    where email is not null\n    {{ dbt_utils.group_by(n=3) }}\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated", "language": "sql", "refs": [{"name": "stg_shopify__order", "package": null, "version": null}, {"name": "shopify__orders__order_line_aggregates", "package": null, "version": null}, {"name": "shopify__transactions", "package": null, "version": null}, {"name": "stg_shopify__customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.shopify_source.stg_shopify__order", "model.shopify.shopify__orders__order_line_aggregates", "model.shopify.shopify__transactions", "model.shopify_source.stg_shopify__customer"]}, "compiled_path": "target/compiled/shopify/models/intermediate/int_shopify__emails__order_aggregates.sql", "compiled": true, "compiled_code": "with orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["email", "source_relation"], "time_spine": null}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation"], "alias": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be"}, "created_at": 1747951351.11593, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be\") }}", "language": "sql", "refs": [{"name": "stg_shopify__customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__customer"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_d00da641d0cc06ebef083c43ddfae4be.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__customer", "attached_node": "model.shopify_source.stg_shopify__customer", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__customer')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation"], "alias": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3"}, "created_at": 1747951351.127258, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_line_refund", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_line_refund"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_33b2f20dc9ea13a94a10a635383becf3.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_refund_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    group by order_line_refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order_line_refund", "attached_node": "model.shopify_source.stg_shopify__order_line_refund", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_line_refund_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_line_refund')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation"], "alias": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec"}, "created_at": 1747951351.1297019, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_line"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_d47b5ce640a9316320c17565339223ec.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"\n    group by order_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order_line", "attached_node": "model.shopify_source.stg_shopify__order_line", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_line_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_line')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation"], "alias": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e"}, "created_at": 1747951351.132532, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_3f5201314db17428b709b11583cd0f7e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order", "attached_node": "model.shopify_source.stg_shopify__order", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation"], "alias": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d"}, "created_at": 1747951351.135139, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d\") }}", "language": "sql", "refs": [{"name": "stg_shopify__product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_eb9efccfbdaff32f938da98287403a1d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__product", "attached_node": "model.shopify_source.stg_shopify__product", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__product')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation"], "alias": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e"}, "created_at": 1747951351.1384242, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e\") }}", "language": "sql", "refs": [{"name": "stg_shopify__product_variant", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_variant"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_84d19b85e52ebcaca03bcefe4191b60e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        variant_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"\n    group by variant_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__product_variant", "attached_node": "model.shopify_source.stg_shopify__product_variant", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["variant_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__product_variant')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation"], "alias": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92"}, "created_at": 1747951351.1406348, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92\") }}", "language": "sql", "refs": [{"name": "stg_shopify__transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__transaction"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_47aceb0b987e9f3279b4301c10167f92.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__transaction\"\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__transaction", "attached_node": "model.shopify_source.stg_shopify__transaction", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__transaction')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation"], "alias": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659"}, "created_at": 1747951351.142841, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659\") }}", "language": "sql", "refs": [{"name": "stg_shopify__refund", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__refund"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_b6b83918833e84e9f886aa4151e4e659.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__refund", "attached_node": "model.shopify_source.stg_shopify__refund", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["refund_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__refund')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation"], "alias": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207"}, "created_at": 1747951351.145308, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_adjustment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_adjustment"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_8c4679057a756bef5907cd3799634207.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_adjustment_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_adjustment\"\n    group by order_adjustment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order_adjustment", "attached_node": "model.shopify_source.stg_shopify__order_adjustment", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_adjustment_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_adjustment')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__abandoned_checkout_checkout_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__abandoned_checkout_checkout_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db", "fqn": ["shopify_source", "not_null_stg_shopify__abandoned_checkout_checkout_id"], "alias": "not_null_stg_shopify__abandoned_checkout_checkout_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.1477509, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__abandoned_checkout_checkout_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\nwhere checkout_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "checkout_id", "file_key_name": "models.stg_shopify__abandoned_checkout", "attached_node": "model.shopify_source.stg_shopify__abandoned_checkout", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "checkout_id", "model": "{{ get_where_subquery(ref('stg_shopify__abandoned_checkout')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_510de7fe9fed2e764ff993311b24512f.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation"], "alias": "dbt_utils_unique_combination_o_510de7fe9fed2e764ff993311b24512f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_510de7fe9fed2e764ff993311b24512f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_510de7fe9fed2e764ff993311b24512f"}, "created_at": 1747951351.148694, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_510de7fe9fed2e764ff993311b24512f\") }}", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_510de7fe9fed2e764ff993311b24512f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n    group by checkout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__abandoned_checkout", "attached_node": "model.shopify_source.stg_shopify__abandoned_checkout", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["checkout_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__abandoned_checkout')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__collection_product_collection_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__collection_product_collection_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a", "fqn": ["shopify_source", "not_null_stg_shopify__collection_product_collection_id"], "alias": "not_null_stg_shopify__collection_product_collection_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.151816, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__collection_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__collection_product"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__collection_product_collection_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product\"\nwhere collection_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "collection_id", "file_key_name": "models.stg_shopify__collection_product", "attached_node": "model.shopify_source.stg_shopify__collection_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "collection_id", "model": "{{ get_where_subquery(ref('stg_shopify__collection_product')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__collection_product_product_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__collection_product_product_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1", "fqn": ["shopify_source", "not_null_stg_shopify__collection_product_product_id"], "alias": "not_null_stg_shopify__collection_product_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.1529, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__collection_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__collection_product"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__collection_product_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product\"\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_shopify__collection_product", "attached_node": "model.shopify_source.stg_shopify__collection_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_shopify__collection_product')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_81b2e792631c9528308baec995c4457e.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation"], "alias": "dbt_utils_unique_combination_o_81b2e792631c9528308baec995c4457e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_81b2e792631c9528308baec995c4457e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_81b2e792631c9528308baec995c4457e"}, "created_at": 1747951351.153832, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_81b2e792631c9528308baec995c4457e\") }}", "language": "sql", "refs": [{"name": "stg_shopify__collection_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__collection_product"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_81b2e792631c9528308baec995c4457e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, product_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product\"\n    group by collection_id, product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__collection_product", "attached_node": "model.shopify_source.stg_shopify__collection_product", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["collection_id", "product_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__collection_product')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__collection_collection_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__collection_collection_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2", "fqn": ["shopify_source", "not_null_stg_shopify__collection_collection_id"], "alias": "not_null_stg_shopify__collection_collection_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.1564438, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__collection", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__collection"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__collection_collection_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collection_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection\"\nwhere collection_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "collection_id", "file_key_name": "models.stg_shopify__collection", "attached_node": "model.shopify_source.stg_shopify__collection", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "collection_id", "model": "{{ get_where_subquery(ref('stg_shopify__collection')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_14fee6f32c2b11b1aeb15a320b269cad.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation"], "alias": "dbt_utils_unique_combination_o_14fee6f32c2b11b1aeb15a320b269cad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_14fee6f32c2b11b1aeb15a320b269cad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_14fee6f32c2b11b1aeb15a320b269cad"}, "created_at": 1747951351.157482, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_14fee6f32c2b11b1aeb15a320b269cad\") }}", "language": "sql", "refs": [{"name": "stg_shopify__collection", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__collection"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_14fee6f32c2b11b1aeb15a320b269cad.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        collection_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection\"\n    group by collection_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__collection", "attached_node": "model.shopify_source.stg_shopify__collection", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["collection_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__collection')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__customer_tag_index", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__customer_tag_index.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd", "fqn": ["shopify_source", "not_null_stg_shopify__customer_tag_index"], "alias": "not_null_stg_shopify__customer_tag_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.159936, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__customer_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__customer_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__customer_tag_index.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tag\"\nwhere index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "index", "file_key_name": "models.stg_shopify__customer_tag", "attached_node": "model.shopify_source.stg_shopify__customer_tag", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "index", "model": "{{ get_where_subquery(ref('stg_shopify__customer_tag')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__customer_tag_customer_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__customer_tag_customer_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351", "fqn": ["shopify_source", "not_null_stg_shopify__customer_tag_customer_id"], "alias": "not_null_stg_shopify__customer_tag_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.160917, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__customer_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__customer_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__customer_tag_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tag\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_shopify__customer_tag", "attached_node": "model.shopify_source.stg_shopify__customer_tag", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_shopify__customer_tag')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_74413a4ba1ed7489c529e1eb66cfc7d6.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_74413a4ba1ed7489c529e1eb66cfc7d6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_74413a4ba1ed7489c529e1eb66cfc7d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_74413a4ba1ed7489c529e1eb66cfc7d6"}, "created_at": 1747951351.161831, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_74413a4ba1ed7489c529e1eb66cfc7d6\") }}", "language": "sql", "refs": [{"name": "stg_shopify__customer_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__customer_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_74413a4ba1ed7489c529e1eb66cfc7d6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer_tag\"\n    group by customer_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__customer_tag", "attached_node": "model.shopify_source.stg_shopify__customer_tag", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__customer_tag')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__fulfillment_fulfillment_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__fulfillment_fulfillment_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e", "fqn": ["shopify_source", "not_null_stg_shopify__fulfillment_fulfillment_id"], "alias": "not_null_stg_shopify__fulfillment_fulfillment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.1643, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__fulfillment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__fulfillment"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__fulfillment_fulfillment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fulfillment_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"\nwhere fulfillment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fulfillment_id", "file_key_name": "models.stg_shopify__fulfillment", "attached_node": "model.shopify_source.stg_shopify__fulfillment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fulfillment_id", "model": "{{ get_where_subquery(ref('stg_shopify__fulfillment')) }}"}, "namespace": null}}, "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure", "resource_type": "test", "package_name": "shopify_source", "path": "accepted_values_stg_shopify__f_3835f4e405a07a7e446c888723f749dd.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70", "fqn": ["shopify_source", "accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure"], "alias": "accepted_values_stg_shopify__f_3835f4e405a07a7e446c888723f749dd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_shopify__f_3835f4e405a07a7e446c888723f749dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_values_stg_shopify__f_3835f4e405a07a7e446c888723f749dd"}, "created_at": 1747951351.165453, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_stg_shopify__f_3835f4e405a07a7e446c888723f749dd\") }}", "language": "sql", "refs": [{"name": "stg_shopify__fulfillment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__fulfillment"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/accepted_values_stg_shopify__f_3835f4e405a07a7e446c888723f749dd.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'pending','open','success','cancelled','error','failure'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status", "file_key_name": "models.stg_shopify__fulfillment", "attached_node": "model.shopify_source.stg_shopify__fulfillment", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["pending", "open", "success", "cancelled", "error", "failure"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_shopify__fulfillment')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_a4515a9e34ff568617e6377b2b76ee01.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation"], "alias": "dbt_utils_unique_combination_o_a4515a9e34ff568617e6377b2b76ee01", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a4515a9e34ff568617e6377b2b76ee01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a4515a9e34ff568617e6377b2b76ee01"}, "created_at": 1747951351.17071, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a4515a9e34ff568617e6377b2b76ee01\") }}", "language": "sql", "refs": [{"name": "stg_shopify__fulfillment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__fulfillment"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_a4515a9e34ff568617e6377b2b76ee01.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"\n    group by fulfillment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__fulfillment", "attached_node": "model.shopify_source.stg_shopify__fulfillment", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["fulfillment_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__fulfillment')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__inventory_item_inventory_item_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__inventory_item_inventory_item_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe", "fqn": ["shopify_source", "not_null_stg_shopify__inventory_item_inventory_item_id"], "alias": "not_null_stg_shopify__inventory_item_inventory_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.17298, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__inventory_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__inventory_item"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__inventory_item_inventory_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_item\"\nwhere inventory_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "inventory_item_id", "file_key_name": "models.stg_shopify__inventory_item", "attached_node": "model.shopify_source.stg_shopify__inventory_item", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "inventory_item_id", "model": "{{ get_where_subquery(ref('stg_shopify__inventory_item')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_1b834d07642aae61e7bdfd8f8caa7d1f.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation"], "alias": "dbt_utils_unique_combination_o_1b834d07642aae61e7bdfd8f8caa7d1f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1b834d07642aae61e7bdfd8f8caa7d1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1b834d07642aae61e7bdfd8f8caa7d1f"}, "created_at": 1747951351.174104, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1b834d07642aae61e7bdfd8f8caa7d1f\") }}", "language": "sql", "refs": [{"name": "stg_shopify__inventory_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__inventory_item"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_1b834d07642aae61e7bdfd8f8caa7d1f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_item\"\n    group by inventory_item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__inventory_item", "attached_node": "model.shopify_source.stg_shopify__inventory_item", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["inventory_item_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__inventory_item')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_level_id__inventory_item_id__location_id__source_relation.48558ac36b": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_level_id__inventory_item_id__location_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_1a7bbc29d5bcd2755502a034ffac3014.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_level_id__inventory_item_id__location_id__source_relation.48558ac36b", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_level_id__inventory_item_id__location_id__source_relation"], "alias": "dbt_utils_unique_combination_o_1a7bbc29d5bcd2755502a034ffac3014", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1a7bbc29d5bcd2755502a034ffac3014", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1a7bbc29d5bcd2755502a034ffac3014"}, "created_at": 1747951351.1764019, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1a7bbc29d5bcd2755502a034ffac3014\") }}", "language": "sql", "refs": [{"name": "stg_shopify__inventory_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__inventory_level"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_1a7bbc29d5bcd2755502a034ffac3014.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_level_id, inventory_item_id, location_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_level\"\n    group by inventory_level_id, inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__inventory_level", "attached_node": "model.shopify_source.stg_shopify__inventory_level", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["inventory_level_id", "inventory_item_id", "location_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__inventory_level')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_quantity_inventory_quantity_id__inventory_item_id__inventory_level_id__inventory_state_name__source_relation.aa5bafb770": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__inventory_quantity_inventory_quantity_id__inventory_item_id__inventory_level_id__inventory_state_name__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_a46008020d1b1a586d984ce3291581d6.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_quantity_inventory_quantity_id__inventory_item_id__inventory_level_id__inventory_state_name__source_relation.aa5bafb770", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__inventory_quantity_inventory_quantity_id__inventory_item_id__inventory_level_id__inventory_state_name__source_relation"], "alias": "dbt_utils_unique_combination_o_a46008020d1b1a586d984ce3291581d6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a46008020d1b1a586d984ce3291581d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a46008020d1b1a586d984ce3291581d6"}, "created_at": 1747951351.179183, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a46008020d1b1a586d984ce3291581d6\") }}", "language": "sql", "refs": [{"name": "stg_shopify__inventory_quantity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__inventory_quantity"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_a46008020d1b1a586d984ce3291581d6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_quantity_id, inventory_item_id, inventory_level_id, inventory_state_name, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__inventory_quantity\"\n    group by inventory_quantity_id, inventory_item_id, inventory_level_id, inventory_state_name, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__inventory_quantity", "attached_node": "model.shopify_source.stg_shopify__inventory_quantity", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["inventory_quantity_id", "inventory_item_id", "inventory_level_id", "inventory_state_name", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__inventory_quantity')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__location_location_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__location_location_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf", "fqn": ["shopify_source", "not_null_stg_shopify__location_location_id"], "alias": "not_null_stg_shopify__location_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.181864, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__location"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__location_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__location\"\nwhere location_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_id", "file_key_name": "models.stg_shopify__location", "attached_node": "model.shopify_source.stg_shopify__location", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('stg_shopify__location')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_92f84e20530e94b3733829189b68c646.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation"], "alias": "dbt_utils_unique_combination_o_92f84e20530e94b3733829189b68c646", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_92f84e20530e94b3733829189b68c646", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_92f84e20530e94b3733829189b68c646"}, "created_at": 1747951351.182954, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_92f84e20530e94b3733829189b68c646\") }}", "language": "sql", "refs": [{"name": "stg_shopify__location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__location"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_92f84e20530e94b3733829189b68c646.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__location\"\n    group by location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__location", "attached_node": "model.shopify_source.stg_shopify__location", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["location_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__location')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__media_media_id.9768604066": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__media_media_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__media_media_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__media_media_id.9768604066", "fqn": ["shopify_source", "not_null_stg_shopify__media_media_id"], "alias": "not_null_stg_shopify__media_media_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.185536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__media"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__media_media_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media\"\nwhere media_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "media_id", "file_key_name": "models.stg_shopify__media", "attached_node": "model.shopify_source.stg_shopify__media", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "media_id", "model": "{{ get_where_subquery(ref('stg_shopify__media')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_media_id__source_relation.3a91161f6f": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__media_media_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_f1e0ca2bb05ae3c30035cc7bcc854b2e.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_media_id__source_relation.3a91161f6f", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__media_media_id__source_relation"], "alias": "dbt_utils_unique_combination_o_f1e0ca2bb05ae3c30035cc7bcc854b2e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f1e0ca2bb05ae3c30035cc7bcc854b2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f1e0ca2bb05ae3c30035cc7bcc854b2e"}, "created_at": 1747951351.186486, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f1e0ca2bb05ae3c30035cc7bcc854b2e\") }}", "language": "sql", "refs": [{"name": "stg_shopify__media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__media"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_f1e0ca2bb05ae3c30035cc7bcc854b2e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        media_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media\"\n    group by media_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__media", "attached_node": "model.shopify_source.stg_shopify__media", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["media_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__media')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__media_image_media_id.609fe3795b": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__media_image_media_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__media_image_media_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__media_image_media_id.609fe3795b", "fqn": ["shopify_source", "not_null_stg_shopify__media_image_media_id"], "alias": "not_null_stg_shopify__media_image_media_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.188948, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__media_image", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__media_image"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__media_image_media_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media_image\"\nwhere media_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "media_id", "file_key_name": "models.stg_shopify__media_image", "attached_node": "model.shopify_source.stg_shopify__media_image", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "media_id", "model": "{{ get_where_subquery(ref('stg_shopify__media_image')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__media_image_image_id.a62b445b8b": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__media_image_image_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__media_image_image_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__media_image_image_id.a62b445b8b", "fqn": ["shopify_source", "not_null_stg_shopify__media_image_image_id"], "alias": "not_null_stg_shopify__media_image_image_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.189866, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__media_image", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__media_image"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__media_image_image_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect image_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media_image\"\nwhere image_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "image_id", "file_key_name": "models.stg_shopify__media_image", "attached_node": "model.shopify_source.stg_shopify__media_image", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "image_id", "model": "{{ get_where_subquery(ref('stg_shopify__media_image')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_image_media_id__image_id__source_relation.5000589fe5": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__media_image_media_id__image_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_0339769e57117da84036906f3dc9bf75.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_image_media_id__image_id__source_relation.5000589fe5", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__media_image_media_id__image_id__source_relation"], "alias": "dbt_utils_unique_combination_o_0339769e57117da84036906f3dc9bf75", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0339769e57117da84036906f3dc9bf75", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0339769e57117da84036906f3dc9bf75"}, "created_at": 1747951351.1907809, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0339769e57117da84036906f3dc9bf75\") }}", "language": "sql", "refs": [{"name": "stg_shopify__media_image", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__media_image"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_0339769e57117da84036906f3dc9bf75.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        media_id, image_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__media_image\"\n    group by media_id, image_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__media_image", "attached_node": "model.shopify_source.stg_shopify__media_image", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["media_id", "image_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__media_image')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__metafield_metafield_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__metafield_metafield_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6", "fqn": ["shopify_source", "not_null_stg_shopify__metafield_metafield_id"], "alias": "not_null_stg_shopify__metafield_metafield_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.193066, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__metafield", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__metafield"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__metafield_metafield_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metafield_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__metafield\"\nwhere metafield_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "metafield_id", "file_key_name": "models.stg_shopify__metafield", "attached_node": "model.shopify_source.stg_shopify__metafield", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "metafield_id", "model": "{{ get_where_subquery(ref('stg_shopify__metafield')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_74ae57137307ee916678ddd420fa6cea.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation"], "alias": "dbt_utils_unique_combination_o_74ae57137307ee916678ddd420fa6cea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_74ae57137307ee916678ddd420fa6cea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_74ae57137307ee916678ddd420fa6cea"}, "created_at": 1747951351.1939719, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_74ae57137307ee916678ddd420fa6cea\") }}", "language": "sql", "refs": [{"name": "stg_shopify__metafield", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__metafield"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_74ae57137307ee916678ddd420fa6cea.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        metafield_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__metafield\"\n    group by metafield_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__metafield", "attached_node": "model.shopify_source.stg_shopify__metafield", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["metafield_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__metafield')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_note_attribute_name", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_note_attribute_name.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446", "fqn": ["shopify_source", "not_null_stg_shopify__order_note_attribute_name"], "alias": "not_null_stg_shopify__order_note_attribute_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.196218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__order_note_attribute", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_note_attribute"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_note_attribute_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_note_attribute\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stg_shopify__order_note_attribute", "attached_node": "model.shopify_source.stg_shopify__order_note_attribute", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_shopify__order_note_attribute')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_note_attribute_order_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_note_attribute_order_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375", "fqn": ["shopify_source", "not_null_stg_shopify__order_note_attribute_order_id"], "alias": "not_null_stg_shopify__order_note_attribute_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.197089, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__order_note_attribute", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_note_attribute"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_note_attribute_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_note_attribute\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_shopify__order_note_attribute", "attached_node": "model.shopify_source.stg_shopify__order_note_attribute", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_shopify__order_note_attribute')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_1a5482ed4d7508998a8a2744236cbc8d.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation"], "alias": "dbt_utils_unique_combination_o_1a5482ed4d7508998a8a2744236cbc8d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1a5482ed4d7508998a8a2744236cbc8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1a5482ed4d7508998a8a2744236cbc8d"}, "created_at": 1747951351.197987, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1a5482ed4d7508998a8a2744236cbc8d\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_note_attribute", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_note_attribute"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_1a5482ed4d7508998a8a2744236cbc8d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, name, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_note_attribute\"\n    group by order_id, name, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order_note_attribute", "attached_node": "model.shopify_source.stg_shopify__order_note_attribute", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "name", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_note_attribute')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_shipping_line_order_shipping_line_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_sh_86443a6f8dd3d3da0124c88dd13eb1e1.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613", "fqn": ["shopify_source", "not_null_stg_shopify__order_shipping_line_order_shipping_line_id"], "alias": "not_null_stg_shopify__order_sh_86443a6f8dd3d3da0124c88dd13eb1e1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_shopify__order_sh_86443a6f8dd3d3da0124c88dd13eb1e1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_shopify__order_sh_86443a6f8dd3d3da0124c88dd13eb1e1"}, "created_at": 1747951351.200536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_shopify__order_sh_86443a6f8dd3d3da0124c88dd13eb1e1\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_shipping_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_shipping_line"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_sh_86443a6f8dd3d3da0124c88dd13eb1e1.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"\nwhere order_shipping_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_shipping_line_id", "file_key_name": "models.stg_shopify__order_shipping_line", "attached_node": "model.shopify_source.stg_shopify__order_shipping_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_shipping_line_id", "model": "{{ get_where_subquery(ref('stg_shopify__order_shipping_line')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_96b74beca4d46eeb1a7384d2398e0b36.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation"], "alias": "dbt_utils_unique_combination_o_96b74beca4d46eeb1a7384d2398e0b36", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_96b74beca4d46eeb1a7384d2398e0b36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_96b74beca4d46eeb1a7384d2398e0b36"}, "created_at": 1747951351.2014248, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_96b74beca4d46eeb1a7384d2398e0b36\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_shipping_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_shipping_line"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_96b74beca4d46eeb1a7384d2398e0b36.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"\n    group by order_shipping_line_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order_shipping_line", "attached_node": "model.shopify_source.stg_shopify__order_shipping_line", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_shipping_line_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_shipping_line')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_shipping_tax_line_index", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_shipping_tax_line_index.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd", "fqn": ["shopify_source", "not_null_stg_shopify__order_shipping_tax_line_index"], "alias": "not_null_stg_shopify__order_shipping_tax_line_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.2037098, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__order_shipping_tax_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_shipping_tax_line"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_shipping_tax_line_index.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\nwhere index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "index", "file_key_name": "models.stg_shopify__order_shipping_tax_line", "attached_node": "model.shopify_source.stg_shopify__order_shipping_tax_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "index", "model": "{{ get_where_subquery(ref('stg_shopify__order_shipping_tax_line')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_sh_137b227fc325b653b67bedefafe7c858.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295", "fqn": ["shopify_source", "not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id"], "alias": "not_null_stg_shopify__order_sh_137b227fc325b653b67bedefafe7c858", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_shopify__order_sh_137b227fc325b653b67bedefafe7c858", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_shopify__order_sh_137b227fc325b653b67bedefafe7c858"}, "created_at": 1747951351.204588, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_shopify__order_sh_137b227fc325b653b67bedefafe7c858\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_shipping_tax_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_shipping_tax_line"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_sh_137b227fc325b653b67bedefafe7c858.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_shipping_line_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\nwhere order_shipping_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_shipping_line_id", "file_key_name": "models.stg_shopify__order_shipping_tax_line", "attached_node": "model.shopify_source.stg_shopify__order_shipping_tax_line", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_shipping_line_id", "model": "{{ get_where_subquery(ref('stg_shopify__order_shipping_tax_line')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_18c4e2d8267e37548fa60a289a5bf46f.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_18c4e2d8267e37548fa60a289a5bf46f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_18c4e2d8267e37548fa60a289a5bf46f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_18c4e2d8267e37548fa60a289a5bf46f"}, "created_at": 1747951351.205444, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_18c4e2d8267e37548fa60a289a5bf46f\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_shipping_tax_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_shipping_tax_line"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_18c4e2d8267e37548fa60a289a5bf46f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_shipping_line_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by order_shipping_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order_shipping_tax_line", "attached_node": "model.shopify_source.stg_shopify__order_shipping_tax_line", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_shipping_line_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_shipping_tax_line')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_tag_index", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_tag_index.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2", "fqn": ["shopify_source", "not_null_stg_shopify__order_tag_index"], "alias": "not_null_stg_shopify__order_tag_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.207535, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__order_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_tag_index.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_tag\"\nwhere index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "index", "file_key_name": "models.stg_shopify__order_tag", "attached_node": "model.shopify_source.stg_shopify__order_tag", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "index", "model": "{{ get_where_subquery(ref('stg_shopify__order_tag')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_tag_order_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_tag_order_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6", "fqn": ["shopify_source", "not_null_stg_shopify__order_tag_order_id"], "alias": "not_null_stg_shopify__order_tag_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.208385, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__order_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_tag_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_tag\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_shopify__order_tag", "attached_node": "model.shopify_source.stg_shopify__order_tag", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_shopify__order_tag')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_5f838ea6459b134d86a68deaaf116f0a.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_5f838ea6459b134d86a68deaaf116f0a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5f838ea6459b134d86a68deaaf116f0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5f838ea6459b134d86a68deaaf116f0a"}, "created_at": 1747951351.20943, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5f838ea6459b134d86a68deaaf116f0a\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_5f838ea6459b134d86a68deaaf116f0a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_tag\"\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order_tag", "attached_node": "model.shopify_source.stg_shopify__order_tag", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_tag')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_url_tag_key", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_url_tag_key.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325", "fqn": ["shopify_source", "not_null_stg_shopify__order_url_tag_key"], "alias": "not_null_stg_shopify__order_url_tag_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.2117918, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__order_url_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_url_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_url_tag_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_url_tag\"\nwhere key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "key", "file_key_name": "models.stg_shopify__order_url_tag", "attached_node": "model.shopify_source.stg_shopify__order_url_tag", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "key", "model": "{{ get_where_subquery(ref('stg_shopify__order_url_tag')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_url_tag_order_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_url_tag_order_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1", "fqn": ["shopify_source", "not_null_stg_shopify__order_url_tag_order_id"], "alias": "not_null_stg_shopify__order_url_tag_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.2126698, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__order_url_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_url_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_url_tag_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_url_tag\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_shopify__order_url_tag", "attached_node": "model.shopify_source.stg_shopify__order_url_tag", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_shopify__order_url_tag')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_769c59c667cf83d77cd784311068258f.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation"], "alias": "dbt_utils_unique_combination_o_769c59c667cf83d77cd784311068258f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_769c59c667cf83d77cd784311068258f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_769c59c667cf83d77cd784311068258f"}, "created_at": 1747951351.2136278, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_769c59c667cf83d77cd784311068258f\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_url_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_url_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_769c59c667cf83d77cd784311068258f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, key, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_url_tag\"\n    group by order_id, key, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order_url_tag", "attached_node": "model.shopify_source.stg_shopify__order_url_tag", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "key", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_url_tag')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__product_media_product_id.77069d8cab": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__product_media_product_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__product_media_product_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__product_media_product_id.77069d8cab", "fqn": ["shopify_source", "not_null_stg_shopify__product_media_product_id"], "alias": "not_null_stg_shopify__product_media_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.21601, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__product_media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_media"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__product_media_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media\"\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_shopify__product_media", "attached_node": "model.shopify_source.stg_shopify__product_media", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_shopify__product_media')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__product_media_media_id.075bc6f1e7": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__product_media_media_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__product_media_media_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__product_media_media_id.075bc6f1e7", "fqn": ["shopify_source", "not_null_stg_shopify__product_media_media_id"], "alias": "not_null_stg_shopify__product_media_media_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.217039, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__product_media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_media"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__product_media_media_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media\"\nwhere media_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "media_id", "file_key_name": "models.stg_shopify__product_media", "attached_node": "model.shopify_source.stg_shopify__product_media", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "media_id", "model": "{{ get_where_subquery(ref('stg_shopify__product_media')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_media_product_id__media_id__source_relation.0ce52c30ea": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_media_product_id__media_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_351d2fe6cfc512f4a7b28d316e03e110.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_media_product_id__media_id__source_relation.0ce52c30ea", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__product_media_product_id__media_id__source_relation"], "alias": "dbt_utils_unique_combination_o_351d2fe6cfc512f4a7b28d316e03e110", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_351d2fe6cfc512f4a7b28d316e03e110", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_351d2fe6cfc512f4a7b28d316e03e110"}, "created_at": 1747951351.2179148, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_351d2fe6cfc512f4a7b28d316e03e110\") }}", "language": "sql", "refs": [{"name": "stg_shopify__product_media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_media"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_351d2fe6cfc512f4a7b28d316e03e110.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, media_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media\"\n    group by product_id, media_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__product_media", "attached_node": "model.shopify_source.stg_shopify__product_media", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_id", "media_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__product_media')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__product_variant_media_product_variant_id.ec658a83f9": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__product_variant_media_product_variant_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__product_variant_media_product_variant_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__product_variant_media_product_variant_id.ec658a83f9", "fqn": ["shopify_source", "not_null_stg_shopify__product_variant_media_product_variant_id"], "alias": "not_null_stg_shopify__product_variant_media_product_variant_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.22074, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__product_variant_media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_variant_media"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__product_variant_media_product_variant_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_variant_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_media\"\nwhere product_variant_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_variant_id", "file_key_name": "models.stg_shopify__product_variant_media", "attached_node": "model.shopify_source.stg_shopify__product_variant_media", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_variant_id", "model": "{{ get_where_subquery(ref('stg_shopify__product_variant_media')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__product_variant_media_media_id.6a63e11bf5": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__product_variant_media_media_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__product_variant_media_media_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__product_variant_media_media_id.6a63e11bf5", "fqn": ["shopify_source", "not_null_stg_shopify__product_variant_media_media_id"], "alias": "not_null_stg_shopify__product_variant_media_media_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.221622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__product_variant_media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_variant_media"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__product_variant_media_media_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_media\"\nwhere media_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "media_id", "file_key_name": "models.stg_shopify__product_variant_media", "attached_node": "model.shopify_source.stg_shopify__product_variant_media", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "media_id", "model": "{{ get_where_subquery(ref('stg_shopify__product_variant_media')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_media_product_variant_id__media_id__source_relation.319ca39a19": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_media_product_variant_id__media_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_a913c4a97edca8d4fde35865302e9d4c.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_media_product_variant_id__media_id__source_relation.319ca39a19", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_media_product_variant_id__media_id__source_relation"], "alias": "dbt_utils_unique_combination_o_a913c4a97edca8d4fde35865302e9d4c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a913c4a97edca8d4fde35865302e9d4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a913c4a97edca8d4fde35865302e9d4c"}, "created_at": 1747951351.222496, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a913c4a97edca8d4fde35865302e9d4c\") }}", "language": "sql", "refs": [{"name": "stg_shopify__product_variant_media", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_variant_media"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_a913c4a97edca8d4fde35865302e9d4c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_variant_id, media_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant_media\"\n    group by product_variant_id, media_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__product_variant_media", "attached_node": "model.shopify_source.stg_shopify__product_variant_media", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_variant_id", "media_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__product_variant_media')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__product_tag_index", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__product_tag_index.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019", "fqn": ["shopify_source", "not_null_stg_shopify__product_tag_index"], "alias": "not_null_stg_shopify__product_tag_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.22504, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__product_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__product_tag_index.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag\"\nwhere index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "index", "file_key_name": "models.stg_shopify__product_tag", "attached_node": "model.shopify_source.stg_shopify__product_tag", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "index", "model": "{{ get_where_subquery(ref('stg_shopify__product_tag')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__product_tag_product_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__product_tag_product_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3", "fqn": ["shopify_source", "not_null_stg_shopify__product_tag_product_id"], "alias": "not_null_stg_shopify__product_tag_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.2259, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__product_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__product_tag_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag\"\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_shopify__product_tag", "attached_node": "model.shopify_source.stg_shopify__product_tag", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_shopify__product_tag')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_98d97143f1533b4b0a8748d153cc10ed.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_98d97143f1533b4b0a8748d153cc10ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_98d97143f1533b4b0a8748d153cc10ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_98d97143f1533b4b0a8748d153cc10ed"}, "created_at": 1747951351.226762, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_98d97143f1533b4b0a8748d153cc10ed\") }}", "language": "sql", "refs": [{"name": "stg_shopify__product_tag", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__product_tag"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_98d97143f1533b4b0a8748d153cc10ed.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag\"\n    group by product_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__product_tag", "attached_node": "model.shopify_source.stg_shopify__product_tag", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__product_tag')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__shop_shop_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__shop_shop_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe", "fqn": ["shopify_source", "not_null_stg_shopify__shop_shop_id"], "alias": "not_null_stg_shopify__shop_shop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.230093, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__shop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__shop"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__shop_shop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__shop\"\nwhere shop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shop_id", "file_key_name": "models.stg_shopify__shop", "attached_node": "model.shopify_source.stg_shopify__shop", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shop_id", "model": "{{ get_where_subquery(ref('stg_shopify__shop')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_4a46d039ec9d10e9bd7b51862590e22e.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation"], "alias": "dbt_utils_unique_combination_o_4a46d039ec9d10e9bd7b51862590e22e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4a46d039ec9d10e9bd7b51862590e22e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4a46d039ec9d10e9bd7b51862590e22e"}, "created_at": 1747951351.23178, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4a46d039ec9d10e9bd7b51862590e22e\") }}", "language": "sql", "refs": [{"name": "stg_shopify__shop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__shop"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_4a46d039ec9d10e9bd7b51862590e22e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        shop_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__shop\"\n    group by shop_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__shop", "attached_node": "model.shopify_source.stg_shopify__shop", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["shop_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__shop')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__tender_transaction_transaction_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__tender_transaction_transaction_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1", "fqn": ["shopify_source", "not_null_stg_shopify__tender_transaction_transaction_id"], "alias": "not_null_stg_shopify__tender_transaction_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.237421, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__tender_transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__tender_transaction"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__tender_transaction_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tender_transaction\"\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.stg_shopify__tender_transaction", "attached_node": "model.shopify_source.stg_shopify__tender_transaction", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_shopify__tender_transaction')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_d660b0e13029a1c24d5e54734a14b473.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation"], "alias": "dbt_utils_unique_combination_o_d660b0e13029a1c24d5e54734a14b473", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d660b0e13029a1c24d5e54734a14b473", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d660b0e13029a1c24d5e54734a14b473"}, "created_at": 1747951351.2393029, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d660b0e13029a1c24d5e54734a14b473\") }}", "language": "sql", "refs": [{"name": "stg_shopify__tender_transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__tender_transaction"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_d660b0e13029a1c24d5e54734a14b473.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tender_transaction\"\n    group by transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__tender_transaction", "attached_node": "model.shopify_source.stg_shopify__tender_transaction", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__tender_transaction')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__abandone_69cca4dad786feddbb78552d60221d7c.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7", "fqn": ["shopify_source", "not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id"], "alias": "not_null_stg_shopify__abandone_69cca4dad786feddbb78552d60221d7c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_shopify__abandone_69cca4dad786feddbb78552d60221d7c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_shopify__abandone_69cca4dad786feddbb78552d60221d7c"}, "created_at": 1747951351.24756, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_shopify__abandone_69cca4dad786feddbb78552d60221d7c\") }}", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout_discount_code", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout_discount_code"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__abandone_69cca4dad786feddbb78552d60221d7c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\nwhere checkout_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "checkout_id", "file_key_name": "models.stg_shopify__abandoned_checkout_discount_code", "attached_node": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "checkout_id", "model": "{{ get_where_subquery(ref('stg_shopify__abandoned_checkout_discount_code')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_eb754e8b225c2d759ca01324f4b23cf1.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation"], "alias": "dbt_utils_unique_combination_o_eb754e8b225c2d759ca01324f4b23cf1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_eb754e8b225c2d759ca01324f4b23cf1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_eb754e8b225c2d759ca01324f4b23cf1"}, "created_at": 1747951351.248631, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_eb754e8b225c2d759ca01324f4b23cf1\") }}", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout_discount_code", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout_discount_code"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_eb754e8b225c2d759ca01324f4b23cf1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, code, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n    group by checkout_id, code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__abandoned_checkout_discount_code", "attached_node": "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["checkout_id", "code", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__abandoned_checkout_discount_code')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_discount_code_code", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_discount_code_code.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f", "fqn": ["shopify_source", "not_null_stg_shopify__order_discount_code_code"], "alias": "not_null_stg_shopify__order_discount_code_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.252662, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__order_discount_code", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_discount_code"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_discount_code_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"\nwhere code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code", "file_key_name": "models.stg_shopify__order_discount_code", "attached_node": "model.shopify_source.stg_shopify__order_discount_code", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "code", "model": "{{ get_where_subquery(ref('stg_shopify__order_discount_code')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__order_discount_code_order_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__order_discount_code_order_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d", "fqn": ["shopify_source", "not_null_stg_shopify__order_discount_code_order_id"], "alias": "not_null_stg_shopify__order_discount_code_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.25381, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__order_discount_code", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_discount_code"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__order_discount_code_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_shopify__order_discount_code", "attached_node": "model.shopify_source.stg_shopify__order_discount_code", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_shopify__order_discount_code')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation.7887dafb26": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_b13d53b3518da13e4887c0aba84ee5f0.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation.7887dafb26", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_b13d53b3518da13e4887c0aba84ee5f0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b13d53b3518da13e4887c0aba84ee5f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b13d53b3518da13e4887c0aba84ee5f0"}, "created_at": 1747951351.26035, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b13d53b3518da13e4887c0aba84ee5f0\") }}", "language": "sql", "refs": [{"name": "stg_shopify__order_discount_code", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__order_discount_code"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_b13d53b3518da13e4887c0aba84ee5f0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"\n    group by order_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__order_discount_code", "attached_node": "model.shopify_source.stg_shopify__order_discount_code", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__order_discount_code')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_863aca0c0b1501c521a5008248acfee2.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_863aca0c0b1501c521a5008248acfee2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_863aca0c0b1501c521a5008248acfee2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_863aca0c0b1501c521a5008248acfee2"}, "created_at": 1747951351.267501, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_863aca0c0b1501c521a5008248acfee2\") }}", "language": "sql", "refs": [{"name": "stg_shopify__abandoned_checkout_shipping_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__abandoned_checkout_shipping_line"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_863aca0c0b1501c521a5008248acfee2.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        checkout_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n    group by checkout_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__abandoned_checkout_shipping_line", "attached_node": "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["checkout_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__abandoned_checkout_shipping_line')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delayed__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed.6be9843e27": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delayed__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed", "resource_type": "test", "package_name": "shopify_source", "path": "accepted_values_stg_shopify__f_2b62fd39800ff9146300faaad82267fc.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delayed__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed.6be9843e27", "fqn": ["shopify_source", "accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delayed__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed"], "alias": "accepted_values_stg_shopify__f_2b62fd39800ff9146300faaad82267fc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_shopify__f_2b62fd39800ff9146300faaad82267fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "accepted_values_stg_shopify__f_2b62fd39800ff9146300faaad82267fc"}, "created_at": 1747951351.294789, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_stg_shopify__f_2b62fd39800ff9146300faaad82267fc\") }}", "language": "sql", "refs": [{"name": "stg_shopify__fulfillment_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__fulfillment_event"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/accepted_values_stg_shopify__f_2b62fd39800ff9146300faaad82267fc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_event\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'attempted_delivery','delayed','delivered','failure','in_transit','out_for_delivery','ready_for_pickup','picked_up','label_printed','label_purchased','confirmed'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status", "file_key_name": "models.stg_shopify__fulfillment_event", "attached_node": "model.shopify_source.stg_shopify__fulfillment_event", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["attempted_delivery", "delayed", "delivered", "failure", "in_transit", "out_for_delivery", "ready_for_pickup", "picked_up", "label_printed", "label_purchased", "confirmed"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_shopify__fulfillment_event')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation.bbccfe999a": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_ef0e8a476c13ca4460eccfe485b12fbd.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation.bbccfe999a", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation"], "alias": "dbt_utils_unique_combination_o_ef0e8a476c13ca4460eccfe485b12fbd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ef0e8a476c13ca4460eccfe485b12fbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ef0e8a476c13ca4460eccfe485b12fbd"}, "created_at": 1747951351.306518, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ef0e8a476c13ca4460eccfe485b12fbd\") }}", "language": "sql", "refs": [{"name": "stg_shopify__fulfillment_event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__fulfillment_event"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_ef0e8a476c13ca4460eccfe485b12fbd.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fulfillment_event_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment_event\"\n    group by fulfillment_event_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__fulfillment_event", "attached_node": "model.shopify_source.stg_shopify__fulfillment_event", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["fulfillment_event_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__fulfillment_event')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_1132518eed0ecad0770b55067f192136.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_1132518eed0ecad0770b55067f192136", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1132518eed0ecad0770b55067f192136", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1132518eed0ecad0770b55067f192136"}, "created_at": 1747951351.3138912, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1132518eed0ecad0770b55067f192136\") }}", "language": "sql", "refs": [{"name": "stg_shopify__tax_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__tax_line"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_1132518eed0ecad0770b55067f192136.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, index, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__tax_line\"\n    group by order_line_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__tax_line", "attached_node": "model.shopify_source.stg_shopify__tax_line", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_line_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__tax_line')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__discount_allocation_discount_application_index.2a354c5cf7": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__discount_allocation_discount_application_index", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__discount_cfcbde56c52d7d89ca13e3f90c9793ca.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__discount_allocation_discount_application_index.2a354c5cf7", "fqn": ["shopify_source", "not_null_stg_shopify__discount_allocation_discount_application_index"], "alias": "not_null_stg_shopify__discount_cfcbde56c52d7d89ca13e3f90c9793ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_shopify__discount_cfcbde56c52d7d89ca13e3f90c9793ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_shopify__discount_cfcbde56c52d7d89ca13e3f90c9793ca"}, "created_at": 1747951351.321884, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_shopify__discount_cfcbde56c52d7d89ca13e3f90c9793ca\") }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_allocation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_allocation"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__discount_cfcbde56c52d7d89ca13e3f90c9793ca.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_application_index\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_allocation\"\nwhere discount_application_index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount_application_index", "file_key_name": "models.stg_shopify__discount_allocation", "attached_node": "model.shopify_source.stg_shopify__discount_allocation", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_application_index", "model": "{{ get_where_subquery(ref('stg_shopify__discount_allocation')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__discount_allocation_order_line_id.e4c16bc330": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__discount_allocation_order_line_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__discount_allocation_order_line_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__discount_allocation_order_line_id.e4c16bc330", "fqn": ["shopify_source", "not_null_stg_shopify__discount_allocation_order_line_id"], "alias": "not_null_stg_shopify__discount_allocation_order_line_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.3230348, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_allocation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_allocation"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__discount_allocation_order_line_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_line_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_allocation\"\nwhere order_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_line_id", "file_key_name": "models.stg_shopify__discount_allocation", "attached_node": "model.shopify_source.stg_shopify__discount_allocation", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_line_id", "model": "{{ get_where_subquery(ref('stg_shopify__discount_allocation')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_allocation_order_line_id__discount_application_index__source_relation.9d92382300": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__discount_allocation_order_line_id__discount_application_index__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_41e612e0dabd95feff7c2d5f91a07c98.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_allocation_order_line_id__discount_application_index__source_relation.9d92382300", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__discount_allocation_order_line_id__discount_application_index__source_relation"], "alias": "dbt_utils_unique_combination_o_41e612e0dabd95feff7c2d5f91a07c98", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_41e612e0dabd95feff7c2d5f91a07c98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_41e612e0dabd95feff7c2d5f91a07c98"}, "created_at": 1747951351.3242319, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_41e612e0dabd95feff7c2d5f91a07c98\") }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_allocation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_allocation"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_41e612e0dabd95feff7c2d5f91a07c98.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_line_id, discount_application_index, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_allocation\"\n    group by order_line_id, discount_application_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__discount_allocation", "attached_node": "model.shopify_source.stg_shopify__discount_allocation", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_line_id", "discount_application_index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__discount_allocation')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__discount_application_index.63f04cedfe": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__discount_application_index", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__discount_application_index.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__discount_application_index.63f04cedfe", "fqn": ["shopify_source", "not_null_stg_shopify__discount_application_index"], "alias": "not_null_stg_shopify__discount_application_index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.33026, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_application", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_application"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__discount_application_index.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect index\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application\"\nwhere index is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "index", "file_key_name": "models.stg_shopify__discount_application", "attached_node": "model.shopify_source.stg_shopify__discount_application", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "index", "model": "{{ get_where_subquery(ref('stg_shopify__discount_application')) }}"}, "namespace": null}}, "test.shopify_source.not_null_stg_shopify__discount_application_order_id.ef228af4b3": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__discount_application_order_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__discount_application_order_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__discount_application_order_id.ef228af4b3", "fqn": ["shopify_source", "not_null_stg_shopify__discount_application_order_id"], "alias": "not_null_stg_shopify__discount_application_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.3315809, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_application", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_application"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__discount_application_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_shopify__discount_application", "attached_node": "model.shopify_source.stg_shopify__discount_application", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_shopify__discount_application')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_application_index__order_id__source_relation.c25680f16c": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__discount_application_index__order_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_cef0b10f7f434b5ae148094e1056eaed.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_application_index__order_id__source_relation.c25680f16c", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__discount_application_index__order_id__source_relation"], "alias": "dbt_utils_unique_combination_o_cef0b10f7f434b5ae148094e1056eaed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cef0b10f7f434b5ae148094e1056eaed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cef0b10f7f434b5ae148094e1056eaed"}, "created_at": 1747951351.333606, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cef0b10f7f434b5ae148094e1056eaed\") }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_application", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_application"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_cef0b10f7f434b5ae148094e1056eaed.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        index, order_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application\"\n    group by index, order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__discount_application", "attached_node": "model.shopify_source.stg_shopify__discount_application", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["index", "order_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__discount_application')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__discount_code_app_discount_code_id.2065f2c186": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__discount_code_app_discount_code_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__discount_code_app_discount_code_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_app_discount_code_id.2065f2c186", "fqn": ["shopify_source", "not_null_stg_shopify__discount_code_app_discount_code_id"], "alias": "not_null_stg_shopify__discount_code_app_discount_code_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.337902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_app", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_code_app"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__discount_code_app_discount_code_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app\"\nwhere discount_code_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount_code_id", "file_key_name": "models.stg_shopify__discount_code_app", "attached_node": "model.shopify_source.stg_shopify__discount_code_app", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_code_id", "model": "{{ get_where_subquery(ref('stg_shopify__discount_code_app')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_app_discount_code_id__source_relation.5a98a3650c": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_app_discount_code_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_2f2ec1c8f6fc764ca5d86559497287cd.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_app_discount_code_id__source_relation.5a98a3650c", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_app_discount_code_id__source_relation"], "alias": "dbt_utils_unique_combination_o_2f2ec1c8f6fc764ca5d86559497287cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2f2ec1c8f6fc764ca5d86559497287cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2f2ec1c8f6fc764ca5d86559497287cd"}, "created_at": 1747951351.339505, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2f2ec1c8f6fc764ca5d86559497287cd\") }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_app", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_code_app"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_2f2ec1c8f6fc764ca5d86559497287cd.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app\"\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__discount_code_app", "attached_node": "model.shopify_source.stg_shopify__discount_code_app", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["discount_code_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__discount_code_app')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__discount_code_basic_discount_code_id.71a117849e": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__discount_code_basic_discount_code_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__discount_code_basic_discount_code_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_basic_discount_code_id.71a117849e", "fqn": ["shopify_source", "not_null_stg_shopify__discount_code_basic_discount_code_id"], "alias": "not_null_stg_shopify__discount_code_basic_discount_code_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.3436642, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_basic", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_code_basic"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__discount_code_basic_discount_code_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic\"\nwhere discount_code_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount_code_id", "file_key_name": "models.stg_shopify__discount_code_basic", "attached_node": "model.shopify_source.stg_shopify__discount_code_basic", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_code_id", "model": "{{ get_where_subquery(ref('stg_shopify__discount_code_basic')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_basic_discount_code_id__source_relation.dc017a2bd5": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_basic_discount_code_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_80b2653eab302cce10c1fa19804fb125.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_basic_discount_code_id__source_relation.dc017a2bd5", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_basic_discount_code_id__source_relation"], "alias": "dbt_utils_unique_combination_o_80b2653eab302cce10c1fa19804fb125", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_80b2653eab302cce10c1fa19804fb125", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_80b2653eab302cce10c1fa19804fb125"}, "created_at": 1747951351.3453991, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_80b2653eab302cce10c1fa19804fb125\") }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_basic", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_code_basic"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_80b2653eab302cce10c1fa19804fb125.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic\"\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__discount_code_basic", "attached_node": "model.shopify_source.stg_shopify__discount_code_basic", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["discount_code_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__discount_code_basic')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__discount_code_bxgy_discount_code_id.567d44280a": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__discount_code_bxgy_discount_code_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__discount_code_bxgy_discount_code_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_bxgy_discount_code_id.567d44280a", "fqn": ["shopify_source", "not_null_stg_shopify__discount_code_bxgy_discount_code_id"], "alias": "not_null_stg_shopify__discount_code_bxgy_discount_code_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.350083, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_bxgy", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_code_bxgy"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__discount_code_bxgy_discount_code_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy\"\nwhere discount_code_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount_code_id", "file_key_name": "models.stg_shopify__discount_code_bxgy", "attached_node": "model.shopify_source.stg_shopify__discount_code_bxgy", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_code_id", "model": "{{ get_where_subquery(ref('stg_shopify__discount_code_bxgy')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_bxgy_discount_code_id__source_relation.f6c1dab9b7": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_bxgy_discount_code_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_8ff48662520c100b32cddcb042e9a976.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_bxgy_discount_code_id__source_relation.f6c1dab9b7", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_bxgy_discount_code_id__source_relation"], "alias": "dbt_utils_unique_combination_o_8ff48662520c100b32cddcb042e9a976", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8ff48662520c100b32cddcb042e9a976", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8ff48662520c100b32cddcb042e9a976"}, "created_at": 1747951351.351382, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8ff48662520c100b32cddcb042e9a976\") }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_bxgy", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_code_bxgy"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_8ff48662520c100b32cddcb042e9a976.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy\"\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__discount_code_bxgy", "attached_node": "model.shopify_source.stg_shopify__discount_code_bxgy", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["discount_code_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__discount_code_bxgy')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__discount_code_free_shipping_discount_code_id.972490bade": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__discount_code_free_shipping_discount_code_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__discount_e9941d635e2722a9c2f1f1c75f189354.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__discount_code_free_shipping_discount_code_id.972490bade", "fqn": ["shopify_source", "not_null_stg_shopify__discount_code_free_shipping_discount_code_id"], "alias": "not_null_stg_shopify__discount_e9941d635e2722a9c2f1f1c75f189354", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_shopify__discount_e9941d635e2722a9c2f1f1c75f189354", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_shopify__discount_e9941d635e2722a9c2f1f1c75f189354"}, "created_at": 1747951351.3586922, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_shopify__discount_e9941d635e2722a9c2f1f1c75f189354\") }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_free_shipping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_code_free_shipping"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__discount_e9941d635e2722a9c2f1f1c75f189354.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping\"\nwhere discount_code_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount_code_id", "file_key_name": "models.stg_shopify__discount_code_free_shipping", "attached_node": "model.shopify_source.stg_shopify__discount_code_free_shipping", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_code_id", "model": "{{ get_where_subquery(ref('stg_shopify__discount_code_free_shipping')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_free_shipping_discount_code_id__source_relation.865e306032": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_free_shipping_discount_code_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_e21281131e1ebcf876f7f88fae93f9ce.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_free_shipping_discount_code_id__source_relation.865e306032", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_free_shipping_discount_code_id__source_relation"], "alias": "dbt_utils_unique_combination_o_e21281131e1ebcf876f7f88fae93f9ce", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e21281131e1ebcf876f7f88fae93f9ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e21281131e1ebcf876f7f88fae93f9ce"}, "created_at": 1747951351.362101, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e21281131e1ebcf876f7f88fae93f9ce\") }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_code_free_shipping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_code_free_shipping"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_e21281131e1ebcf876f7f88fae93f9ce.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping\"\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__discount_code_free_shipping", "attached_node": "model.shopify_source.stg_shopify__discount_code_free_shipping", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["discount_code_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__discount_code_free_shipping')) }}"}, "namespace": "dbt_utils"}}, "test.shopify_source.not_null_stg_shopify__discount_redeem_code_discount_code_id.3d9afdc3fb": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_stg_shopify__discount_redeem_code_discount_code_id", "resource_type": "test", "package_name": "shopify_source", "path": "not_null_stg_shopify__discount_redeem_code_discount_code_id.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.not_null_stg_shopify__discount_redeem_code_discount_code_id.3d9afdc3fb", "fqn": ["shopify_source", "not_null_stg_shopify__discount_redeem_code_discount_code_id"], "alias": "not_null_stg_shopify__discount_redeem_code_discount_code_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.3685539, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_redeem_code", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_redeem_code"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/not_null_stg_shopify__discount_redeem_code_discount_code_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code\"\nwhere discount_code_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount_code_id", "file_key_name": "models.stg_shopify__discount_redeem_code", "attached_node": "model.shopify_source.stg_shopify__discount_redeem_code", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_code_id", "model": "{{ get_where_subquery(ref('stg_shopify__discount_redeem_code')) }}"}, "namespace": null}}, "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_redeem_code_discount_code_id__source_relation.c171ecde9c": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_shopify__discount_redeem_code_discount_code_id__source_relation", "resource_type": "test", "package_name": "shopify_source", "path": "dbt_utils_unique_combination_o_2f062a318132816042a7914a5b8172a4.sql", "original_file_path": "models/stg_shopify.yml", "unique_id": "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_redeem_code_discount_code_id__source_relation.c171ecde9c", "fqn": ["shopify_source", "dbt_utils_unique_combination_of_columns_stg_shopify__discount_redeem_code_discount_code_id__source_relation"], "alias": "dbt_utils_unique_combination_o_2f062a318132816042a7914a5b8172a4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2f062a318132816042a7914a5b8172a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2f062a318132816042a7914a5b8172a4"}, "created_at": 1747951351.371198, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2f062a318132816042a7914a5b8172a4\") }}", "language": "sql", "refs": [{"name": "stg_shopify__discount_redeem_code", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify_source.stg_shopify__discount_redeem_code"]}, "compiled_path": "target/compiled/shopify_source/models/stg_shopify.yml/dbt_utils_unique_combination_o_2f062a318132816042a7914a5b8172a4.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        discount_code_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code\"\n    group by discount_code_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_shopify__discount_redeem_code", "attached_node": "model.shopify_source.stg_shopify__discount_redeem_code", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["discount_code_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_shopify__discount_redeem_code')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "unique_shopify__customer_cohorts_customer_cohort_id", "resource_type": "test", "package_name": "shopify", "path": "unique_shopify__customer_cohorts_customer_cohort_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a", "fqn": ["shopify", "unique_shopify__customer_cohorts_customer_cohort_id"], "alias": "unique_shopify__customer_cohorts_customer_cohort_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.6479712, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__customer_cohorts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customer_cohorts"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/unique_shopify__customer_cohorts_customer_cohort_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_cohorts\"\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_cohort_id", "file_key_name": "models.shopify__customer_cohorts", "attached_node": "model.shopify.shopify__customer_cohorts", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_cohort_id", "model": "{{ get_where_subquery(ref('shopify__customer_cohorts')) }}"}, "namespace": null}}, "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__customer_cohorts_customer_cohort_id", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__customer_cohorts_customer_cohort_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "fqn": ["shopify", "not_null_shopify__customer_cohorts_customer_cohort_id"], "alias": "not_null_shopify__customer_cohorts_customer_cohort_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.64929, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__customer_cohorts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customer_cohorts"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__customer_cohorts_customer_cohort_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_cohorts\"\nwhere customer_cohort_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_cohort_id", "file_key_name": "models.shopify__customer_cohorts", "attached_node": "model.shopify.shopify__customer_cohorts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_cohort_id", "model": "{{ get_where_subquery(ref('shopify__customer_cohorts')) }}"}, "namespace": null}}, "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "unique_shopify__customer_email_cohorts_customer_cohort_id", "resource_type": "test", "package_name": "shopify", "path": "unique_shopify__customer_email_cohorts_customer_cohort_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182", "fqn": ["shopify", "unique_shopify__customer_email_cohorts_customer_cohort_id"], "alias": "unique_shopify__customer_email_cohorts_customer_cohort_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.650199, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__customer_email_cohorts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customer_email_cohorts"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/unique_shopify__customer_email_cohorts_customer_cohort_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_cohort_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_email_cohorts\"\nwhere customer_cohort_id is not null\ngroup by customer_cohort_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_cohort_id", "file_key_name": "models.shopify__customer_email_cohorts", "attached_node": "model.shopify.shopify__customer_email_cohorts", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_cohort_id", "model": "{{ get_where_subquery(ref('shopify__customer_email_cohorts')) }}"}, "namespace": null}}, "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__customer_email_cohorts_customer_cohort_id", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__customer_email_cohorts_customer_cohort_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48", "fqn": ["shopify", "not_null_shopify__customer_email_cohorts_customer_cohort_id"], "alias": "not_null_shopify__customer_email_cohorts_customer_cohort_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.651138, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__customer_email_cohorts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customer_email_cohorts"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__customer_email_cohorts_customer_cohort_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_cohort_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_email_cohorts\"\nwhere customer_cohort_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_cohort_id", "file_key_name": "models.shopify__customer_email_cohorts", "attached_node": "model.shopify.shopify__customer_email_cohorts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_cohort_id", "model": "{{ get_where_subquery(ref('shopify__customer_email_cohorts')) }}"}, "namespace": null}}, "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "unique_shopify__orders_orders_unique_key", "resource_type": "test", "package_name": "shopify", "path": "unique_shopify__orders_orders_unique_key.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51", "fqn": ["shopify", "unique_shopify__orders_orders_unique_key"], "alias": "unique_shopify__orders_orders_unique_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.652012, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__orders"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/unique_shopify__orders_orders_unique_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    orders_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\nwhere orders_unique_key is not null\ngroup by orders_unique_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "orders_unique_key", "file_key_name": "models.shopify__orders", "attached_node": "model.shopify.shopify__orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "orders_unique_key", "model": "{{ get_where_subquery(ref('shopify__orders')) }}"}, "namespace": null}}, "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__orders_orders_unique_key", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__orders_orders_unique_key.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9", "fqn": ["shopify", "not_null_shopify__orders_orders_unique_key"], "alias": "not_null_shopify__orders_orders_unique_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.65319, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__orders"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__orders_orders_unique_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect orders_unique_key\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\nwhere orders_unique_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "orders_unique_key", "file_key_name": "models.shopify__orders", "attached_node": "model.shopify.shopify__orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "orders_unique_key", "model": "{{ get_where_subquery(ref('shopify__orders')) }}"}, "namespace": null}}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation"], "alias": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696"}, "created_at": 1747951351.654214, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696\") }}", "language": "sql", "refs": [{"name": "shopify__customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customers"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_93b849a7493f07ea332b58b74fbb6696.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customers\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.shopify__customers", "attached_node": "model.shopify.shopify__customers", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__customers')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_a037bdcec34d5e6ecbd4cfad6b54088f.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation"], "alias": "dbt_utils_unique_combination_o_a037bdcec34d5e6ecbd4cfad6b54088f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a037bdcec34d5e6ecbd4cfad6b54088f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a037bdcec34d5e6ecbd4cfad6b54088f"}, "created_at": 1747951351.657918, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a037bdcec34d5e6ecbd4cfad6b54088f\") }}", "language": "sql", "refs": [{"name": "shopify__customer_emails", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customer_emails"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_a037bdcec34d5e6ecbd4cfad6b54088f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__customer_emails\"\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.shopify__customer_emails", "attached_node": "model.shopify.shopify__customer_emails", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["email", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__customer_emails')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation"], "alias": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa"}, "created_at": 1747951351.660925, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa\") }}", "language": "sql", "refs": [{"name": "shopify__products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__products"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_64adf669e5f645d81dbdf6d5d3a930fa.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__products\"\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.shopify__products", "attached_node": "model.shopify.shopify__products", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__products')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "unique_shopify__order_lines_order_lines_unique_key", "resource_type": "test", "package_name": "shopify", "path": "unique_shopify__order_lines_order_lines_unique_key.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e", "fqn": ["shopify", "unique_shopify__order_lines_order_lines_unique_key"], "alias": "unique_shopify__order_lines_order_lines_unique_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.664991, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__order_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__order_lines"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/unique_shopify__order_lines_order_lines_unique_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_lines_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\nwhere order_lines_unique_key is not null\ngroup by order_lines_unique_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_lines_unique_key", "file_key_name": "models.shopify__order_lines", "attached_node": "model.shopify.shopify__order_lines", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_lines_unique_key", "model": "{{ get_where_subquery(ref('shopify__order_lines')) }}"}, "namespace": null}}, "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__order_lines_order_lines_unique_key", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__order_lines_order_lines_unique_key.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2", "fqn": ["shopify", "not_null_shopify__order_lines_order_lines_unique_key"], "alias": "not_null_shopify__order_lines_order_lines_unique_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.6672971, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__order_lines", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__order_lines"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__order_lines_order_lines_unique_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_lines_unique_key\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\nwhere order_lines_unique_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_lines_unique_key", "file_key_name": "models.shopify__order_lines", "attached_node": "model.shopify.shopify__order_lines", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_lines_unique_key", "model": "{{ get_where_subquery(ref('shopify__order_lines')) }}"}, "namespace": null}}, "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "unique_shopify__transactions_transactions_unique_id", "resource_type": "test", "package_name": "shopify", "path": "unique_shopify__transactions_transactions_unique_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981", "fqn": ["shopify", "unique_shopify__transactions_transactions_unique_id"], "alias": "unique_shopify__transactions_transactions_unique_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.6686022, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__transactions"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/unique_shopify__transactions_transactions_unique_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transactions_unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\nwhere transactions_unique_id is not null\ngroup by transactions_unique_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transactions_unique_id", "file_key_name": "models.shopify__transactions", "attached_node": "model.shopify.shopify__transactions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transactions_unique_id", "model": "{{ get_where_subquery(ref('shopify__transactions')) }}"}, "namespace": null}}, "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__transactions_transactions_unique_id", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__transactions_transactions_unique_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f", "fqn": ["shopify", "not_null_shopify__transactions_transactions_unique_id"], "alias": "not_null_shopify__transactions_transactions_unique_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.6698601, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__transactions"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__transactions_transactions_unique_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transactions_unique_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\nwhere transactions_unique_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transactions_unique_id", "file_key_name": "models.shopify__transactions", "attached_node": "model.shopify.shopify__transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transactions_unique_id", "model": "{{ get_where_subquery(ref('shopify__transactions')) }}"}, "namespace": null}}, "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__inventory_levels_inventory_item_id", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__inventory_levels_inventory_item_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56", "fqn": ["shopify", "not_null_shopify__inventory_levels_inventory_item_id"], "alias": "not_null_shopify__inventory_levels_inventory_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.670793, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__inventory_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__inventory_levels"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__inventory_levels_inventory_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_item_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__inventory_levels\"\nwhere inventory_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "inventory_item_id", "file_key_name": "models.shopify__inventory_levels", "attached_node": "model.shopify.shopify__inventory_levels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "inventory_item_id", "model": "{{ get_where_subquery(ref('shopify__inventory_levels')) }}"}, "namespace": null}}, "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__inventory_levels_location_id", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__inventory_levels_location_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0", "fqn": ["shopify", "not_null_shopify__inventory_levels_location_id"], "alias": "not_null_shopify__inventory_levels_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.671704, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__inventory_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__inventory_levels"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__inventory_levels_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__inventory_levels\"\nwhere location_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_id", "file_key_name": "models.shopify__inventory_levels", "attached_node": "model.shopify.shopify__inventory_levels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('shopify__inventory_levels')) }}"}, "namespace": null}}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_dfc251380c6ee155deabda0cc246b36b.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation"], "alias": "dbt_utils_unique_combination_o_dfc251380c6ee155deabda0cc246b36b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_dfc251380c6ee155deabda0cc246b36b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_dfc251380c6ee155deabda0cc246b36b"}, "created_at": 1747951351.67353, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_dfc251380c6ee155deabda0cc246b36b\") }}", "language": "sql", "refs": [{"name": "shopify__inventory_levels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__inventory_levels"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_dfc251380c6ee155deabda0cc246b36b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        inventory_item_id, location_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__inventory_levels\"\n    group by inventory_item_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.shopify__inventory_levels", "attached_node": "model.shopify.shopify__inventory_levels", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["inventory_item_id", "location_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__inventory_levels')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "unique_shopify__discounts_discounts_unique_key", "resource_type": "test", "package_name": "shopify", "path": "unique_shopify__discounts_discounts_unique_key.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f", "fqn": ["shopify", "unique_shopify__discounts_discounts_unique_key"], "alias": "unique_shopify__discounts_discounts_unique_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.6775649, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__discounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__discounts"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/unique_shopify__discounts_discounts_unique_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    discounts_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__discounts\"\nwhere discounts_unique_key is not null\ngroup by discounts_unique_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discounts_unique_key", "file_key_name": "models.shopify__discounts", "attached_node": "model.shopify.shopify__discounts", "test_metadata": {"name": "unique", "kwargs": {"column_name": "discounts_unique_key", "model": "{{ get_where_subquery(ref('shopify__discounts')) }}"}, "namespace": null}}, "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__discounts_discounts_unique_key", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__discounts_discounts_unique_key.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d", "fqn": ["shopify", "not_null_shopify__discounts_discounts_unique_key"], "alias": "not_null_shopify__discounts_discounts_unique_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.680181, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__discounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__discounts"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__discounts_discounts_unique_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discounts_unique_key\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__discounts\"\nwhere discounts_unique_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discounts_unique_key", "file_key_name": "models.shopify__discounts", "attached_node": "model.shopify.shopify__discounts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discounts_unique_key", "model": "{{ get_where_subquery(ref('shopify__discounts')) }}"}, "namespace": null}}, "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__discounts_discount_code_id", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__discounts_discount_code_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81", "fqn": ["shopify", "not_null_shopify__discounts_discount_code_id"], "alias": "not_null_shopify__discounts_discount_code_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.6811268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__discounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__discounts"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__discounts_discount_code_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_code_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__discounts\"\nwhere discount_code_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount_code_id", "file_key_name": "models.shopify__discounts", "attached_node": "model.shopify.shopify__discounts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_code_id", "model": "{{ get_where_subquery(ref('shopify__discounts')) }}"}, "namespace": null}}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_3619981b09484efc5c9e587980d5d04e.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f", "fqn": ["shopify", "dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation"], "alias": "dbt_utils_unique_combination_o_3619981b09484efc5c9e587980d5d04e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3619981b09484efc5c9e587980d5d04e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_unique_combination_o_3619981b09484efc5c9e587980d5d04e"}, "created_at": 1747951351.682142, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_unique_combination_o_3619981b09484efc5c9e587980d5d04e\") }}", "language": "sql", "refs": [{"name": "shopify__discounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__discounts"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/dbt_utils_unique_combination_o_3619981b09484efc5c9e587980d5d04e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        code, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__discounts\"\n    group by code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.shopify__discounts", "attached_node": "model.shopify.shopify__discounts", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["code", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__discounts')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "not_null_shopify__daily_shop_shop_id", "resource_type": "test", "package_name": "shopify", "path": "not_null_shopify__daily_shop_shop_id.sql", "original_file_path": "models/shopify.yml", "unique_id": "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f", "fqn": ["shopify", "not_null_shopify__daily_shop_shop_id"], "alias": "not_null_shopify__daily_shop_shop_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747951351.686414, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "shopify__daily_shop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__daily_shop"]}, "compiled_path": "target/compiled/shopify/models/shopify.yml/not_null_shopify__daily_shop_shop_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shop_id\nfrom \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__daily_shop\"\nwhere shop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shop_id", "file_key_name": "models.shopify__daily_shop", "attached_node": "model.shopify.shopify__daily_shop", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shop_id", "model": "{{ get_where_subquery(ref('shopify__daily_shop')) }}"}, "namespace": null}}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__line_item_enhanced_header_id__line_item_id__source_relation.27b8b0d3ae": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_shopify__line_item_enhanced_header_id__line_item_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_c291aebdbc911f5b35b8db0c065cbb95.sql", "original_file_path": "models/standardized_models/shopify__standardized_models.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__line_item_enhanced_header_id__line_item_id__source_relation.27b8b0d3ae", "fqn": ["shopify", "standardized_models", "dbt_utils_unique_combination_of_columns_shopify__line_item_enhanced_header_id__line_item_id__source_relation"], "alias": "dbt_utils_unique_combination_o_c291aebdbc911f5b35b8db0c065cbb95", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c291aebdbc911f5b35b8db0c065cbb95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c291aebdbc911f5b35b8db0c065cbb95"}, "created_at": 1747951351.694015, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c291aebdbc911f5b35b8db0c065cbb95\") }}", "language": "sql", "refs": [{"name": "shopify__line_item_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__line_item_enhanced"]}, "compiled_path": "target/compiled/shopify/models/standardized_models/shopify__standardized_models.yml/dbt_utils_unique_combination_o_c291aebdbc911f5b35b8db0c065cbb95.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        header_id, line_item_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__line_item_enhanced\"\n    group by header_id, line_item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.shopify__line_item_enhanced", "attached_node": "model.shopify.shopify__line_item_enhanced", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["header_id", "line_item_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__line_item_enhanced')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation"], "alias": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3"}, "created_at": 1747951351.7048042, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3\") }}", "language": "sql", "refs": [{"name": "shopify__customers__order_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__customers__order_aggregates"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_4d1af0d9338b2b5b246e23c580e294e3.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    \n    group by 1,2\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        customer_id, source_relation\n    from __dbt__cte__shopify__customers__order_aggregates\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__customers__order_aggregates", "sql": " __dbt__cte__shopify__customers__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where customer_id is not null\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), aggregated as (\n\n    select\n        orders.customer_id,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n\n    from orders\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n    \n    group by 1,2\n)\n\nselect *\nfrom aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.shopify__customers__order_aggregates", "attached_node": "model.shopify.shopify__customers__order_aggregates", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__customers__order_aggregates')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation"], "alias": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04"}, "created_at": 1747951351.7078102, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04\") }}", "language": "sql", "refs": [{"name": "shopify__orders__order_line_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.shopify__orders__order_line_aggregates"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_3ae1e43ee344b59ccef000bf524f1f04.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.shopify__orders__order_line_aggregates", "attached_node": "model.shopify.shopify__orders__order_line_aggregates", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "source_relation"], "model": "{{ get_where_subquery(ref('shopify__orders__order_line_aggregates')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_3413ddd831f02d9d3d2775f9dfc10df1.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation"], "alias": "dbt_utils_unique_combination_o_3413ddd831f02d9d3d2775f9dfc10df1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3413ddd831f02d9d3d2775f9dfc10df1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3413ddd831f02d9d3d2775f9dfc10df1"}, "created_at": 1747951351.7105439, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3413ddd831f02d9d3d2775f9dfc10df1\") }}", "language": "sql", "refs": [{"name": "int_shopify__emails__order_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.int_shopify__emails__order_aggregates"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_3413ddd831f02d9d3d2775f9dfc10df1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        email, source_relation\n    from __dbt__cte__int_shopify__emails__order_aggregates\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__emails__order_aggregates", "sql": " __dbt__cte__int_shopify__emails__order_aggregates as (\nwith orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n\n), order_aggregates as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders__order_line_aggregates\"\n\n), transactions as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__transactions\"\n\n    where lower(status) = 'success'\n    and lower(kind) not in ('authorization', 'void')\n    and lower(gateway) != 'gift_card' -- redeeming a giftcard does not introduce new revenue\n\n), transaction_aggregates as (\n    -- this is necessary as customers can pay via multiple payment gateways\n    select \n        order_id,\n        source_relation,\n        lower(kind) as kind,\n        sum(currency_exchange_calculated_amount) as currency_exchange_calculated_amount\n\n    from transactions\n    group by 1,2,3\n\n), customer_emails as (\n-- in case any orders records don't have the customer email attached yet\n    select \n        customer_id, \n        source_relation,\n        email\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__customer\"\n    where email is not null\n    group by 1,2,3\n    \n), aggregated as (\n\n    select\n        lower(customer_emails.email) as email,\n        orders.source_relation,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n        avg(transaction_aggregates.currency_exchange_calculated_amount) as avg_order_value,\n        sum(transaction_aggregates.currency_exchange_calculated_amount) as lifetime_total_spent,\n        sum(refunds.currency_exchange_calculated_amount) as lifetime_total_refunded,\n        count(distinct orders.order_id) as lifetime_count_orders,\n        avg(order_aggregates.order_total_quantity) as avg_quantity_per_order,\n        sum(order_aggregates.order_total_tax) as lifetime_total_tax,\n        avg(order_aggregates.order_total_tax) as avg_tax_per_order,\n        sum(order_aggregates.order_total_discount) as lifetime_total_discount,\n        avg(order_aggregates.order_total_discount) as avg_discount_per_order,\n        sum(order_aggregates.order_total_shipping) as lifetime_total_shipping,\n        avg(order_aggregates.order_total_shipping) as avg_shipping_per_order,\n        sum(order_aggregates.order_total_shipping_with_discounts) as lifetime_total_shipping_with_discounts,\n        avg(order_aggregates.order_total_shipping_with_discounts) as avg_shipping_with_discounts_per_order,\n        sum(order_aggregates.order_total_shipping_tax) as lifetime_total_shipping_tax,\n        avg(order_aggregates.order_total_shipping_tax) as avg_shipping_tax_per_order\n    from orders\n    join customer_emails\n        on orders.customer_id = customer_emails.customer_id\n        and orders.source_relation = customer_emails.source_relation\n    left join transaction_aggregates \n        on orders.order_id = transaction_aggregates.order_id\n        and orders.source_relation = transaction_aggregates.source_relation\n        and transaction_aggregates.kind in ('sale','capture')\n    left join transaction_aggregates as refunds\n        on orders.order_id = refunds.order_id\n        and orders.source_relation = refunds.source_relation\n        and refunds.kind = 'refund'\n    left join order_aggregates\n        on orders.order_id = order_aggregates.order_id\n        and orders.source_relation = order_aggregates.source_relation\n\n    group by 1,2\n\n)\n\nselect *\nfrom aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_shopify__emails__order_aggregates", "attached_node": "model.shopify.int_shopify__emails__order_aggregates", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["email", "source_relation"], "model": "{{ get_where_subquery(ref('int_shopify__emails__order_aggregates')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_b2d9beab50cba4ec68a90514dcea01ce.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation"], "alias": "dbt_utils_unique_combination_o_b2d9beab50cba4ec68a90514dcea01ce", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b2d9beab50cba4ec68a90514dcea01ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b2d9beab50cba4ec68a90514dcea01ce"}, "created_at": 1747951351.715421, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b2d9beab50cba4ec68a90514dcea01ce\") }}", "language": "sql", "refs": [{"name": "int_shopify__customer_email_rollup", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.int_shopify__customer_email_rollup"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_b2d9beab50cba4ec68a90514dcea01ce.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"int_shopify__customer_email_rollup\"\n    group by email, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_shopify__customer_email_rollup", "attached_node": "model.shopify.int_shopify__customer_email_rollup", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["email", "source_relation"], "model": "{{ get_where_subquery(ref('int_shopify__customer_email_rollup')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_d6a2a160f207229d97b648f0069fee1e.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation"], "alias": "dbt_utils_unique_combination_o_d6a2a160f207229d97b648f0069fee1e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d6a2a160f207229d97b648f0069fee1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d6a2a160f207229d97b648f0069fee1e"}, "created_at": 1747951351.7201622, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d6a2a160f207229d97b648f0069fee1e\") }}", "language": "sql", "refs": [{"name": "int_shopify__inventory_level__aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.int_shopify__inventory_level__aggregates"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_d6a2a160f207229d97b648f0069fee1e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n),  __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n), validation_errors as (\n\n    select\n        variant_id, location_id, source_relation\n    from __dbt__cte__int_shopify__inventory_level__aggregates\n    group by variant_id, location_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.shopify__orders__order_refunds", "sql": " __dbt__cte__shopify__orders__order_refunds as (\nwith refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__refund\"\n\n), order_line_refunds as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line_refund\"\n    \n), refund_join as (\n\n    select \n        refunds.refund_id,\n        refunds.created_at,\n        refunds.order_id,\n        refunds.user_id,\n        refunds.source_relation,\n        order_line_refunds.order_line_refund_id,\n        order_line_refunds.order_line_id,\n        order_line_refunds.restock_type,\n        order_line_refunds.quantity,\n        order_line_refunds.subtotal,\n        order_line_refunds.total_tax\n\n    from refunds\n    left join order_line_refunds\n        on refunds.refund_id = order_line_refunds.refund_id\n        and refunds.source_relation = order_line_refunds.source_relation\n\n)\n\nselect *\nfrom refund_join\n)"}, {"id": "model.shopify.int_shopify__inventory_level__aggregates", "sql": " __dbt__cte__int_shopify__inventory_level__aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_line\"\n),\n\nfulfillment as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__fulfillment\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order\"\n    where not coalesce(is_deleted, false)\n), \n\nrefunds as (\n\n    select *\n    from __dbt__cte__shopify__orders__order_refunds\n\n), refunds_aggregated as (\n    \n    select\n        order_line_id,\n        source_relation,\n        sum(quantity) as quantity,\n        sum(coalesce(subtotal, 0)) as subtotal\n\n    from refunds\n    group by 1,2\n),\n\njoined as (\n\n    select\n        order_lines.order_line_id,\n        order_lines.variant_id,\n        order_lines.source_relation,\n        fulfillment.location_id, -- location id is stored in fulfillment rather than order\n        orders.order_id,\n        orders.customer_id,\n        fulfillment.fulfillment_id,\n        lower(orders.email) as email,\n        order_lines.pre_tax_price,\n        order_lines.quantity,\n        orders.created_timestamp as order_created_timestamp,\n        fulfillment.status as fulfillment_status, \n        refunds_aggregated.subtotal as subtotal_sold_refunds, \n        refunds_aggregated.quantity as quantity_sold_refunds\n\n    from order_lines\n    join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    join fulfillment\n        on orders.order_id = fulfillment.order_id\n        and orders.source_relation = fulfillment.source_relation\n    left join refunds_aggregated\n        on refunds_aggregated.order_line_id = order_lines.order_line_id\n        and refunds_aggregated.source_relation = order_lines.source_relation\n),\n\naggregated as (\n\n    select\n        variant_id,\n        location_id,\n        source_relation,\n        sum(pre_tax_price) as subtotal_sold,\n        sum(quantity) as quantity_sold,\n        count(distinct order_id) as count_distinct_orders,\n        count(distinct customer_id) as count_distinct_customers,\n        count(distinct email) as count_distinct_customer_emails,\n        min(order_created_timestamp) as first_order_timestamp,\n        max(order_created_timestamp) as last_order_timestamp\n\n        \n        , count(distinct case when fulfillment_status = 'pending' then fulfillment_id end) as count_fulfillment_pending\n        \n        , count(distinct case when fulfillment_status = 'open' then fulfillment_id end) as count_fulfillment_open\n        \n        , count(distinct case when fulfillment_status = 'success' then fulfillment_id end) as count_fulfillment_success\n        \n        , count(distinct case when fulfillment_status = 'cancelled' then fulfillment_id end) as count_fulfillment_cancelled\n        \n        , count(distinct case when fulfillment_status = 'error' then fulfillment_id end) as count_fulfillment_error\n        \n        , count(distinct case when fulfillment_status = 'failure' then fulfillment_id end) as count_fulfillment_failure\n        \n\n        , sum(coalesce(subtotal_sold_refunds, 0)) as subtotal_sold_refunds\n        , sum(coalesce(quantity_sold_refunds, 0)) as quantity_sold_refunds\n\n    from joined\n\n    group by 1,2,3\n)\n\nselect *\nfrom aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_shopify__inventory_level__aggregates", "attached_node": "model.shopify.int_shopify__inventory_level__aggregates", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["variant_id", "location_id", "source_relation"], "model": "{{ get_where_subquery(ref('int_shopify__inventory_level__aggregates')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_16fa63126d6426682f1ed1d07e35ca13.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation"], "alias": "dbt_utils_unique_combination_o_16fa63126d6426682f1ed1d07e35ca13", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_16fa63126d6426682f1ed1d07e35ca13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_16fa63126d6426682f1ed1d07e35ca13"}, "created_at": 1747951351.724637, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_16fa63126d6426682f1ed1d07e35ca13\") }}", "language": "sql", "refs": [{"name": "int_shopify__discounts__order_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.int_shopify__discounts__order_aggregates"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_16fa63126d6426682f1ed1d07e35ca13.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__order_aggregates\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__discounts__order_aggregates", "sql": " __dbt__cte__int_shopify__discounts__order_aggregates as (\nwith order_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_discount_code\"\n),\n\norders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n),\n\norders_aggregated as (\n\n    select \n        order_discount_code.code,\n        order_discount_code.type,\n        order_discount_code.source_relation,\n        avg(order_discount_code.amount) as avg_order_discount_amount,\n        sum(order_discount_code.amount) as total_order_discount_amount,\n        max(orders.total_line_items_price) as total_order_line_items_price, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.shipping_cost) as total_order_shipping_cost, -- summing would multiply the total by the # of discount codes applied to an order\n        max(orders.refund_subtotal + orders.refund_total_tax) as total_order_refund_amount, -- summing would multiply the total by the # of discount codes applied to an order\n        count(distinct customer_id) as count_customers,\n        count(distinct email) as count_customer_emails,\n        count(distinct order_discount_code.order_id) as count_orders\n\n    from order_discount_code\n    join orders \n        on order_discount_code.order_id = orders.order_id \n        and order_discount_code.source_relation = orders.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom orders_aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_shopify__discounts__order_aggregates", "attached_node": "model.shopify.int_shopify__discounts__order_aggregates", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["code", "type", "source_relation"], "model": "{{ get_where_subquery(ref('int_shopify__discounts__order_aggregates')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_400e4c10f4dc60b813509ec48670e936.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation"], "alias": "dbt_utils_unique_combination_o_400e4c10f4dc60b813509ec48670e936", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_400e4c10f4dc60b813509ec48670e936", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_400e4c10f4dc60b813509ec48670e936"}, "created_at": 1747951351.72865, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_400e4c10f4dc60b813509ec48670e936\") }}", "language": "sql", "refs": [{"name": "int_shopify__discounts__abandoned_checkouts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.int_shopify__discounts__abandoned_checkouts"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_400e4c10f4dc60b813509ec48670e936.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\n\n\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n), validation_errors as (\n\n    select\n        code, type, source_relation\n    from __dbt__cte__int_shopify__discounts__abandoned_checkouts\n    group by code, type, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__discounts__abandoned_checkouts", "sql": " __dbt__cte__int_shopify__discounts__abandoned_checkouts as (\n\n\nwith abandoned_checkout as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout\"\n\n    -- \"deleted\" abandoned checkouts do not appear to have any data tying them to customers,\n    -- discounts, or products (and should therefore not get joined in) but let's filter them out here\n    where not coalesce(is_deleted, false)\n),\n\nabandoned_checkout_discount_code as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_discount_code\"\n\n    -- we need the TYPE of discount (shipping, percentage, fixed_amount) to avoid fanning out of joins\n    -- so filter out records that have this\n    where coalesce(type, '') != ''\n),\n\nabandoned_checkout_shipping_line as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__abandoned_checkout_shipping_line\"\n),\n\nroll_up_shipping_line as (\n\n    select \n        checkout_id,\n        source_relation,\n        sum(price) as price\n\n    from abandoned_checkout_shipping_line\n    group by 1,2\n),\n\nabandoned_checkouts_aggregated as (\n\n    select \n        abandoned_checkout_discount_code.code,\n        abandoned_checkout_discount_code.type,\n        abandoned_checkout_discount_code.source_relation,\n        sum(abandoned_checkout_discount_code.amount) as total_abandoned_checkout_discount_amount,\n        sum(coalesce(abandoned_checkout.total_line_items_price, 0)) as total_abandoned_checkout_line_items_price,\n        sum(coalesce(roll_up_shipping_line.price, 0)) as total_abandoned_checkout_shipping_price,\n        count(distinct customer_id) as count_abandoned_checkout_customers,\n        count(distinct email) as count_abandoned_checkout_customer_emails,\n        count(distinct abandoned_checkout.checkout_id) as count_abandoned_checkouts\n\n    from abandoned_checkout_discount_code\n    left join abandoned_checkout\n        on abandoned_checkout_discount_code.checkout_id = abandoned_checkout.checkout_id\n        and abandoned_checkout_discount_code.source_relation = abandoned_checkout.source_relation\n    left join roll_up_shipping_line\n        on roll_up_shipping_line.checkout_id = abandoned_checkout_discount_code.checkout_id \n        and roll_up_shipping_line.source_relation = abandoned_checkout_discount_code.source_relation\n\n    group by 1,2,3\n)\n\nselect *\nfrom abandoned_checkouts_aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_shopify__discounts__abandoned_checkouts", "attached_node": "model.shopify.int_shopify__discounts__abandoned_checkouts", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["code", "type", "source_relation"], "model": "{{ get_where_subquery(ref('int_shopify__discounts__abandoned_checkouts')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_eb3690dd1b28b990285c194e64469aac.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation"], "alias": "dbt_utils_unique_combination_o_eb3690dd1b28b990285c194e64469aac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_eb3690dd1b28b990285c194e64469aac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_eb3690dd1b28b990285c194e64469aac"}, "created_at": 1747951351.732675, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_eb3690dd1b28b990285c194e64469aac\") }}", "language": "sql", "refs": [{"name": "int_shopify__order__shipping_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.int_shopify__order__shipping_aggregates"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_eb3690dd1b28b990285c194e64469aac.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n), validation_errors as (\n\n    select\n        order_id, source_relation\n    from __dbt__cte__int_shopify__order__shipping_aggregates\n    group by order_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__order__shipping_aggregates", "sql": " __dbt__cte__int_shopify__order__shipping_aggregates as (\nwith order_shipping_line as (\n\n    select\n        order_id,\n        source_relation,\n        order_shipping_line_id,\n        sum(price) as shipping_price,\n        sum(discounted_price) as discounted_shipping_price\n        \n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_line\"\n    group by 1,2,3\n\n), order_shipping_tax_line as (\n\n    select\n        order_shipping_line_id,\n        source_relation,\n        sum(price) as shipping_tax\n\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__order_shipping_tax_line\"\n    group by 1,2 \n\n), aggregated as (\n\n    select \n        order_shipping_line.order_id,\n        order_shipping_line.source_relation,\n        sum(order_shipping_line.shipping_price) as shipping_price,\n        sum(order_shipping_line.discounted_shipping_price) as discounted_shipping_price,\n        sum(order_shipping_tax_line.shipping_tax) as shipping_tax\n\n    from order_shipping_line\n    left join order_shipping_tax_line\n        on order_shipping_line.order_shipping_line_id = order_shipping_tax_line.order_shipping_line_id\n        and order_shipping_line.source_relation = order_shipping_tax_line.source_relation\n    group by 1,2\n)\n\nselect * \nfrom aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_shopify__order__shipping_aggregates", "attached_node": "model.shopify.int_shopify__order__shipping_aggregates", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["order_id", "source_relation"], "model": "{{ get_where_subquery(ref('int_shopify__order__shipping_aggregates')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_3567d8646c8635cb0bb0c90d50675c28.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation"], "alias": "dbt_utils_unique_combination_o_3567d8646c8635cb0bb0c90d50675c28", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3567d8646c8635cb0bb0c90d50675c28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3567d8646c8635cb0bb0c90d50675c28"}, "created_at": 1747951351.736748, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3567d8646c8635cb0bb0c90d50675c28\") }}", "language": "sql", "refs": [{"name": "int_shopify__product__order_line_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.int_shopify__product__order_line_aggregates"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_3567d8646c8635cb0bb0c90d50675c28.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__product__order_line_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__product__order_line_aggregates", "sql": " __dbt__cte__int_shopify__product__order_line_aggregates as (\nwith order_lines as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__order_lines\"\n\n), orders as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"shopify__orders\"\n\n), product_aggregated as (\n    select \n        order_lines.product_id,\n        order_lines.source_relation,\n\n        -- moved over from shopify__products\n        sum(order_lines.quantity) as quantity_sold,\n        sum(order_lines.pre_tax_price) as subtotal_sold,\n        sum(order_lines.quantity_net_refunds) as quantity_sold_net_refunds,\n        sum(order_lines.subtotal_net_refunds) as subtotal_sold_net_refunds,\n        min(orders.created_timestamp) as first_order_timestamp,\n        max(orders.created_timestamp) as most_recent_order_timestamp,\n\n        -- new columns\n        sum(order_lines.total_discount) as product_total_discount,\n        sum(order_lines.order_line_tax) as product_total_tax,\n        avg(order_lines.quantity) as avg_quantity_per_order_line,\n        avg(order_lines.total_discount) as product_avg_discount_per_order_line,\n        avg(order_lines.order_line_tax) as product_avg_tax_per_order_line\n\n    from order_lines\n    left join orders\n        on order_lines.order_id = orders.order_id\n        and order_lines.source_relation = orders.source_relation\n    group by 1,2\n\n)\n\nselect *\nfrom product_aggregated\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_shopify__product__order_line_aggregates", "attached_node": "model.shopify.int_shopify__product__order_line_aggregates", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_id", "source_relation"], "model": "{{ get_where_subquery(ref('int_shopify__product__order_line_aggregates')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_347b53509430f5e2ea1bbc3d54e6dd04.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation"], "alias": "dbt_utils_unique_combination_o_347b53509430f5e2ea1bbc3d54e6dd04", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_347b53509430f5e2ea1bbc3d54e6dd04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_347b53509430f5e2ea1bbc3d54e6dd04"}, "created_at": 1747951351.741596, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_347b53509430f5e2ea1bbc3d54e6dd04\") }}", "language": "sql", "refs": [{"name": "int_shopify__products_with_aggregates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.int_shopify__products_with_aggregates"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_347b53509430f5e2ea1bbc3d54e6dd04.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"\n), \n\nproduct_media as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media\"\n),\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nmedia_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(distinct media_id) as count_media\n    from product_media\n    group by 1,2\n), \n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(media_aggregated.count_media, 0) > 0 as has_product_media\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join media_aggregated\n        on products.product_id = media_aggregated.product_id\n        and products.source_relation = media_aggregated.source_relation\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        product_id, source_relation\n    from __dbt__cte__int_shopify__products_with_aggregates\n    group by product_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__products_with_aggregates", "sql": " __dbt__cte__int_shopify__products_with_aggregates as (\nwith products as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product\"\n), \n\ncollection_product as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection_product\"\n),\n\ncollection as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__collection\"\n    where not coalesce(is_deleted, false) -- limit to only active collections\n),\n\nproduct_tag as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_tag\"\n),\n\nproduct_variant as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_variant\"\n), \n\nproduct_media as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__product_media\"\n),\n\ncollections_aggregated as (\n\n    select\n        collection_product.product_id,\n        collection_product.source_relation,\n        \n    string_agg(collection.title, ', ')\n\n as collections\n    from collection_product \n    join collection \n        on collection_product.collection_id = collection.collection_id\n        and collection_product.source_relation = collection.source_relation\n    group by 1,2\n),\n\ntags_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        \n    string_agg(value, ', ')\n\n as tags\n    \n    from product_tag\n    group by 1,2\n),\n\nvariants_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(variant_id) as count_variants\n\n    from product_variant\n    group by 1,2\n\n),\n\nmedia_aggregated as (\n\n    select \n        product_id,\n        source_relation,\n        count(distinct media_id) as count_media\n    from product_media\n    group by 1,2\n), \n\njoined as (\n\n    select\n        products.*,\n        collections_aggregated.collections,\n        tags_aggregated.tags,\n        variants_aggregated.count_variants,\n        coalesce(media_aggregated.count_media, 0) > 0 as has_product_media\n\n    from products\n    left join collections_aggregated\n        on products.product_id = collections_aggregated.product_id\n        and products.source_relation = collections_aggregated.source_relation\n    left join tags_aggregated\n        on products.product_id = tags_aggregated.product_id\n        and products.source_relation = tags_aggregated.source_relation\n    left join variants_aggregated\n        on products.product_id = variants_aggregated.product_id\n        and products.source_relation = variants_aggregated.source_relation\n    left join media_aggregated\n        on products.product_id = media_aggregated.product_id\n        and products.source_relation = media_aggregated.source_relation\n)\n\nselect *\nfrom joined\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_shopify__products_with_aggregates", "attached_node": "model.shopify.int_shopify__products_with_aggregates", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_id", "source_relation"], "model": "{{ get_where_subquery(ref('int_shopify__products_with_aggregates')) }}"}, "namespace": "dbt_utils"}}, "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discount_code_enriched_code__source_relation.43df67b091": {"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_shopify__discount_code_enriched_code__source_relation", "resource_type": "test", "package_name": "shopify", "path": "dbt_utils_unique_combination_o_5368aaf9111a76f0f2253a79922522a8.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discount_code_enriched_code__source_relation.43df67b091", "fqn": ["shopify", "intermediate", "dbt_utils_unique_combination_of_columns_int_shopify__discount_code_enriched_code__source_relation"], "alias": "dbt_utils_unique_combination_o_5368aaf9111a76f0f2253a79922522a8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5368aaf9111a76f0f2253a79922522a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5368aaf9111a76f0f2253a79922522a8"}, "created_at": 1747951351.746201, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5368aaf9111a76f0f2253a79922522a8\") }}", "language": "sql", "refs": [{"name": "int_shopify__discount_code_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.shopify.int_shopify__discount_code_enriched"]}, "compiled_path": "target/compiled/shopify/models/intermediate/intermediate.yml/dbt_utils_unique_combination_o_5368aaf9111a76f0f2253a79922522a8.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_shopify__discount_code_enriched as (\nwith discount_redeem_codes as (\n    \n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code\"\n),\n\ndiscount_applications as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application\"\n),\n\nunified_discount_codes as (\n\n    select\n        discount_code_id,\n        'basic' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'bxgy' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'free_shipping' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping\"\n\n    \n    \n    union all\n\n    select  \n        discount_code_id,\n        'app' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app\"\n    \n),\n\ndiscounts_with_codes as (\n\n    select\n        discount_redeem_codes.code,\n        unified_discount_codes.*\n    from unified_discount_codes \n    left join discount_redeem_codes \n        on unified_discount_codes.discount_code_id = discount_redeem_codes.discount_id\n        and unified_discount_codes.source_relation = discount_redeem_codes.source_relation\n),\n\ndiscounts_with_applications as (\n\n    select\n        discounts_with_codes.*,\n        discount_applications.allocation_method,\n        discount_applications.description,\n        discount_applications.target_selection,\n        discount_applications.target_type,\n        discount_applications.type as application_type,\n        discount_applications.value,\n        discount_applications.value_type\n    from discounts_with_codes\n    left join discount_applications \n        on discounts_with_codes.code = discount_applications.code\n        and discounts_with_codes.source_relation = discount_applications.source_relation\n)\n\nselect *\nfrom discounts_with_applications\n), validation_errors as (\n\n    select\n        code, source_relation\n    from __dbt__cte__int_shopify__discount_code_enriched\n    group by code, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.shopify.int_shopify__discount_code_enriched", "sql": " __dbt__cte__int_shopify__discount_code_enriched as (\nwith discount_redeem_codes as (\n    \n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_redeem_code\"\n),\n\ndiscount_applications as (\n\n    select *\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_application\"\n),\n\nunified_discount_codes as (\n\n    select\n        discount_code_id,\n        'basic' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_basic\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'bxgy' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_bxgy\"\n\n    union all\n    \n    select\n        discount_code_id,\n        'free_shipping' as discount_type, \n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at, \n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_free_shipping\"\n\n    \n    \n    union all\n\n    select  \n        discount_code_id,\n        'app' as discount_type,\n        applies_once_per_customer,\n        usage_count,\n        codes_count,\n        codes_precision,\n        combines_with_order_discounts,\n        combines_with_product_discounts,\n        combines_with_shipping_discounts,\n        created_at,\n        customer_selection_all_customers,\n        ends_at,\n        starts_at,\n        status,\n        title,\n        total_sales_amount,\n        total_sales_currency_code,\n        updated_at,\n        usage_limit,\n        source_relation\n    from \"postgres\".\"shopify_integration_tests_17_shopify\".\"stg_shopify__discount_code_app\"\n    \n),\n\ndiscounts_with_codes as (\n\n    select\n        discount_redeem_codes.code,\n        unified_discount_codes.*\n    from unified_discount_codes \n    left join discount_redeem_codes \n        on unified_discount_codes.discount_code_id = discount_redeem_codes.discount_id\n        and unified_discount_codes.source_relation = discount_redeem_codes.source_relation\n),\n\ndiscounts_with_applications as (\n\n    select\n        discounts_with_codes.*,\n        discount_applications.allocation_method,\n        discount_applications.description,\n        discount_applications.target_selection,\n        discount_applications.target_type,\n        discount_applications.type as application_type,\n        discount_applications.value,\n        discount_applications.value_type\n    from discounts_with_codes\n    left join discount_applications \n        on discounts_with_codes.code = discount_applications.code\n        and discounts_with_codes.source_relation = discount_applications.source_relation\n)\n\nselect *\nfrom discounts_with_applications\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_shopify__discount_code_enriched", "attached_node": "model.shopify.int_shopify__discount_code_enriched", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["code", "source_relation"], "model": "{{ get_where_subquery(ref('int_shopify__discount_code_enriched')) }}"}, "namespace": "dbt_utils"}}}, "sources": {"source.shopify_source.shopify.order": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order", "fqn": ["shopify_source", "shopify", "order"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_data", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "app_id": {"name": "app_id", "description": "The ID of the app that created the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_1": {"name": "billing_address_address_1", "description": "The street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_2": {"name": "billing_address_address_2", "description": "An optional additional field for the street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_city": {"name": "billing_address_city", "description": "The city, town, or village of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_company": {"name": "billing_address_company", "description": "The company of the person associated with the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country": {"name": "billing_address_country", "description": "The name of the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country_code": {"name": "billing_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_first_name": {"name": "billing_address_first_name", "description": "The first name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_last_name": {"name": "billing_address_last_name", "description": "The last name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_latitude": {"name": "billing_address_latitude", "description": "The latitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_longitude": {"name": "billing_address_longitude", "description": "The longitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_name": {"name": "billing_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_phone": {"name": "billing_address_phone", "description": "The phone number at the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province": {"name": "billing_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province_code": {"name": "billing_address_province_code", "description": "The two-letter abbreviation of the region of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_zip": {"name": "billing_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "browser_ip": {"name": "browser_ip", "description": "The IP address of the browser used by the customer when they placed the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_accepts_marketing": {"name": "buyer_accepts_marketing", "description": "Whether the customer consented to receive email updates from the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cancel_reason": {"name": "cancel_reason", "description": "The reason why the order was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cancelled_at": {"name": "cancelled_at", "description": "The date and time when the order was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cart_token": {"name": "cart_token", "description": "The ID of the cart that's associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "closed_at": {"name": "closed_at", "description": "The date and time when the order was closed (archived).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The autogenerated date and time when the order was created in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code for the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "The ID of the order's customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The customer's email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "financial_status": {"name": "financial_status", "description": "The status of payments associated with the order. Can only be set when the order is created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_status": {"name": "fulfillment_status", "description": "The order's status in terms of fulfilled line items.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The ID of the order, used for API purposes. This is different from the order_number property, which is the ID used by the shop owner and customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "landing_site_base_url": {"name": "landing_site_base_url", "description": "The URL for the page where the buyer landed when they entered the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the order was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "An optional note that a shop owner can attach to the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "number": {"name": "number", "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_number": {"name": "order_number", "description": "The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_at": {"name": "processed_at", "description": "The date and time when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "referring_site": {"name": "referring_site", "description": "The website where the customer clicked a link to the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_1": {"name": "shipping_address_address_1", "description": "The street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_2": {"name": "shipping_address_address_2", "description": "An optional additional field for the street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_city": {"name": "shipping_address_city", "description": "The city, town, or village of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_company": {"name": "shipping_address_company", "description": "The company of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country": {"name": "shipping_address_country", "description": "The name of the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_first_name": {"name": "shipping_address_first_name", "description": "The first name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_last_name": {"name": "shipping_address_last_name", "description": "The last name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_latitude": {"name": "shipping_address_latitude", "description": "The latitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_longitude": {"name": "shipping_address_longitude", "description": "The longitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_name": {"name": "shipping_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province": {"name": "shipping_address_province", "description": "The name of the region (province, state, prefecture, \u2026) of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province_code": {"name": "shipping_address_province_code", "description": "The two-letter abbreviation of the region of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_zip": {"name": "shipping_address_zip", "description": "The postal code (zip, postcode, Eircode, \u2026) of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_name": {"name": "source_name", "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_price": {"name": "subtotal_price", "description": "The price of the order in the shop currency after discounts but before shipping, taxes, and tips in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "taxes_included": {"name": "taxes_included", "description": "Whether taxes are included in the order subtotal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "test": {"name": "test", "description": "Whether this is a test order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "token": {"name": "token", "description": "A unique token for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discounts": {"name": "total_discounts", "description": "The total discounts applied to the price of the order in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of all line item prices in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price": {"name": "total_price", "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax": {"name": "total_tax", "description": "The sum of all the taxes applied to the order in th shop currency. Must be positive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_weight": {"name": "total_weight", "description": "The sum of all line item weights in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the order was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID of the user logged into Shopify POS who processed the order, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_token": {"name": "checkout_token", "description": "A unique value when referencing the checkout that's associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "confirmed": {"name": "confirmed", "description": "Whether inventory has been reserved for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_locale": {"name": "customer_locale", "description": "A two-letter or three-letter language code, optionally followed by a region modifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_id": {"name": "checkout_id", "description": "ID of the order's checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_status_url": {"name": "order_status_url", "description": "The URL pointing to the order status web page, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tip_received": {"name": "total_tip_received", "description": "The sum of all the tips in the order in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "The ID for the device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "presentment_currency": {"name": "presentment_currency", "description": "The presentment currency that was used to display prices to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_shipping_price_set": {"name": "total_shipping_price_set", "description": "The total shipping price of the order, excluding discounts and returns, in shop and presentment currencies. If taxes_included is set to true, then total_shipping_price_set includes taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "client_details_user_agent": {"name": "client_details_user_agent", "description": "Details of the browsing client, including software and operating versions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax_set": {"name": "total_tax_set", "description": "The total tax applied to the order in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discounts_set": {"name": "total_discounts_set", "description": "The total discounts applied to the price of the order in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_line_items_price_set": {"name": "total_line_items_price_set", "description": "The total of all line item prices in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price_set": {"name": "total_price_set", "description": "The total price of the order in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_confirmed": {"name": "is_confirmed", "description": "Whether the order is confirmed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_identifier": {"name": "source_identifier", "description": "The ID of the order placed on the originating platform. This value doesn't correspond to the Shopify ID that's generated from a completed draft.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_data\"", "created_at": 1747951351.758655, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.customer": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "customer", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.customer", "fqn": ["shopify_source", "shopify", "customer"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_customer_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a customer in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "accepts_marketing": {"name": "accepts_marketing", "description": "Whether the customer has consented to receive marketing material via email. Deprecated and will be coalesced with `email_marketing_consent_state`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the customer was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "default_address_id": {"name": "default_address_id", "description": "The default address for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "first_name": {"name": "first_name", "description": "The customer's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "A unique identifier for the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "last_name": {"name": "last_name", "description": "The customer's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "orders_count": {"name": "orders_count", "description": "The number of orders associated with this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers returns an error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "state": {"name": "state", "description": "The state of the customer's account with a shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_exempt": {"name": "tax_exempt", "description": "Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_spent": {"name": "total_spent", "description": "The total amount of money that the customer has spent across their order history.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time when the customer information was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "verified_email": {"name": "verified_email", "description": "Whether the customer has verified their email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email_marketing_consent_state": {"name": "email_marketing_consent_state", "description": "The current email marketing state for the customer. New version of `accepts_marketing` field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email_marketing_consent_opt_in_level": {"name": "email_marketing_consent_opt_in_level", "description": "The marketing subscription opt-in level, as described in the M3AAWG Sender Best Common Practices, that the customer gave when they consented to receive marketing material by email. New version of `marketing_opt_in_level` field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email_marketing_consent_consent_updated_at": {"name": "email_marketing_consent_consent_updated_at", "description": "The date and time when the customer consented to receive marketing material by email. If no date is provided, then the date and time when the consent information was sent is used. New version of `accepts_marketing_updated_at` field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "accepts_marketing_updated_at": {"name": "accepts_marketing_updated_at", "description": "Deprecated. The package will coalesce with `email_marketing_consent_consent_updated_at`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "marketing_opt_in_level": {"name": "marketing_opt_in_level", "description": "Deprecated. The package will coalesce with `email_marketing_consent_opt_in_level`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "A note about the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency that the customer used when they paid for their last order. Defaults to the shop currency. Returns the shop currency for test orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_customer_data\"", "created_at": 1747951351.7609909, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.order_line": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order_line", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order_line", "fqn": ["shopify_source", "shopify", "order_line"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a line item for an order in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillable_quantity": {"name": "fulfillable_quantity", "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_status": {"name": "fulfillment_status", "description": "How far along an order is in terms line items fulfilled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gift_card": {"name": "gift_card", "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "grams": {"name": "grams", "description": "The weight of the item in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The name of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the related order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The price of the item before discounts have been applied in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The number of items that were purchased.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "requires_shipping": {"name": "requires_shipping", "description": "Whether the item requires shipping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sku": {"name": "sku", "description": "The item's SKU (stock keeping unit).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "taxable": {"name": "taxable", "description": "Whether the item was taxable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The title of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discount": {"name": "total_discount", "description": "The total amount of the discount allocated to the line item in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_id": {"name": "variant_id", "description": "The ID of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vendor": {"name": "vendor", "description": "The name of the item's supplier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index of the order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pre_tax_price": {"name": "pre_tax_price", "description": "The pre tax price of the line item in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pre_tax_price_set": {"name": "pre_tax_price_set", "description": "The pre tax price of the line item in shop currency and presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_set": {"name": "price_set", "description": "The price of the line item in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_code": {"name": "tax_code", "description": "Tax code applied to the line item. As multiple taxes can apply to a line item, we recommend referring to `stg_shopify__tax_line`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discount_set": {"name": "total_discount_set", "description": "The total amount allocated to the line item in the presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_title": {"name": "variant_title", "description": "The title of the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "variant_inventory_management": {"name": "variant_inventory_management", "description": "The fulfillment service that tracks the number of items in stock for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "properties": {"name": "properties", "description": "Line item properties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_line_data\"", "created_at": 1747951351.761228, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.order_line_refund": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order_line_refund", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order_line_refund", "fqn": ["shopify_source", "shopify", "order_line_refund"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_line_refund_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a line item refund in Shopify.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The unique identifier of the line item in the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "TThe unique identifier of the location where the items will be restockedBD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_id": {"name": "order_line_id", "description": "The ID of the related line item in the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The quantity of the associated line item that was returned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_id": {"name": "refund_id", "description": "The ID of the related refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "restock_type": {"name": "restock_type", "description": "How this refund line item affects inventory levels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal": {"name": "subtotal", "description": "Subtotal amount of the order line refund in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax": {"name": "total_tax", "description": "The total tax applied to the refund in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_set": {"name": "subtotal_set", "description": "The subtotal of the refund line item in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax_set": {"name": "total_tax_set", "description": "The total tax of the line item in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_line_refund_data\"", "created_at": 1747951351.761476, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.product": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "product", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.product", "fqn": ["shopify_source", "shopify", "product"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_product_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a product in Shopify.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Whether the record has been deleted in the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "handle": {"name": "handle", "description": "A unique human-friendly string for the product. Automatically generated from the product's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "An unsigned 64-bit integer that's used as a unique identifier for the product. Each id is unique across the Shopify system. No two products will have the same id, even if they're from different shops.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_type": {"name": "product_type", "description": "A categorization for the product used for filtering and searching products.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_at": {"name": "published_at", "description": "The date and time (ISO 8601 format) when the product was published. Can be set to null to unpublish the product from the Online Store channel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_scope": {"name": "published_scope", "description": "Whether the product is published to the Point of Sale channel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time when the product was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "vendor": {"name": "vendor", "description": "The name of the product's vendor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the product. Valid values: - active: The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active. - archived: The product is no longer being sold and isn't available to customers on sales channels and apps. - draft: The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_data\"", "created_at": 1747951351.761606, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.product_variant": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "product_variant", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.product_variant", "fqn": ["shopify_source", "shopify", "product_variant"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_product_variant_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a product variant in Shopify", "columns": {"barcode": {"name": "barcode", "description": "The barcode, UPC, or ISBN number for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "compare_at_price": {"name": "compare_at_price", "description": "The original price of the item before an adjustment or a sale in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the product variant was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_service": {"name": "fulfillment_service", "description": "(DEPRECATED 2025-01-06) The fulfillment service associated with the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "grams": {"name": "grams", "description": "(DEPRECATED 2025-01-06) The weight of the product variant in grams.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The unique numeric identifier for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_id": {"name": "inventory_item_id", "description": "The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_management": {"name": "inventory_management", "description": "(DEPRECATED 2025-01-06) The fulfillment service that tracks the number of items in stock for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_policy": {"name": "inventory_policy", "description": "Whether customers are allowed to place an order for the product variant when it's out of stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_quantity": {"name": "inventory_quantity", "description": "An aggregate of inventory across all locations. To adjust inventory at a specific location, use the InventoryLevel resource.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "old_inventory_quantity": {"name": "old_inventory_quantity", "description": "(DEPRECATED 2025-01-06) Use the InventoryLevel resource instead.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "option_1": {"name": "option_1", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "option_2": {"name": "option_2", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "option_3": {"name": "option_3", "description": "(DEPRECATED 2025-01-06) The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "position": {"name": "position", "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The price of the product variant in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "The unique numeric identifier for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "requires_shipping": {"name": "requires_shipping", "description": "(DEPRECATED 2025-01-06) Use the `requires_shipping` property on the InventoryItem resource instead.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sku": {"name": "sku", "description": "A unique identifier for the product variant in the shop. Required in order to connect to a FulfillmentService.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "taxable": {"name": "taxable", "description": "Whether a tax is charged when the product variant is sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_code": {"name": "tax_code", "description": "This parameter applies only to the stores that have the Avalara AvaTax app installed. Specifies the Avalara tax code for the product variant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight": {"name": "weight", "description": "(DEPRECATED 2025-01-06) The weight of the product variant in the unit system specified with weight_unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight_unit": {"name": "weight_unit", "description": "(DEPRECATED 2025-01-06) The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "available_for_sale": {"name": "available_for_sale", "description": "Indicates whether the product variant is available for sale.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "display_name": {"name": "display_name", "description": "The display name of the variant, based on the product's title and variant's title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "legacy_resource_id": {"name": "legacy_resource_id", "description": "The ID of the corresponding resource in the REST Admin API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "metafield": {"name": "metafield", "description": "A custom field, including its namespace and key, that's associated with a Shopify resource for the purposes of adding and storing additional information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "requires_components": {"name": "requires_components", "description": "Indicates whether a product variant requires components.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sellable_online_quantity": {"name": "sellable_online_quantity", "description": "The total sellable quantity of the variant for online channels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_variant_data\"", "created_at": 1747951351.761899, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.transaction": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "transaction", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.transaction", "fqn": ["shopify_source", "shopify", "transaction"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_transaction_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a transaction in Shopify.", "columns": {"id": {"name": "id", "description": "The ID for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID for the order that the transaction is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_id": {"name": "refund_id", "description": "The ID associated with a refund in the refund table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount of money included in the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "authorization": {"name": "authorization", "description": "The authorization code associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the transaction was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_at": {"name": "processed_at", "description": "The date and time when a transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "The ID for the device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gateway": {"name": "gateway", "description": "The name of the gateway the transaction was issued through.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_name": {"name": "source_name", "description": "The origin of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "message": {"name": "message", "description": "A string generated by the payment provider with additional information about why the transaction succeeded or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency used for the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "parent_id": {"name": "parent_id", "description": "The ID of an associated transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_avs_result_code": {"name": "payment_avs_result_code", "description": "The response code from the address verification system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_credit_card_bin": {"name": "payment_credit_card_bin", "description": "The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_cvv_result_code": {"name": "payment_cvv_result_code", "description": "The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_credit_card_number": {"name": "payment_credit_card_number", "description": "The customer's credit card number, with most of the leading digits redacted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_credit_card_company": {"name": "payment_credit_card_company", "description": "The name of the company that issued the customer's credit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "kind": {"name": "kind", "description": "The transaction's type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "receipt": {"name": "receipt", "description": "A transaction receipt attached to the transaction by the gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_id": {"name": "currency_exchange_id", "description": "The ID of the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_adjustment": {"name": "currency_exchange_adjustment", "description": "The difference between the amounts on the associated transaction and the parent transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_original_amount": {"name": "currency_exchange_original_amount", "description": "The amount of the parent transaction in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_final_amount": {"name": "currency_exchange_final_amount", "description": "The amount of the associated transaction in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency_exchange_currency": {"name": "currency_exchange_currency", "description": "The shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "error_code": {"name": "error_code", "description": "A standardized error code, independent of the payment provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "test": {"name": "test", "description": "Whether the transaction is a test transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "authorization_expires_at": {"name": "authorization_expires_at", "description": "The date and time (ISO 8601 format) when the Shopify Payments authorization expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_transaction_data\"", "created_at": 1747951351.763036, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.refund": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "refund", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.refund", "fqn": ["shopify_source", "shopify", "refund"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_refund_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a refund within Shopify.", "columns": {"id": {"name": "id", "description": "The unique numeric identifier for the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the refund was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_at": {"name": "processed_at", "description": "Timestamp of the date when the refund was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "User generated note attached to the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "restock": {"name": "restock", "description": "Boolean indicating if the refund is a result of a restock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "Reference to the user id which generated the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_duties_set": {"name": "total_duties_set", "description": "Record representing total duties set for the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "Reference to the order which the refund is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_refund_data\"", "created_at": 1747951351.763227, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.order_adjustment": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order_adjustment", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order_adjustment", "fqn": ["shopify_source", "shopify", "order_adjustment"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_adjustment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents and adjustment to and order within Shopify.", "columns": {"id": {"name": "id", "description": "The unique numeric identifier for the order adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "Reference to the order which the adjustment is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "refund_id": {"name": "refund_id", "description": "Reference to the refund which the adjustment is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "Amount of the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_amount": {"name": "tax_amount", "description": "Tax amount applied to the order adjustment in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "kind": {"name": "kind", "description": "The kind of order adjustment (eg. refund, restock, etc.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "reason": {"name": "reason", "description": "The reason for the order adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set": {"name": "amount_set", "description": "Amount set towards the order adjustment in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_amount_set": {"name": "tax_amount_set", "description": "Tax amount set towards the order adjustment in shop and presentment currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_adjustment_data\"", "created_at": 1747951351.763386, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.abandoned_checkout": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "abandoned_checkout", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.abandoned_checkout", "fqn": ["shopify_source", "shopify", "abandoned_checkout"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_abandoned_checkout_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A checkout is considered abandoned after the customer has added contact information, but before the customer has completed their purchase.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "abandoned_checkout_url": {"name": "abandoned_checkout_url", "description": "The recovery URL that's sent to a customer so they can recover their checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_1": {"name": "billing_address_address_1", "description": "The street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_address_2": {"name": "billing_address_address_2", "description": "An optional additional field for the street address of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_city": {"name": "billing_address_city", "description": "The city of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_company": {"name": "billing_address_company", "description": "The company of the person associated with the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country": {"name": "billing_address_country", "description": "The name of the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_country_code": {"name": "billing_address_country_code", "description": "The two-letter code (ISO 3166-1 alpha-2 format) for the country of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_first_name": {"name": "billing_address_first_name", "description": "The first name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_last_name": {"name": "billing_address_last_name", "description": "The last name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_latitude": {"name": "billing_address_latitude", "description": "The latitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_longitude": {"name": "billing_address_longitude", "description": "The longitude of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_name": {"name": "billing_address_name", "description": "The full name of the person associated with the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_phone": {"name": "billing_address_phone", "description": "The phone number at the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province": {"name": "billing_address_province", "description": "The name of the state or province of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_province_code": {"name": "billing_address_province_code", "description": "The two-letter abbreviation of the state or province of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "billing_address_zip": {"name": "billing_address_zip", "description": "The zip or postal code of the billing address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "buyer_accepts_marketing": {"name": "buyer_accepts_marketing", "description": "Whether the customer would like to receive email updates from the shop. This is set by the 'I want to receive occasional emails about new products, promotions and other news' checkbox during checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cart_token": {"name": "cart_token", "description": "The ID for the cart that's attached to the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "closed_at": {"name": "closed_at", "description": "The date and time (ISO 8601 format) when the checkout was closed. If the checkout was not closed, then this value is null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the checkout was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) of the shop's default currency at the time of checkout. For the currency that the customer used at checkout, see `presentment_currency`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "ID of the customer with the abandoned checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_locale": {"name": "customer_locale", "description": "The two or three-letter language code, optionally followed by a region modifier. Example values - en, en-CA.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "The ID of the Shopify POS device that created the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The customer's email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gateway": {"name": "gateway", "description": "The payment gateway used by the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The ID for the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "landing_site_base_url": {"name": "landing_site_base_url", "description": "The URL for the page where the customer entered the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the physical location where the checkout was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Checkout order number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "note": {"name": "note", "description": "The text of an optional note that a shop owner can attach to the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The customer's phone number for receiving SMS notifications.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "presentment_currency": {"name": "presentment_currency", "description": "The three-letter code (ISO 4217 format) of the currency that the customer used at checkout. For the shop's default currency, see `currency`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "referring_site": {"name": "referring_site", "description": "The website that referred the customer to the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_1": {"name": "shipping_address_address_1", "description": "The street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_address_2": {"name": "shipping_address_address_2", "description": "An optional additional field for the street address of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_city": {"name": "shipping_address_city", "description": "The city of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_company": {"name": "shipping_address_company", "description": "The company of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country": {"name": "shipping_address_country", "description": "The name of the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_country_code": {"name": "shipping_address_country_code", "description": "The two-letter code (ISO 3166-1 alpha-2 format) for the country of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_first_name": {"name": "shipping_address_first_name", "description": "The first name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_last_name": {"name": "shipping_address_last_name", "description": "The last name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_latitude": {"name": "shipping_address_latitude", "description": "The latitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_longitude": {"name": "shipping_address_longitude", "description": "The longitude of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_name": {"name": "shipping_address_name", "description": "The full name of the person associated with the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_phone": {"name": "shipping_address_phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province": {"name": "shipping_address_province", "description": "The name of the state or province of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_province_code": {"name": "shipping_address_province_code", "description": "The two-letter abbreviation of the state or province of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipping_address_zip": {"name": "shipping_address_zip", "description": "The zip or postal code of the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source_name": {"name": "source_name", "description": "Where the checkout originated. Valid values include `web`, `pos`, `iphone`, `android`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subtotal_price": {"name": "subtotal_price", "description": "The price of the checkout in _presentment_ (customer) currency before shipping and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "taxes_included": {"name": "taxes_included", "description": "Boolean representing whether taxes are included in the price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "token": {"name": "token", "description": "A unique ID for a checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_discounts": {"name": "total_discounts", "description": "The total amount of discounts to be applied in presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_duties": {"name": "total_duties", "description": "The total duties of the checkout in presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_line_items_price": {"name": "total_line_items_price", "description": "The sum of the prices of all line items in the checkout in _presentment_ (customer) currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_price": {"name": "total_price", "description": "The sum of line item prices, all discounts, shipping costs, and taxes for the checkout in _presentment_ (customer) currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_tax": {"name": "total_tax", "description": "The sum of all the taxes applied to the checkout in _presentment_ (customer) currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_weight": {"name": "total_weight", "description": "The sum of all the weights in grams of the line items in the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the checkout was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID of the user who created the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_abandoned_checkout_data\"", "created_at": 1747951351.7636669, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.collection_product": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "collection_product", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.collection_product", "fqn": ["shopify_source", "shopify", "collection_product"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_collection_product_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table relating products to the collections they belong to. Use this instead of the deprecated `COLLECT` table.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "collection_id": {"name": "collection_id", "description": "ID referencing the `collection` the product belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "ID referencing the `product`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_collection_product_data\"", "created_at": 1747951351.763809, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.collection": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "collection", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.collection", "fqn": ["shopify_source", "shopify", "collection"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_collection_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A collection is a grouping of products that merchants can create to make their stores easier to browse. Merchants can create collections by selecting products individually or by defining rules that automatically determine whether products are included (aka a \"smart collection\").\n", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "disjunctive": {"name": "disjunctive", "description": "Boolean representing whether the `rules` or disjuctive (logical `OR`) or not. True = disjuctive, false = conjunctive (logical `AND`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "handle": {"name": "handle", "description": "A unique, human-readable string for the collection automatically generated from its title. This is used in themes by the Liquid templating language to refer to the collection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The ID for the collection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_at": {"name": "published_at", "description": "The time and date (ISO 8601 format) when the collection was made visible. Returns null for a hidden collection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "published_scope": {"name": "published_scope", "description": "Whether the collection is published to the Point of Sale channel. Valid values `web` (the collection is published to the Online Store channel but not published to the Point of Sale channel) and `global` (the collection is published to both the Online Store channel and the Point of Sale channel).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rules": {"name": "rules", "description": "An array of rules that define what products go into the smart collection. Each rule (`column` -- `relation` --> `condition`) has these properties: - `column`: the property of a product being used to populate the smart collection. Ex: 'tag', 'type', 'vendor', 'variant_price', etc. - `relation`: The comparitive relationship between the column choice, and the condition ('equals', 'contains', 'greater_than', etc.) - condition: Select products for a smart collection using a condition. Values are either strings or numbers, depending on the relation value. See the [Shopify docs](https://shopify.dev/api/admin-rest/2022-10/resources/smartcollection#resource-object) for more.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sort_order": {"name": "sort_order", "description": "The order of the products in the collection. Valid values inclide - `alpha-asc`: The products are sorted alphabetically from A to Z. - `alpha-des`: The products are sorted alphabetically from Z to A. - `best-selling`: The products are sorted by number of sales. - `created`: The products are sorted by the date they were created, from oldest to newest. - `created-desc`: The products are sorted by the date they were created, from newest to oldest. - `manual`: The products are manually sorted by the shop owner. - `price-asc`: The products are sorted by price from lowest to highest. - `price-desc`: The products are sorted by price from highest to lowest.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the collection", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the collection was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_collection_data\"", "created_at": 1747951351.764724, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.customer_tag": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "customer_tag", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.customer_tag", "fqn": ["shopify_source", "shopify", "customer_tag"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_customer_tag_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tags that the shop owner has attached to the customer. A customer can have up to 250 tags.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index (starting from 1) represnting when the tag was placed on the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "ID of the customer being tagged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the tag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_customer_tag_data\"", "created_at": 1747951351.765024, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.fulfillment": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "fulfillment", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.fulfillment", "fqn": ["shopify_source", "shopify", "fulfillment"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_fulfillment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A fulfillment order represents a group of one or more items in an order that will be fulfilled from the same location.  A fulfillment represents work that is completed as part of a fulfillment order and can include one or more items.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the fulfillment was created. The API returns this value in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The ID for the fulfillment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The unique identifier of the location that the fulfillment was processed at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The uniquely identifying fulfillment name, consisting of two parts separated by a .. The first part represents the order name and the second part represents the fulfillment number.  The fulfillment number automatically increments depending on how many fulfillments are in an order (e.g. #1001.1, #1001.2).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The unique numeric identifier for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "receipt_authorization": {"name": "receipt_authorization", "description": "The authorization code from the receipt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "service": {"name": "service", "description": "The fulfillment service associated with the fulfillment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shipment_status": {"name": "shipment_status", "description": "The current shipment status of the fulfillment. Valid values include: - label_printed: A label for the shipment was purchased and printed. - label_purchased: A label for the shipment was purchased, but not printed. - attempted_delivery: Delivery of the shipment was attempted, but unable to be completed. - ready_for_pickup: The shipment is ready for pickup at a shipping depot. - confirmed: The carrier is aware of the shipment, but hasn't received it yet. - in_transit: The shipment is being transported between shipping facilities on the way to its destination. - out_for_delivery: The shipment is being delivered to its final destination. - delivered: The shipment was succesfully delivered. - failure: Something went wrong when pulling tracking information for the shipment, such as the tracking number was invalid or the shipment was canceled.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the fulfillment. Valid values include: - pending: Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to 'open' or 'success'. - open: The fulfillment has been acknowledged by the service and is in processing. - success: The fulfillment was successful. - cancelled: The fulfillment was cancelled. - error: There was an error with the fulfillment request. - failure: The fulfillment request failed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_company": {"name": "tracking_company", "description": "The name of the tracking company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_number": {"name": "tracking_number", "description": "Primary tracking number for the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_numbers": {"name": "tracking_numbers", "description": "A list of tracking numbers, provided by the shipping company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracking_urls": {"name": "tracking_urls", "description": "The URLs of tracking pages for the fulfillment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the fulfillment was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_fulfillment_data\"", "created_at": 1747951351.765198, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.inventory_item": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "inventory_item", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.inventory_item", "fqn": ["shopify_source", "shopify", "inventory_item"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_inventory_item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An inventory item represents a physical good. It holds essential information about the physical good, including its SKU and whether its inventory is tracked. There is a 1:1 relationship between a product variant and an inventory item.\n", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code_of_origin": {"name": "country_code_of_origin", "description": "The country code (ISO 3166-1 alpha-2) of where the item came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the inventory item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The ID of the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province_code_of_origin": {"name": "province_code_of_origin", "description": "The province code (ISO 3166-2 alpha-2) of where the item came from. The province code is only used if the shipping provider for the inventory item is Canada Post.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "requires_shipping": {"name": "requires_shipping", "description": "Boolean representing whether a customer needs to provide a shipping address when placing an order containing the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sku": {"name": "sku", "description": "The unique SKU (stock keeping unit) of the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracked": {"name": "tracked", "description": "Boolean representing whether inventory levels are tracked for the item. If true, then the inventory quantity changes are tracked by Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the inventory item was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "duplicate_sku_count": {"name": "duplicate_sku_count", "description": "The number of inventory items that share the same SKU with this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "harmonized_system_code": {"name": "harmonized_system_code", "description": "The harmonized system code of the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_history_url": {"name": "inventory_history_url", "description": "The URL that points to the inventory history for the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "legacy_resource_id": {"name": "legacy_resource_id", "description": "The ID of the corresponding resource in the REST Admin API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_id": {"name": "measurement_id", "description": "The unique identifier for the inventory item's measurement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_weight_value": {"name": "measurement_weight_value", "description": "The weight value of the inventory item's measurement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "measurement_weight_unit": {"name": "measurement_weight_unit", "description": "The unit of measurement for the inventory item's weight.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracked_editable_locked": {"name": "tracked_editable_locked", "description": "Indicates whether the 'tracked' field for the inventory item is locked from editing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tracked_editable_reason": {"name": "tracked_editable_reason", "description": "Provides the reason why the 'tracked' field for the inventory item is locked from editing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unit_cost_amount": {"name": "unit_cost_amount", "description": "Decimal money amount of the unit cost associated with the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unit_cost_currency_code": {"name": "unit_cost_currency_code", "description": "Currency of the unit cost associated with the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_inventory_item_data\"", "created_at": 1747951351.7654111, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.inventory_level": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "inventory_level", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.inventory_level", "fqn": ["shopify_source", "shopify", "inventory_level"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_inventory_level_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An inventory level represents the quantities of an inventory item for a location.\nEach inventory level belongs to one inventory item and has one location. For every location where an inventory item can be stocked, there's an inventory level that represents  the inventory item's quantities relating to that location.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "available": {"name": "available", "description": "(DEPRECATED 2025-01-06) The available quantity of an inventory item at the inventory level's associated location. Returns null if the inventory item is not tracked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_id": {"name": "inventory_item_id", "description": "The ID of the inventory item associated with the inventory level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "The ID of the location that the inventory level belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the inventory level was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "A globally unique identifier for the inventory level.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "can_deactivate": {"name": "can_deactivate", "description": "Indicates whether the inventory item can be deactivated at the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the inventory level was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "deactivation_alert": {"name": "deactivation_alert", "description": "Provides an alert message when the inventory item is deactivated at the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_inventory_level_data\"", "created_at": 1747951351.7655199, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.inventory_quantity": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "inventory_quantity", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.inventory_quantity", "fqn": ["shopify_source", "shopify", "inventory_quantity"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_inventory_quantity_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The total quantity of the inventory item available at all locations.", "columns": {"id": {"name": "id", "description": "The unique identifier for the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_item_id": {"name": "inventory_item_id", "description": "The ID of the inventory item associated with this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "inventory_level_id": {"name": "inventory_level_id", "description": "The ID of the inventory level where this item is stored.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The name of the inventory state associated with the record. [Link to list of expected values](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps#inventory-states).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The available quantity of the inventory item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The timestamp of the last update to the inventory record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_inventory_quantity_data\"", "created_at": 1747951351.765933, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.location": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "location", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.location", "fqn": ["shopify_source", "shopify", "location"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_location_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A location represents a geographical location where your stores, pop-up stores, headquarters, and warehouses exist.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "active": {"name": "active", "description": "Boolean representing whether the location is active. If true, then the location can be used to sell products, stock inventory, and fulfill orders.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_1": {"name": "address_1", "description": "The location's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_2": {"name": "address_2", "description": "The optional second line of the location's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "city": {"name": "city", "description": "The city the location is in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "The country the location is in (two-letter code).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "The two-letter code (ISO 3166-1 alpha-2 format) corresponding to country the location is in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_name": {"name": "country_name", "description": "Full name of the location's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the location was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The ID of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "legacy": {"name": "legacy", "description": "Boolean representing whether this is a fulfillment service location. If true, then the location is a fulfillment service location.  If false, then the location was created by the merchant and isn't tied to a fulfillment service.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "localized_country_name": {"name": "localized_country_name", "description": "The localized name of the location's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "localized_province_name": {"name": "localized_province_name", "description": "The localized name of the location's region. Typically a province, state, or district.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The name of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The phone number of the location. This value can contain special characters, such as - or +.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province": {"name": "province", "description": "The province, state, or district of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province_code": {"name": "province_code", "description": "The province, state, or district code (ISO 3166-2 alpha-2 format) of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the location was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "zip": {"name": "zip", "description": "The zip or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_location_data\"", "created_at": 1747951351.766603, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.metafield": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "metafield", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.metafield", "fqn": ["shopify_source", "shopify", "metafield"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_metafield_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Metafields are a flexible way to attach additional information to a Shopify resource (e.g. Product, Collection, etc.). Some examples of data stored using metafields include specifications, size charts,  downloadable documents, release dates, images, or part numbers. Metafields are identified by an owner resource, a namespace, and a key and they store a value along with type information for that context.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the metafield was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "A description of the information that the metafield contains.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The unique ID of the metafield.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "key": {"name": "key", "description": "The key of the metafield. Keys can be up to 64 characters long and can contain alphanumeric characters, hyphens, underscores, and periods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "namespace": {"name": "namespace", "description": "A container for a group of metafields. Grouping metafields within a namespace prevents your metafields from conflicting with other metafields with the same key name. Must have between 3-255 characters.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_id": {"name": "owner_id", "description": "The unique ID of the resource that the metafield is attached to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "owner_resource": {"name": "owner_resource", "description": "The type of resource (table) that the metafield is attached to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "The type of data that the metafield stores in the `value` field. Refer to the [list](https://shopify.dev/apps/metafields/types) of supported types. Use this instead of `value_type`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the metafield was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "The data to store in the metafield. The value is always stored as a string, regardless of the metafield's type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_type": {"name": "value_type", "description": "DEPRECATED as of [June 2022](https://fivetran.com/docs/applications/shopify/changelog#june2022). Use `type` instead.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_metafield_data\"", "created_at": 1747951351.766724, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.order_note_attribute": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order_note_attribute", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order_note_attribute", "fqn": ["shopify_source", "shopify", "order_note_attribute"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_note_attribute_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing custom attributes placed on orders.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "Name of the attribute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "ID referencing the order the note attribute belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the attribute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_note_attribute_data\"", "created_at": 1747951351.767274, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.order_shipping_line": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order_shipping_line", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order_shipping_line", "fqn": ["shopify_source", "shopify", "order_shipping_line"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_shipping_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents the shipping details that the customer chose for their order.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "carrier_identifier": {"name": "carrier_identifier", "description": "A reference to the carrier service that provided the rate. Present when the rate was computed by a third-party carrier service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "A reference to the shipping method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_category": {"name": "delivery_category", "description": "The general classification of the delivery method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discounted_price": {"name": "discounted_price", "description": "The pre-tax shipping price with discounts applied in the shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discounted_price_set": {"name": "discounted_price_set", "description": "The pre-tax shipping price with discounts applied (JSON) in presentment and shop currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "A globally-unique identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "ID of the associated order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Returns the price of the shipping line in shop currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_set": {"name": "price_set", "description": "Returns the price of the shipping line (JSON) in presentment and shop currencies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "requested_fulfillment_service_id": {"name": "requested_fulfillment_service_id", "description": "The fulfillment service requested for the shipping method. Present if the shipping method requires processing by a third party fulfillment service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "Returns the rate source for the shipping line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "Returns the title of the shipping line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_shipping_line_data\"", "created_at": 1747951351.7675571, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.order_shipping_tax_line": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order_shipping_tax_line", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order_shipping_tax_line", "fqn": ["shopify_source", "shopify", "order_shipping_tax_line"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_shipping_tax_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents taxes associated with order shipping lines.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index (from 1) representing the order of shipping lines per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_shipping_line_id": {"name": "order_shipping_line_id", "description": "ID of the order shipping line this recod is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The amount of tax, in shop currency, after discounts and before returns.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_set": {"name": "price_set", "description": "The amount of tax, in shop and presentment currencies, after discounts and before returns (JSON).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rate": {"name": "rate", "description": "The proportion of the line item price that the tax represents as a decimal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_shipping_tax_line_data\"", "created_at": 1747951351.767673, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.order_tag": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order_tag", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order_tag", "fqn": ["shopify_source", "shopify", "order_tag"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_tag_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tags that the shop owner has attached to the order.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index (starting from 1) represnting when the tag was placed on the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "ID of the order being tagged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the tag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_tag_data\"", "created_at": 1747951351.767766, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.order_url_tag": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order_url_tag", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order_url_tag", "fqn": ["shopify_source", "shopify", "order_url_tag"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_url_tag_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Key-value tags that the shop owner has attached to the order url.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "key": {"name": "key", "description": "Key of the tag pair.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "ID of the order url being tagged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the tag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_url_tag_data\"", "created_at": 1747951351.767861, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.media": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "media", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.media", "fqn": ["shopify_source", "shopify", "media"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_media_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing media metadata, including status and timestamps.", "columns": {"id": {"name": "id", "description": "The unique identifier for the media associated with a product image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the product image, indicating its availability or processing state.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time when the media was created. The API returns this value in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time when the media was last modified. The API returns this value in ISO 8601 format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_media_data\"", "created_at": 1747951351.7679548, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.media_image": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "media_image", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.media_image", "fqn": ["shopify_source", "shopify", "media_image"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_media_image_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing image-specific properties for media assets.", "columns": {"media_id": {"name": "media_id", "description": "The unique identifier for the media associated with the product image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_id": {"name": "image_id", "description": "Unique numeric identifier of the product image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_alt_text": {"name": "image_alt_text", "description": "A word or phrase to share the nature or contents of an image.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_height": {"name": "image_height", "description": "Height dimension of the image which is determined on upload.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_width": {"name": "image_width", "description": "Width dimension of the image which is determined on upload.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "image_url": {"name": "image_url", "description": "The URL of the product image, hashed for privacy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_media_image_data\"", "created_at": 1747951351.768048, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.product_media": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "product_media", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.product_media", "fqn": ["shopify_source", "shopify", "product_media"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_product_media_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table mapping products to their associated media.", "columns": {"product_id": {"name": "product_id", "description": "The id of the product associated with the media.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "media_id": {"name": "media_id", "description": "The unique identifier for the media asset linked to the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_media_data\"", "created_at": 1747951351.768137, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.product_variant_media": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "product_variant_media", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.product_variant_media", "fqn": ["shopify_source", "shopify", "product_variant_media"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_product_variant_media_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table mapping product variants to their associated media.", "columns": {"product_variant_id": {"name": "product_variant_id", "description": "The id of the product variant associated with the media.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "media_id": {"name": "media_id", "description": "The unique identifier for the media asset linked to the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_variant_media_data\"", "created_at": 1747951351.768237, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.product_tag": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "product_tag", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.product_tag", "fqn": ["shopify_source", "shopify", "product_tag"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_product_tag_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tags that the shop owner has attached to the product.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index (starting from 1) represnting when the tag was placed on the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "ID of the product being tagged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "Value of the tag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_product_tag_data\"", "created_at": 1747951351.768325, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.shop": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "shop", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.shop", "fqn": ["shopify_source", "shopify", "shop"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_shop_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The Shop resource is a collection of general business and store management settings and information about the store.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_1": {"name": "address_1", "description": "The shop's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_2": {"name": "address_2", "description": "The optional second line of the shop's street address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_api_supported": {"name": "checkout_api_supported", "description": "Boolean representing whether the shop is capable of accepting payments directly through the Checkout API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "city": {"name": "city", "description": "The shop's city.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cookie_consent_level": {"name": "cookie_consent_level", "description": "The cookie consent level defined on the shop's online store.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "The shop's country. In most cases, this value matches the country_code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "The two-letter country code corresponding to the shop's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_name": {"name": "country_name", "description": "The shop's normalized country name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "county_taxes": {"name": "county_taxes", "description": "Boolean representing whether the shop is applying taxes on a per-county basis. Only applicable to shops based in the US. Either `true` or `null` (not false, according to Shopify API docs).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601) when the shop was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the shop's default currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_email": {"name": "customer_email", "description": "The contact email used for communication between the shop owner and the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "domain": {"name": "domain", "description": "The shop's domain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eligible_for_card_reader_giveaway": {"name": "eligible_for_card_reader_giveaway", "description": "Boolean representing whether the shop is eligible to receive a free credit card reader from Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "eligible_for_payments": {"name": "eligible_for_payments", "description": "Boolean representing whether the shop is eligible to use Shopify Payments.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "email": {"name": "email", "description": "The contact email used for communication between Shopify and the shop owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "enabled_presentment_currencies": {"name": "enabled_presentment_currencies", "description": "An array of of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify Admin.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "force_ssl": {"name": "force_ssl", "description": "DEPRECATED.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "google_apps_domain": {"name": "google_apps_domain", "description": "The GSuite URL for the store, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "google_apps_login_enabled": {"name": "google_apps_login_enabled", "description": "Boolean representing whether the GSuite login is enabled. Shops with this feature will be able to log in through the GSuite login page. Valid values are `true` and `null`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_discounts": {"name": "has_discounts", "description": "Boolean representing whether any active discounts exist for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_gift_cards": {"name": "has_gift_cards", "description": "Boolean representing whether any active gift cards exist for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "has_storefront": {"name": "has_storefront", "description": "Boolean representing whether this shop has an online store.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "iana_timezone": {"name": "iana_timezone", "description": "The name of the timezone assigned by the [IANA](https://www.iana.org/time-zones).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The ID for the shop. A 64-bit unsigned integer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latitude": {"name": "latitude", "description": "The latitude of the shop's location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "longitude": {"name": "longitude", "description": "The longitude of the shop's location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "money_format": {"name": "money_format", "description": "A string representing the way currency is formatted when the currency isn't specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "money_in_emails_format": {"name": "money_in_emails_format", "description": "A string representing the way currency is formatted in email notifications when the currency isn't specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "money_with_currency_format": {"name": "money_with_currency_format", "description": "A string representing the way currency is formatted when the currency is specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "money_with_currency_in_emails_format": {"name": "money_with_currency_in_emails_format", "description": "A string representing the way currency is formatted in email notifications when the currency is specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "multi_location_enabled": {"name": "multi_location_enabled", "description": "DEPRECATED and hard-coded to `true`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "myshopify_domain": {"name": "myshopify_domain", "description": "The shop's .myshopify.com domain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "name": {"name": "name", "description": "The name of the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "password_enabled": {"name": "password_enabled", "description": "Boolean representing whether the password protection page is enabled on the shop's online store.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The contact phone number for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "plan_display_name": {"name": "plan_display_name", "description": "The display name of the Shopify plan the shop is on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "plan_name": {"name": "plan_name", "description": "The name of the Shopify plan the shop is on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pre_launch_enabled": {"name": "pre_launch_enabled", "description": "Boolen representing whether the pre-launch page is enabled on the shop's online store.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "primary_locale": {"name": "primary_locale", "description": "The shop's primary locale, as configured in the language settings of the shop's theme.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "primary_location_id": {"name": "primary_location_id", "description": "DEPRECATED. Formerly used for the ID of the shipping origin location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province": {"name": "province", "description": "The shop's normalized province or state name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province_code": {"name": "province_code", "description": "The two- or three-letter code for the shop's province or state.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "requires_extra_payments_agreement": {"name": "requires_extra_payments_agreement", "description": "Boolean representing whether the shop requires an extra Shopify Payments agreement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "setup_required": {"name": "setup_required", "description": "Boolean representing whether the shop has any outstanding setup steps.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shop_owner": {"name": "shop_owner", "description": "The username of the shop owner.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "The handle of the partner account that referred the merchant to Shopify, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "tax_shipping": {"name": "tax_shipping", "description": "Boolean representing whether taxes are charged for shipping. Valid values are true or false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "taxes_included": {"name": "taxes_included", "description": "Boolean representing whether applicable taxes are included in product prices. Valid values are true or null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "timezone": {"name": "timezone", "description": "The name of the timezone the shop is in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601) when the shop was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weight_unit": {"name": "weight_unit", "description": "The default unit of weight measurement for the shop.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "zip": {"name": "zip", "description": "The shop's zip or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_shop_data\"", "created_at": 1747951351.774274, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.tender_transaction": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "tender_transaction", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.tender_transaction", "fqn": ["shopify_source", "shopify", "tender_transaction"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_tender_transaction_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each tender transaction represents money passing between the merchant and a customer. A tender transaction with a positive amount  represents a transaction where the customer paid money to the merchant. A negative amount represents a transaction where the  merchant refunded money back to the customer. Tender transactions represent transactions that modify the shop's balance.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount of the tender transaction in the shop's currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "currency": {"name": "currency", "description": "The three-letter code (ISO 4217 format) for the currency used for the tender transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The ID of the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the order that the tender transaction belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "payment_method": {"name": "payment_method", "description": "Information about the payment method used for this transaction. Valid values include: - credit_card - cash - android_pay - apple_pay - google_pay - samsung_pay - shopify_pay - amazon - klarna - paypal - unknown - other\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "processed_at": {"name": "processed_at", "description": "The date and time (ISO 8601 format) when the tender transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "remote_reference": {"name": "remote_reference", "description": "The remote (gateway) reference associated with the tender.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "test": {"name": "test", "description": "Whether the tender transaction is a test transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "user_id": {"name": "user_id", "description": "The ID of the user logged into the Shopify POS device that processed the tender transaction, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_tender_transaction_data\"", "created_at": 1747951351.7744389, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.abandoned_checkout_discount_code": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "abandoned_checkout_discount_code", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.abandoned_checkout_discount_code", "fqn": ["shopify_source", "shopify", "abandoned_checkout_discount_code"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_abandoned_checkout_discount_code_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Abandoned checkouts that applied a discount code.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount of the discount in presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_id": {"name": "checkout_id", "description": "ID of the checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "The discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "When the checkout discount application was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_id": {"name": "discount_id", "description": "ID of the discount. Deprecated, use `code` instead.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index (from 1) representing the application of the discount to the checkout. Use the latest (highest index)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "The type of discount. Valid values - percentage, shipping, fixed_amount. (default - fixed_amount)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "When the checkout's discount was last updated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_abandoned_checkout_discount_code_data\"", "created_at": 1747951351.774542, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.order_discount_code": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "order_discount_code", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.order_discount_code", "fqn": ["shopify_source", "shopify", "order_discount_code"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_order_discount_code_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Discount codes placed on orders.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The amount that's deducted from the order total.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "This property returns the discount code that was entered at checkout. Otherwise this property returns the title of the discount that was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "Associated order ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "The type of discount - `fixed_amount`, `percentage`, or `shipping`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Pairs with `order_id` to provide unique identifier for order discount code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_order_discount_code_data\"", "created_at": 1747951351.774634, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.abandoned_checkout_shipping_line": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "abandoned_checkout_shipping_line", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.abandoned_checkout_shipping_line", "fqn": ["shopify_source", "shopify", "abandoned_checkout_shipping_line"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_abandoned_checkout_shipping_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Shipping lines associated with abandoned checkouts.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "carrier_identifier": {"name": "carrier_identifier", "description": "A reference to the carrier service that provided the rate. Present when the rate was computed by a third-party carrier service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "checkout_id": {"name": "checkout_id", "description": "ID of the checkout that was abandoned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "A reference to the shipping method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_category": {"name": "delivery_category", "description": "The general classification of the delivery method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_expectation_range": {"name": "delivery_expectation_range", "description": "Expected delivery date range.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_expectation_range_max": {"name": "delivery_expectation_range_max", "description": "Latest expected delivery date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_expectation_range_min": {"name": "delivery_expectation_range_min", "description": "Earliest possible expected delivery date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "delivery_expectation_type": {"name": "delivery_expectation_type", "description": "Type of expected delivery.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discounted_price": {"name": "discounted_price", "description": "The pre-tax shipping price with discounts applied in _presentment_ (customer) currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "Unique ID of the abandoned checkout shipping line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "Index of the line amongst shipping lines for this checkout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "original_shop_price": {"name": "original_shop_price", "description": "The pre-tax shipping price without any discounts applied in _presentment_ (customer) currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "phone": {"name": "phone", "description": "The phone number at the shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The price of the shipping method in presentment currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "requested_fulfillment_service_id": {"name": "requested_fulfillment_service_id", "description": "The fulfillment service requested for the shipping method. Present if the shipping method requires processing by a third party fulfillment service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "source": {"name": "source", "description": "The channel where the checkout originated. Example value - shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The title of the shipping method. Example value - International Shipping.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_abandoned_checkout_shipping_line_data\"", "created_at": 1747951351.7747462, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.fulfillment_event": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "fulfillment_event", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.fulfillment_event", "fqn": ["shopify_source", "shopify", "fulfillment_event"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_fulfillment_event_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The FulfillmentEvent resource represents tracking events that belong to a fulfillment of one or more items in an order.  Fulfillment events are displayed on the order status page to update customers on the status of their shipment.\n", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean representing whether the record was soft-deleted in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "address_1": {"name": "address_1", "description": "The street address where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "city": {"name": "city", "description": "The city where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "country": {"name": "country", "description": "The country where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The date and time (ISO 8601 format) when the fulfillment event was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "estimated_delivery_at": {"name": "estimated_delivery_at", "description": "The estimated delivery date based on the fulfillment's tracking number, as long as it's provided by one of the following carriers: USPS, FedEx, UPS, or Canada Post (Canada only).  Value is `null` if no tracking number is available or if the tracking number is from an unsupported carrier. This property is available only when carrier calculated rates are in use.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "fulfillment_id": {"name": "fulfillment_id", "description": "An ID for the fulfillment that's associated with the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "happened_at": {"name": "happened_at", "description": "The date and time (ISO 8601 format) when the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "An ID for the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "latitude": {"name": "latitude", "description": "A geographic coordinate specifying the latitude of the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "longitude": {"name": "longitude", "description": "A geographic coordinate specifying the longitude of the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "message": {"name": "message", "description": "An arbitrary message describing the status. Can be provided by a shipping carrier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the order that's associated with the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "province": {"name": "province", "description": "The province where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "shop_id": {"name": "shop_id", "description": "An ID for the shop that's associated with the fulfillment event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the fulfillment event. Valid values: - label_printed: A label for the shipment was purchased and printed. - label_purchased: A label for the shipment was purchased, but not printed. - attempted_delivery: Delivery of the shipment was attempted, but unable to be completed. - ready_for_pickup: The shipment is ready for pickup at a shipping depot. - picked_up: The fulfillment was successfully picked up. - confirmed: The carrier is aware of the shipment, but hasn't received it yet. - in_transit: The shipment is being transported between shipping facilities on the way to its destination. - out_for_delivery: The shipment is being delivered to its final destination. - delivered: The shipment was successfully delivered. - failure: Something went wrong when pulling tracking information for the shipment, such as the tracking number was invalid or the shipment was canceled.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The date and time (ISO 8601 format) when the fulfillment event was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "zip": {"name": "zip", "description": "The zip code of the location where the fulfillment event occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_fulfillment_event_data\"", "created_at": 1747951351.7748601, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.tax_line": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "tax_line", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.tax_line", "fqn": ["shopify_source", "shopify", "tax_line"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_tax_line_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents a single tax applied to the associated line item.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "The index of the tax line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_id": {"name": "order_line_id", "description": "The order line that this tax line is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The amount of tax, in shop currency, after discounts and before returns.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price_set": {"name": "price_set", "description": "The amount of tax, in shop and presentment currencies, after discounts and before returns.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rate": {"name": "rate", "description": "The proportion of the line item price that the tax represents as a decimal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_tax_line_data\"", "created_at": 1747951351.774953, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.discount_allocation": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "discount_allocation", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.discount_allocation", "fqn": ["shopify_source", "shopify", "discount_allocation"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_discount_allocation_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing allocation amounts applied to order lines from discount applications. Discount allocations indicate how much of the discount was applied and how it was split across line items.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The total amount discounted on the order line from this allocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set_presentment_money_amount": {"name": "amount_set_presentment_money_amount", "description": "The presentment money amount of the discount allocation in the customer\u2019s local currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set_presentment_money_currency_code": {"name": "amount_set_presentment_money_currency_code", "description": "The currency code associated with the customer\u2019s local currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set_shop_money_amount": {"name": "amount_set_shop_money_amount", "description": "The shop money amount of the discount allocation in the store\u2019s currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "amount_set_shop_money_currency_code": {"name": "amount_set_shop_money_currency_code", "description": "The currency code associated with the store\u2019s currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_application_index": {"name": "discount_application_index", "description": "Index of the discount application this allocation relates to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "The position of this allocation in the list of discount allocations applied to an order line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_line_id": {"name": "order_line_id", "description": "The ID of the order line item receiving the allocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_allocation_data\"", "created_at": 1747951351.7750468, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.discount_application": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "discount_application", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.discount_application", "fqn": ["shopify_source", "shopify", "discount_application"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_discount_application_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing discount applications, which define how discounts were applied to an order. This includes metadata like allocation method, target type, and value type.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "allocation_method": {"name": "allocation_method", "description": "The allocation method used to apply the discount. Valid values include `each` (the discount is applied to each entitled item) and `across` (the discount is applied across all entitled items).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "The discount code applied, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "A short description of the discount, usually derived from the associated rule or promotion.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "index": {"name": "index", "description": "The index of the discount application on the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_id": {"name": "order_id", "description": "The ID of the order to which the discount was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_selection": {"name": "target_selection", "description": "Specifies whether the discount applies to all items (`all`) or only entitled ones (`entitled`).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "target_type": {"name": "target_type", "description": "Indicates whether the discount applies to `line_item` or `shipping_line`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The name of the discount as displayed in Shopify.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "type": {"name": "type", "description": "The type of discount. Possible values include `manual`, `automatic`, or `script`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value": {"name": "value", "description": "The numerical value of the discount. This may be a flat amount or a percentage, depending on `value_type`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "value_type": {"name": "value_type", "description": "Indicates whether the discount is a `percentage` or a `fixed_amount`. When the target type is `shipping_line`, only `percentage` is allowed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_application_data\"", "created_at": 1747951351.775249, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.discount_code_app": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "discount_code_app", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.discount_code_app", "fqn": ["shopify_source", "shopify", "discount_code_app"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_discount_code_app_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing discount codes created and managed through apps using Shopify Functions. These app-based discounts support advanced, dynamic behavior and custom targeting.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "Unique identifier for the discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The discount's name displayed in Shopify admin and to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the discount, indicating whether it's active, expired, or scheduled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The timestamp when the discount was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The timestamp when the discount was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starts_at": {"name": "starts_at", "description": "The timestamp when the discount becomes active and is available to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ends_at": {"name": "ends_at", "description": "The timestamp when the discount expires and is no longer valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_once_per_customer": {"name": "applies_once_per_customer", "description": "Whether a customer can only use the discount once.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_on_one_time_purchase": {"name": "applies_on_one_time_purchase", "description": "Whether the discount applies to one-time purchases.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_on_subscription": {"name": "applies_on_subscription", "description": "Whether the discount applies to subscription purchases.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "async_usage_count": {"name": "async_usage_count", "description": "The number of times the discount has been used, updated asynchronously.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_limit": {"name": "usage_limit", "description": "The maximum number of times the discount can be used across all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count_count": {"name": "codes_count_count", "description": "The number of redeemable codes generated for this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count_precision": {"name": "codes_count_precision", "description": "Indicates whether the codes count is exact or estimated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_order_discounts": {"name": "combines_with_order_discounts", "description": "Whether this discount can be combined with order discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_product_discounts": {"name": "combines_with_product_discounts", "description": "Whether this discount can be combined with product discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_shipping_discounts": {"name": "combines_with_shipping_discounts", "description": "Whether this discount can be combined with shipping discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_selection_all_customers": {"name": "customer_selection_all_customers", "description": "Whether the discount is available to all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_amount": {"name": "total_sales_amount", "description": "The total sales amount from orders where the discount was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_currency_code": {"name": "total_sales_currency_code", "description": "The currency code for the total sales amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_app_data\"", "created_at": 1747951351.777108, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.discount_code_basic": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "discount_code_basic", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.discount_code_basic", "fqn": ["shopify_source", "shopify", "discount_code_basic"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_discount_code_basic_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing basic discount codes and their metadata. This includes usage limits, timeframes, eligible customers, combination rules, and tracked usage.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "Unique identifier for the discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The discount's name displayed in Shopify admin and to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The availability status of the discount (e.g., active, expired, scheduled).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The timestamp when the discount was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The timestamp when the discount was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starts_at": {"name": "starts_at", "description": "The timestamp when the discount becomes active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ends_at": {"name": "ends_at", "description": "The timestamp when the discount expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "recurring_cycle_limit": {"name": "recurring_cycle_limit", "description": "Number of billing cycles the discount can be applied for (used for subscriptions).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_once_per_customer": {"name": "applies_once_per_customer", "description": "Whether a customer can only use the discount once.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "async_usage_count": {"name": "async_usage_count", "description": "The number of times the discount has been used, updated asynchronously.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_limit": {"name": "usage_limit", "description": "The maximum number of times the discount can be used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count": {"name": "codes_count", "description": "The number of redeemable codes generated for this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_precision": {"name": "codes_precision", "description": "Indicates whether the codes count is an exact number or an estimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_order_discounts": {"name": "combines_with_order_discounts", "description": "Whether this discount can be combined with order discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_product_discounts": {"name": "combines_with_product_discounts", "description": "Whether this discount can be combined with product discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_shipping_discounts": {"name": "combines_with_shipping_discounts", "description": "Whether this discount can be combined with shipping discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_selection_all_customers": {"name": "customer_selection_all_customers", "description": "Whether the discount is available to all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_amount": {"name": "total_sales_amount", "description": "The total sales amount from orders where the discount was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_currency_code": {"name": "total_sales_currency_code", "description": "The currency code for the total sales amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_basic_data\"", "created_at": 1747951351.777893, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.discount_code_bxgy": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "discount_code_bxgy", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.discount_code_bxgy", "fqn": ["shopify_source", "shopify", "discount_code_bxgy"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_discount_code_bxgy_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing Buy X Get Y discount codes, including conditions for what customers must buy, what they receive, and metadata such as usage, status, and combination eligibility.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "Unique identifier for the discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The discount's name displayed in Shopify admin and to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The availability status of the discount (e.g., active, expired, scheduled).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The timestamp when the discount was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The timestamp when the discount was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starts_at": {"name": "starts_at", "description": "The timestamp when the discount becomes active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ends_at": {"name": "ends_at", "description": "The timestamp when the discount expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_once_per_customer": {"name": "applies_once_per_customer", "description": "Whether a customer can only use the discount once.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "async_usage_count": {"name": "async_usage_count", "description": "The number of times the discount has been used, updated asynchronously.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_limit": {"name": "usage_limit", "description": "The maximum number of times the discount can be used across all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "uses_per_order_limit": {"name": "uses_per_order_limit", "description": "The maximum number of times the discount can be applied to a single order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count": {"name": "codes_count", "description": "The number of redeemable codes generated for this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_precision": {"name": "codes_precision", "description": "Indicates whether the codes count is exact or estimated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_order_discounts": {"name": "combines_with_order_discounts", "description": "Whether this discount can be combined with order discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_product_discounts": {"name": "combines_with_product_discounts", "description": "Whether this discount can be combined with product discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_shipping_discounts": {"name": "combines_with_shipping_discounts", "description": "Whether this discount can be combined with shipping discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_selection_all_customers": {"name": "customer_selection_all_customers", "description": "Whether the discount is available to all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_amount": {"name": "total_sales_amount", "description": "The total sales amount from orders where the discount was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_currency_code": {"name": "total_sales_currency_code", "description": "The currency code for the total sales amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_bxgy_data\"", "created_at": 1747951351.778073, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.discount_code_free_shipping": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "discount_code_free_shipping", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.discount_code_free_shipping", "fqn": ["shopify_source", "shopify", "discount_code_free_shipping"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_discount_code_free_shipping_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing free shipping discount codes and metadata, including subscription and one-time purchase applicability, eligible countries, usage limits, and combination rules.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "Unique identifier for the discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "title": {"name": "title", "description": "The discount's name displayed in Shopify admin and to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "status": {"name": "status", "description": "The status of the discount, indicating whether it's active, expired, or scheduled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_at": {"name": "created_at", "description": "The timestamp when the discount was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "The timestamp when the discount was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "starts_at": {"name": "starts_at", "description": "The timestamp when the discount becomes active and is available to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ends_at": {"name": "ends_at", "description": "The timestamp when the discount expires and is no longer valid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_once_per_customer": {"name": "applies_once_per_customer", "description": "Whether a customer can only use the discount once.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_on_one_time_purchase": {"name": "applies_on_one_time_purchase", "description": "Whether the discount applies to one-time purchases.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "applies_on_subscription": {"name": "applies_on_subscription", "description": "Whether the discount applies to subscription purchases.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "async_usage_count": {"name": "async_usage_count", "description": "The number of times the discount has been used, updated asynchronously.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "usage_limit": {"name": "usage_limit", "description": "The maximum number of times the discount can be used across all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_count": {"name": "codes_count", "description": "The number of redeemable codes generated for this discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "codes_precision": {"name": "codes_precision", "description": "Indicates whether the codes count is exact or estimated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_order_discounts": {"name": "combines_with_order_discounts", "description": "Whether this discount can be combined with order discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_product_discounts": {"name": "combines_with_product_discounts", "description": "Whether this discount can be combined with product discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "combines_with_shipping_discounts": {"name": "combines_with_shipping_discounts", "description": "Whether this discount can be combined with shipping discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_selection_all_customers": {"name": "customer_selection_all_customers", "description": "Whether the discount is available to all customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_amount": {"name": "total_sales_amount", "description": "The total sales amount from orders where the discount was applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_sales_currency_code": {"name": "total_sales_currency_code", "description": "The currency code for the total sales amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_code_free_shipping_data\"", "created_at": 1747951351.778197, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}, "source.shopify_source.shopify.discount_redeem_code": {"database": "postgres", "schema": "shopify_integration_tests_17", "name": "discount_redeem_code", "resource_type": "source", "package_name": "shopify_source", "path": "models/src_shopify.yml", "original_file_path": "models/src_shopify.yml", "unique_id": "source.shopify_source.shopify.discount_redeem_code", "fqn": ["shopify_source", "shopify", "discount_redeem_code"], "source_name": "shopify", "source_description": "", "loader": "", "identifier": "shopify_discount_redeem_code_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table storing individual redeem codes that customers can use at checkout to receive a discount.  Each code is tied to a parent discount and may be created by an app or manually by a merchant.\n", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The time when a record was last updated by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id": {"name": "id", "description": "The unique ID of the redeem code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "async_usage_count": {"name": "async_usage_count", "description": "The number of times that the redeem code has been used. This value is updated asynchronously and may not match real-time usage counts.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "code": {"name": "code", "description": "The redeemable code that a customer can enter at checkout (e.g., `SUMMER20`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_by_description": {"name": "created_by_description", "description": "A descriptive label of the app or user who created the redeem code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_by_id": {"name": "created_by_id", "description": "The internal ID of the app or user that created the redeem code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "created_by_title": {"name": "created_by_title", "description": "The name or title of the creator of the redeem code (usually an app name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_id": {"name": "discount_id", "description": "The unique ID of the parent discount associated with this redeem code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "discount_type": {"name": "discount_type", "description": "The type of discount this redeem code is associated with (e.g., `discount_code_basic`, `discount_code_bxgy`).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"shopify_integration_tests_17\".\"shopify_discount_redeem_code_data\"", "created_at": 1747951351.7782989, "unrendered_database": "{% if target.type not in ('spark') %}{{ var('shopify_database', target.database) }}{% endif %}", "unrendered_schema": "{{ var('shopify_schema', 'shopify') }}"}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.789792, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.789999, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.7900941, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.790185, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.790329, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.7912629, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.791581, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.792126, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.792235, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.7945, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.7949388, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.7952, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.795455, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.7958322, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.796182, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.7963252, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.796604, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.796913, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.797686, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.797855, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.798112, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.79833, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.7986739, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  {% if relation.type == 'materialized_view' -%}\n    {% set relation_type = \"materialized view\" %}\n  {%- else -%}\n    {%- set relation_type = relation.type -%}\n  {%- endif -%}\n  comment on {{ relation_type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.798978, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.7994618, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.799639, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.799742, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.799901, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8000278, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8004239, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_microbatch_sql": {"name": "postgres__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_microbatch_sql", "macro_sql": "{% macro postgres__get_incremental_microbatch_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) %}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"dbt-postgres 'microbatch' requires a `unique_key` config\") }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql", "macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.800693, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    update {{ target }}\n    set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }}::text = {{ target }}.{{ columns.dbt_scd_id }}::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      {% if config.get(\"dbt_valid_to_current\") %}\n        and ({{ target }}.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ target }}.{{ columns.dbt_valid_to }} is null);\n      {% else %}\n        and {{ target }}.{{ columns.dbt_valid_to }} is null;\n      {% endif %}\n\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.801663, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8017972, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.802049, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.802177, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.802332, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.803102, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.803699, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.803963, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.804516, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.804685, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.805265, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.805423, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8055522, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.806027, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8061812, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.806375, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.806849, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.808704, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.808851, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8092601, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.809599, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.810365, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.810536, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.810689, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.810857, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.811014, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8113291, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.811606, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.811861, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.812255, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.812952, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.814971, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.81512, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.815308, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8161259, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.816268, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.816416, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.817605, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.818851, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.820875, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.821127, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.821269, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.821345, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.82147, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.821569, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.821739, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.821957, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8250408, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8252192, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.825644, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.825996, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8265269, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8268878, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.827126, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.827452, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8279722, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.828149, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.828353, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.831957, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8339782, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8344839, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.834739, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8349178, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.83542, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8357499, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.836131, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.837443, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.838846, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8391879, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.839398, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.840523, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.840718, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.841248, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.843078, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8449438, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.845694, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.846142, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.846684, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8468852, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.847481, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.848499, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.85, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.850226, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.850821, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8510458, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.851576, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8520691, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.852701, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8528981, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.853051, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.853293, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8534558, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.853703, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.853863, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8540878, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8542469, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.854371, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.854526, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.854663, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.854898, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8587599, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.859879, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.860924, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8619368, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.862644, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.862863, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8629692, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.863224, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.863371, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.865514, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8676639, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8685682, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8693829, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.869586, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8699899, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.870152, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.870264, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.870385, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.870485, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.870616, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.87072, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.871108, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.871268, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8723059, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.87267, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.872979, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.873384, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.873601, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.87384, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8741581, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.87437, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.874769, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.875104, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8752582, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.875424, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.875587, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8760982, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.877138, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.877486, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.87771, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.877939, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.878124, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.878381, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8785548, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8789608, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.879324, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.879502, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.879745, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8800151, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8802419, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8805702, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.880955, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.881218, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.881394, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.881611, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.881716, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8820102, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.882137, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.882394, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.882506, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.882733, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8828568, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.88336, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.883533, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.883769, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.883894, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8841379, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.884259, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8849542, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.885057, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.885495, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8856618, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.885814, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8869739, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8872929, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8875809, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.887805, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8879092, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.88814, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.888264, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.888493, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8886201, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.88919, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.889355, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.889717, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.890295, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.89068, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.890839, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8909912, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8912199, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8913229, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8918002, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8919291, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8929138, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8930812, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8932748, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.893505, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.893628, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.893952, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8941271, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8942962, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.894664, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.894923, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.895172, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8953779, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8958158, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8969312, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.897504, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.89775, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.8984199, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.89938, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.899998, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.900191, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.900398, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.900464, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.900936, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.901422, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.901616, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.901919, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9021928, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.902475, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.902758, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9029, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9031181, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.903223, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9036238, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.904047, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.904212, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.904634, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.904858, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.90495, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9052212, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9053671, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.905565, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9056299, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.905868, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.90599, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.906235, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.906361, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9067678, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.907122, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9073951, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.907535, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.907785, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.907907, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.908185, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9085052, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9087281, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.908865, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9090781, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9092119, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.909448, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.90956, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.909774, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.909863, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.910104, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.910222, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.910431, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9105222, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.91127, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.911405, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9115431, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.911672, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.911808, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.912013, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.912149, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.912298, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9124339, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9125671, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.912707, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.912831, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9129658, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.913086, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9133298, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9134452, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.913672, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.913762, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.914036, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.914262, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.914388, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.914714, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.914855, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9150379, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.915274, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9155898, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.915914, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.916119, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.916364, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.916478, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9167528, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.916903, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9170408, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.917191, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.917632, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9177659, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.917896, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9179862, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_postgres.postgres__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.918327, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.91847, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.918539, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.918686, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.918825, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9193149, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.919499, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.919632, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9199638, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9201212, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.920236, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.920369, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.920473, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.921113, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.921258, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.921576, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.921814, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.922016, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.922283, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.922454, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9226072, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.922818, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9233768, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.923576, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9237509, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9242408, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.924592, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.924774, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.925038, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9252858, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9254808, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.926566, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.926666, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.926807, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9269052, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.927194, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.927387, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.927497, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.927702, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.927882, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.928069, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.928319, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9285078, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9290721, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.929234, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9294348, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9296288, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.930563, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.930922, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.931079, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.931232, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.931614, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.931756, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.931923, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9320629, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.932287, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.932673, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.933459, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.93368, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.933915, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.934124, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.934283, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.934415, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.934568, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.934774, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.934945, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9352489, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.935411, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.93555, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9357052, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.935848, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.935989, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.936115, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9362838, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.936429, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.937484, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9376168, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.937876, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.938127, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.938306, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.938456, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.939428, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.939717, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9398699, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.940154, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.940344, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.940882, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9410958, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9417422, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.943807, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9443462, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.945311, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.945496, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.945577, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.94627, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.946399, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.947191, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.947548, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.948021, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.948409, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9484742, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.948865, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.949077, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.949331, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.949574, "supported_languages": null}, "macro.shopify_source.get_order_note_attribute_columns": {"name": "get_order_note_attribute_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_note_attribute_columns.sql", "original_file_path": "macros/get_order_note_attribute_columns.sql", "unique_id": "macro.shopify_source.get_order_note_attribute_columns", "macro_sql": "{% macro get_order_note_attribute_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.950099, "supported_languages": null}, "macro.shopify_source.get_product_variant_media_columns": {"name": "get_product_variant_media_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_product_variant_media_columns.sql", "original_file_path": "macros/get_product_variant_media_columns.sql", "unique_id": "macro.shopify_source.get_product_variant_media_columns", "macro_sql": "{% macro get_product_variant_media_columns() %}\n\n{% set columns = [\n    {\"name\": \"product_variant_id\", \"datatype\": dbt.type_bigint()},\n    {\"name\": \"media_id\", \"datatype\": dbt.type_bigint()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9504452, "supported_languages": null}, "macro.shopify_source.get_order_discount_code_columns": {"name": "get_order_discount_code_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_discount_code_columns.sql", "original_file_path": "macros/get_order_discount_code_columns.sql", "unique_id": "macro.shopify_source.get_order_discount_code_columns", "macro_sql": "{% macro get_order_discount_code_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9510882, "supported_languages": null}, "macro.shopify_source.get_abandoned_checkout_discount_code_columns": {"name": "get_abandoned_checkout_discount_code_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_abandoned_checkout_discount_code_columns.sql", "original_file_path": "macros/get_abandoned_checkout_discount_code_columns.sql", "unique_id": "macro.shopify_source.get_abandoned_checkout_discount_code_columns", "macro_sql": "{% macro get_abandoned_checkout_discount_code_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"checkout_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"discount_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9520361, "supported_languages": null}, "macro.shopify_source.get_discount_code_bxgy_columns": {"name": "get_discount_code_bxgy_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_discount_code_bxgy_columns.sql", "original_file_path": "macros/get_discount_code_bxgy_columns.sql", "unique_id": "macro.shopify_source.get_discount_code_bxgy_columns", "macro_sql": "{% macro get_discount_code_bxgy_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"starts_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ends_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"recurring_cycle_limit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"applies_once_per_customer\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"async_usage_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"usage_limit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"codes_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"codes_precision\", \"datatype\": dbt.type_string()},\n    {\"name\": \"combines_with_order_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"combines_with_product_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"combines_with_shipping_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"customer_selection_all_customers\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"total_sales_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_sales_currency_code\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_boolean", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.953898, "supported_languages": null}, "macro.shopify_source.get_product_tag_columns": {"name": "get_product_tag_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_product_tag_columns.sql", "original_file_path": "macros/get_product_tag_columns.sql", "unique_id": "macro.shopify_source.get_product_tag_columns", "macro_sql": "{% macro get_product_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9544058, "supported_languages": null}, "macro.shopify_source.get_fulfillment_event_columns": {"name": "get_fulfillment_event_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_fulfillment_event_columns.sql", "original_file_path": "macros/get_fulfillment_event_columns.sql", "unique_id": "macro.shopify_source.get_fulfillment_event_columns", "macro_sql": "{% macro get_fulfillment_event_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"address_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"estimated_delivery_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"fulfillment_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"happened_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"latitude\", \"datatype\": dbt.type_float()},\n    {\"name\": \"longitude\", \"datatype\": dbt.type_float()},\n    {\"name\": \"message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"province\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shop_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"zip\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.956053, "supported_languages": null}, "macro.shopify_source.get_abandoned_checkout_columns": {"name": "get_abandoned_checkout_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_abandoned_checkout_columns.sql", "original_file_path": "macros/get_abandoned_checkout_columns.sql", "unique_id": "macro.shopify_source.get_abandoned_checkout_columns", "macro_sql": "{% macro get_abandoned_checkout_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"abandoned_checkout_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_address_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_address_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_country_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_latitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_longitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_province\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_province_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_zip\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_accepts_marketing\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"cart_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"customer_locale\", \"datatype\": dbt.type_string()},\n    {\"name\": \"device_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gateway\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"landing_site_base_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"presentment_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"referring_site\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_address_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_address_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_country_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_latitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_longitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_province\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_province_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_zip\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subtotal_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"taxes_included\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_discounts\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_duties\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_line_items_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_weight\", \"datatype\": dbt.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.961288, "supported_languages": null}, "macro.shopify_source.get_inventory_item_columns": {"name": "get_inventory_item_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_inventory_item_columns.sql", "original_file_path": "macros/get_inventory_item_columns.sql", "unique_id": "macro.shopify_source.get_inventory_item_columns", "macro_sql": "{% macro get_inventory_item_columns() %}\n\n{# Columns below line 26 to be deprecated. #}\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"country_code_of_origin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_bigint()},\n    {\"name\": \"province_code_of_origin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requires_shipping\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tracked\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"duplicate_sku_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"harmonized_system_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inventory_history_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"legacy_resource_id\", \"datatype\": dbt.type_bigint()},\n    {\"name\": \"measurement_id\", \"datatype\": dbt.type_bigint()},\n    {\"name\": \"measurement_weight_value\", \"datatype\": dbt.type_float()},\n    {\"name\": \"measurement_weight_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tracked_editable_locked\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"tracked_editable_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_cost_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"unit_cost_currency_code\", \"datatype\": dbt.type_string()}\n    ,\n    {\"name\": \"cost\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_bigint", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.963223, "supported_languages": null}, "macro.shopify_source.get_order_line_refund_columns": {"name": "get_order_line_refund_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_line_refund_columns.sql", "original_file_path": "macros/get_order_line_refund_columns.sql", "unique_id": "macro.shopify_source.get_order_line_refund_columns", "macro_sql": "{% macro get_order_line_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"location_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"order_line_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"subtotal\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"subtotal_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"total_tax_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"refund_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"restock_type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('order_line_refund_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_numeric", "macro.dbt.type_string", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.96434, "supported_languages": null}, "macro.shopify_source.get_media_image_columns": {"name": "get_media_image_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_media_image_columns.sql", "original_file_path": "macros/get_media_image_columns.sql", "unique_id": "macro.shopify_source.get_media_image_columns", "macro_sql": "{% macro get_media_image_columns() %}\n\n{% set columns = [\n    {\"name\": \"media_id\", \"datatype\": dbt.type_bigint()},\n    {\"name\": \"image_id\", \"datatype\": dbt.type_bigint()},\n    {\"name\": \"image_alt_text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"image_height\", \"datatype\": dbt.type_int()},\n    {\"name\": \"image_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"image_width\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_bigint", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.964982, "supported_languages": null}, "macro.shopify_source.get_fulfillment_columns": {"name": "get_fulfillment_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_fulfillment_columns.sql", "original_file_path": "macros/get_fulfillment_columns.sql", "unique_id": "macro.shopify_source.get_fulfillment_columns", "macro_sql": "{% macro get_fulfillment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"location_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"service\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipment_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tracking_company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tracking_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tracking_numbers\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tracking_urls\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.966227, "supported_languages": null}, "macro.shopify_source.shopify_union_data": {"name": "shopify_union_data", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/shopify_union_data.sql", "original_file_path": "macros/shopify_union_data.sql", "unique_id": "macro.shopify_source.shopify_union_data", "macro_sql": "{%- macro shopify_union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('shopify_union_data', 'shopify_source') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema,\n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.shopify_source.default__shopify_union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.967426, "supported_languages": null}, "macro.shopify_source.default__shopify_union_data": {"name": "default__shopify_union_data", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/shopify_union_data.sql", "original_file_path": "macros/shopify_union_data.sql", "unique_id": "macro.shopify_source.default__shopify_union_data", "macro_sql": "{%- macro default__shopify_union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit {{ '0' if target.type != 'redshift' else '1' }}\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit {{ '0' if target.type != 'redshift' else '1' }}\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit {{ '0' if target.type != 'redshift' else '1' }}\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.971425, "supported_languages": null}, "macro.shopify_source.get_product_variant_columns": {"name": "get_product_variant_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_product_variant_columns.sql", "original_file_path": "macros/get_product_variant_columns.sql", "unique_id": "macro.shopify_source.get_product_variant_columns", "macro_sql": "{% macro get_product_variant_columns() %}\n\n{# Columns below line 28 to be deprecated. #}\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"inventory_item_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"position\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"inventory_policy\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compare_at_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"taxable\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"barcode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"old_inventory_quantity\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"inventory_quantity\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"tax_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"available_for_sale\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"display_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"legacy_resource_id\", \"datatype\": dbt.type_bigint()},\n    {\"name\": \"requires_components\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"sellable_online_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"fulfillment_service\", \"datatype\": dbt.type_string()},\n    {\"name\": \"grams\", \"datatype\": dbt.type_float()},\n    {\"name\": \"inventory_management\", \"datatype\": dbt.type_string()},\n    {\"name\": \"weight\", \"datatype\": dbt.type_float()},\n    {\"name\": \"weight_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"option_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"option_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"option_3\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('product_variant_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_boolean", "macro.dbt.type_bigint", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.974043, "supported_languages": null}, "macro.shopify_source.get_refund_columns": {"name": "get_refund_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_refund_columns.sql", "original_file_path": "macros/get_refund_columns.sql", "unique_id": "macro.shopify_source.get_refund_columns", "macro_sql": "{% macro get_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"processed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"restock\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"total_duties_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_numeric", "macro.dbt.type_string", "macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9749272, "supported_languages": null}, "macro.shopify_source.get_tax_line_columns": {"name": "get_tax_line_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_tax_line_columns.sql", "original_file_path": "macros/get_tax_line_columns.sql", "unique_id": "macro.shopify_source.get_tax_line_columns", "macro_sql": "{% macro get_tax_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"order_line_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"price_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.97568, "supported_languages": null}, "macro.shopify_source.get_discount_code_basic_columns": {"name": "get_discount_code_basic_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_discount_code_basic_columns.sql", "original_file_path": "macros/get_discount_code_basic_columns.sql", "unique_id": "macro.shopify_source.get_discount_code_basic_columns", "macro_sql": "{% macro get_discount_code_basic_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"starts_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ends_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"recurring_cycle_limit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"applies_once_per_customer\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"async_usage_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"usage_limit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"codes_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"codes_precision\", \"datatype\": dbt.type_string()},\n    {\"name\": \"combines_with_order_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"combines_with_product_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"combines_with_shipping_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"customer_selection_all_customers\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"total_sales_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_sales_currency_code\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_boolean", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.977664, "supported_languages": null}, "macro.shopify_source.get_shop_columns": {"name": "get_shop_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_shop_columns.sql", "original_file_path": "macros/get_shop_columns.sql", "unique_id": "macro.shopify_source.get_shop_columns", "macro_sql": "{% macro get_shop_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"address_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"checkout_api_supported\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cookie_consent_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"county_taxes\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"domain\", \"datatype\": dbt.type_string()},\n    {\"name\": \"eligible_for_card_reader_giveaway\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"eligible_for_payments\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"enabled_presentment_currencies\", \"datatype\": dbt.type_string()},\n    {\"name\": \"google_apps_domain\", \"datatype\": dbt.type_string()},\n    {\"name\": \"google_apps_login_enabled\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"has_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"has_gift_cards\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"has_storefront\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"iana_timezone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"latitude\", \"datatype\": dbt.type_float()},\n    {\"name\": \"longitude\", \"datatype\": dbt.type_float()},\n    {\"name\": \"money_format\", \"datatype\": dbt.type_string()},\n    {\"name\": \"money_in_emails_format\", \"datatype\": dbt.type_string()},\n    {\"name\": \"money_with_currency_format\", \"datatype\": dbt.type_string()},\n    {\"name\": \"money_with_currency_in_emails_format\", \"datatype\": dbt.type_string()},\n    {\"name\": \"myshopify_domain\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"password_enabled\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plan_display_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plan_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pre_launch_enabled\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"primary_locale\", \"datatype\": dbt.type_string()},\n    {\"name\": \"province\", \"datatype\": dbt.type_string()},\n    {\"name\": \"province_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requires_extra_payments_agreement\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"setup_required\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"shop_owner\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_shipping\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"taxes_included\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"timezone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"weight_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"zip\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.982194, "supported_languages": null}, "macro.shopify_source.get_order_line_columns": {"name": "get_order_line_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_line_columns.sql", "original_file_path": "macros/get_order_line_columns.sql", "unique_id": "macro.shopify_source.get_order_line_columns", "macro_sql": "{% macro get_order_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"fulfillable_quantity\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"fulfillment_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gift_card\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"grams\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"index\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"pre_tax_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"pre_tax_price_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"price_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"requires_shipping\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taxable\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"tax_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_discount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_discount_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"variant_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"variant_title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"variant_inventory_management\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vendor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"properties\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('order_line_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_numeric", "macro.dbt.type_string", "macro.dbt.type_boolean", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.984585, "supported_languages": null}, "macro.shopify_source.get_discount_allocation_columns": {"name": "get_discount_allocation_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_discount_allocation_columns.sql", "original_file_path": "macros/get_discount_allocation_columns.sql", "unique_id": "macro.shopify_source.get_discount_allocation_columns", "macro_sql": "{% macro get_discount_allocation_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_set_presentment_money_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_set_presentment_money_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount_set_shop_money_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_set_shop_money_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_application_index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"order_line_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9854798, "supported_languages": null}, "macro.shopify_source.get_discount_code_app_columns": {"name": "get_discount_code_app_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_discount_code_app_columns.sql", "original_file_path": "macros/get_discount_code_app_columns.sql", "unique_id": "macro.shopify_source.get_discount_code_app_columns", "macro_sql": "{% macro get_discount_code_app_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"starts_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ends_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"recurring_cycle_limit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"applies_once_per_customer\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"async_usage_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"usage_limit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"codes_count_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"codes_count_precision\", \"datatype\": dbt.type_string()},\n    {\"name\": \"combines_with_order_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"combines_with_product_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"combines_with_shipping_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"customer_selection_all_customers\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"total_sales_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_sales_currency_code\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_boolean", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9872599, "supported_languages": null}, "macro.shopify_source.get_product_columns": {"name": "get_product_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_product_columns.sql", "original_file_path": "macros/get_product_columns.sql", "unique_id": "macro.shopify_source.get_product_columns", "macro_sql": "{% macro get_product_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"handle\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"product_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"published_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"published_scope\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vendor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('product_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_numeric", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.988522, "supported_languages": null}, "macro.shopify_source.get_metafield_columns": {"name": "get_metafield_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_metafield_columns.sql", "original_file_path": "macros/get_metafield_columns.sql", "unique_id": "macro.shopify_source.get_metafield_columns", "macro_sql": "{% macro get_metafield_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"key\", \"datatype\": dbt.type_string()},\n    {\"name\": \"namespace\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"owner_resource\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"value_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9896598, "supported_languages": null}, "macro.shopify_source.get_discount_redeem_code_columns": {"name": "get_discount_redeem_code_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_discount_redeem_code_columns.sql", "original_file_path": "macros/get_discount_redeem_code_columns.sql", "unique_id": "macro.shopify_source.get_discount_redeem_code_columns", "macro_sql": "{% macro get_discount_redeem_code_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"async_usage_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created_by_title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"discount_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.99053, "supported_languages": null}, "macro.shopify_source.get_order_columns": {"name": "get_order_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_columns.sql", "original_file_path": "macros/get_order_columns.sql", "unique_id": "macro.shopify_source.get_order_columns", "macro_sql": "{% macro get_order_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"processed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"total_discounts\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_discounts_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_line_items_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_line_items_price_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_price_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_tax_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_tax\", \"datatype\": dbt.type_float()},\n    {\"name\": \"source_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subtotal_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"taxes_included\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"total_weight\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"total_tip_received\", \"datatype\": dbt.type_float()},\n    {\"name\": \"landing_site_base_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"order_number\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"cancel_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cancelled_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"cart_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"checkout_token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"closed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"financial_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fulfillment_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"referring_site\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_address_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_address_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_country_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_latitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_longitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_province\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_province_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_address_zip\", \"datatype\": dbt.type_string()},\n    {\"name\": \"browser_ip\", \"datatype\": dbt.type_string()},\n    {\"name\": \"buyer_accepts_marketing\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"total_shipping_price_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_address_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_address_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_country_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_latitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_longitude\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_province\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_province_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_zip\", \"datatype\": dbt.type_string()},\n    {\"name\": \"test\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"token\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"app_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"checkout_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"client_details_user_agent\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_locale\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_status_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"presentment_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"confirmed\", \"datatype\": dbt.type_boolean()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('order_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.9972749, "supported_languages": null}, "macro.shopify_source.get_order_url_tag_columns": {"name": "get_order_url_tag_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_url_tag_columns.sql", "original_file_path": "macros/get_order_url_tag_columns.sql", "unique_id": "macro.shopify_source.get_order_url_tag_columns", "macro_sql": "{% macro get_order_url_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"key\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.997825, "supported_languages": null}, "macro.shopify_source.get_product_media_columns": {"name": "get_product_media_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_product_media_columns.sql", "original_file_path": "macros/get_product_media_columns.sql", "unique_id": "macro.shopify_source.get_product_media_columns", "macro_sql": "{% macro get_product_media_columns() %}\n\n{% set columns = [\n    {\"name\": \"product_id\", \"datatype\": dbt.type_bigint()},\n    {\"name\": \"media_id\", \"datatype\": dbt.type_bigint()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.998165, "supported_languages": null}, "macro.shopify_source.get_media_columns": {"name": "get_media_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_media_columns.sql", "original_file_path": "macros/get_media_columns.sql", "unique_id": "macro.shopify_source.get_media_columns", "macro_sql": "{% macro get_media_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt.type_bigint()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()} \n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_bigint", "macro.dbt.type_string", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951348.998652, "supported_languages": null}, "macro.shopify_source.get_location_columns": {"name": "get_location_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_location_columns.sql", "original_file_path": "macros/get_location_columns.sql", "unique_id": "macro.shopify_source.get_location_columns", "macro_sql": "{% macro get_location_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"address_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"legacy\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"localized_country_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"localized_province_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"province\", \"datatype\": dbt.type_string()},\n    {\"name\": \"province_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"zip\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.000351, "supported_languages": null}, "macro.shopify_source.get_inventory_level_columns": {"name": "get_inventory_level_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_inventory_level_columns.sql", "original_file_path": "macros/get_inventory_level_columns.sql", "unique_id": "macro.shopify_source.get_inventory_level_columns", "macro_sql": "{% macro get_inventory_level_columns() %}\n\n{# Columns below line 13 to be deprecated. #}\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"inventory_item_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"location_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"can_deactivate\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deactivation_alert\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()}\n    ,\n    {\"name\": \"available\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_boolean", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.001295, "supported_languages": null}, "macro.shopify_source.get_order_tag_columns": {"name": "get_order_tag_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_tag_columns.sql", "original_file_path": "macros/get_order_tag_columns.sql", "unique_id": "macro.shopify_source.get_order_tag_columns", "macro_sql": "{% macro get_order_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.001787, "supported_languages": null}, "macro.shopify_source.get_order_shipping_tax_line_columns": {"name": "get_order_shipping_tax_line_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_shipping_tax_line_columns.sql", "original_file_path": "macros/get_order_shipping_tax_line_columns.sql", "unique_id": "macro.shopify_source.get_order_shipping_tax_line_columns", "macro_sql": "{% macro get_order_shipping_tax_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"order_shipping_line_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"price_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.002551, "supported_languages": null}, "macro.shopify_source.get_transaction_columns": {"name": "get_transaction_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_transaction_columns.sql", "original_file_path": "macros/get_transaction_columns.sql", "unique_id": "macro.shopify_source.get_transaction_columns", "macro_sql": "{% macro get_transaction_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"refund_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"processed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"device_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"gateway\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"payment_avs_result_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_credit_card_bin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_cvv_result_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_credit_card_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_credit_card_company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"receipt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency_exchange_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"currency_exchange_adjustment\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"currency_exchange_original_amount\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"currency_exchange_final_amount\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"currency_exchange_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"error_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"test\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"authorization_expires_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{% if target.type in ('redshift','postgres') %}\n {{ columns.append({\"name\": \"authorization\", \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"authorization_code\"}) }}\n{% else %}\n {{ columns.append({\"name\": \"authorization\", \"datatype\": dbt.type_string(), \"alias\": \"authorization_code\"}) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0056808, "supported_languages": null}, "macro.shopify_source.get_customer_columns": {"name": "get_customer_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_customer_columns.sql", "original_file_path": "macros/get_customer_columns.sql", "unique_id": "macro.shopify_source.get_customer_columns", "macro_sql": "{% macro get_customer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accepts_marketing\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_address_id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"orders_count\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_exempt\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"total_spent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"verified_email\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"email_marketing_consent_consent_updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email_marketing_consent_opt_in_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_marketing_consent_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"note\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accepts_marketing_updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"marketing_opt_in_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('customer_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_boolean", "macro.dbt.type_numeric", "macro.dbt.type_string", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.007654, "supported_languages": null}, "macro.shopify_source.get_collection_product_columns": {"name": "get_collection_product_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_collection_product_columns.sql", "original_file_path": "macros/get_collection_product_columns.sql", "unique_id": "macro.shopify_source.get_collection_product_columns", "macro_sql": "{% macro get_collection_product_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"collection_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0080771, "supported_languages": null}, "macro.shopify_source.get_inventory_quantity_columns": {"name": "get_inventory_quantity_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_inventory_quantity_columns.sql", "original_file_path": "macros/get_inventory_quantity_columns.sql", "unique_id": "macro.shopify_source.get_inventory_quantity_columns", "macro_sql": "{% macro get_inventory_quantity_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"inventory_item_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"inventory_level_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.008793, "supported_languages": null}, "macro.shopify_source.get_collection_columns": {"name": "get_collection_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_collection_columns.sql", "original_file_path": "macros/get_collection_columns.sql", "unique_id": "macro.shopify_source.get_collection_columns", "macro_sql": "{% macro get_collection_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"disjunctive\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"handle\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"published_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"published_scope\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rules\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sort_order\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.00992, "supported_languages": null}, "macro.shopify_source.get_order_adjustment_columns": {"name": "get_order_adjustment_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_adjustment_columns.sql", "original_file_path": "macros/get_order_adjustment_columns.sql", "unique_id": "macro.shopify_source.get_order_adjustment_columns", "macro_sql": "{% macro get_order_adjustment_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\":  dbt.type_numeric()},\n    {\"name\": \"order_id\", \"datatype\":  dbt.type_numeric()},\n    {\"name\": \"refund_id\", \"datatype\":  dbt.type_numeric()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_amount_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"kind\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_float", "macro.dbt.type_string", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.010991, "supported_languages": null}, "macro.shopify_source.get_customer_tag_columns": {"name": "get_customer_tag_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_customer_tag_columns.sql", "original_file_path": "macros/get_customer_tag_columns.sql", "unique_id": "macro.shopify_source.get_customer_tag_columns", "macro_sql": "{% macro get_customer_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.011555, "supported_languages": null}, "macro.shopify_source.get_discount_code_free_shipping_columns": {"name": "get_discount_code_free_shipping_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_discount_code_free_shipping_columns.sql", "original_file_path": "macros/get_discount_code_free_shipping_columns.sql", "unique_id": "macro.shopify_source.get_discount_code_free_shipping_columns", "macro_sql": "{% macro get_discount_code_free_shipping_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"starts_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ends_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"recurring_cycle_limit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"applies_once_per_customer\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"async_usage_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"usage_limit\", \"datatype\": dbt.type_int()},\n    {\"name\": \"codes_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"codes_precision\", \"datatype\": dbt.type_string()},\n    {\"name\": \"combines_with_order_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"combines_with_product_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"combines_with_shipping_discounts\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"customer_selection_all_customers\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"total_sales_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_sales_currency_code\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_boolean", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0136142, "supported_languages": null}, "macro.shopify_source.get_order_shipping_line_columns": {"name": "get_order_shipping_line_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_order_shipping_line_columns.sql", "original_file_path": "macros/get_order_shipping_line_columns.sql", "unique_id": "macro.shopify_source.get_order_shipping_line_columns", "macro_sql": "{% macro get_order_shipping_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"carrier_identifier\", \"datatype\": dbt.type_string()},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discounted_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"discounted_price_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"price_set\", \"datatype\": dbt.type_string()},\n    {\"name\": \"requested_fulfillment_service_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.01493, "supported_languages": null}, "macro.shopify_source.get_tender_transaction_columns": {"name": "get_tender_transaction_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_tender_transaction_columns.sql", "original_file_path": "macros/get_tender_transaction_columns.sql", "unique_id": "macro.shopify_source.get_tender_transaction_columns", "macro_sql": "{% macro get_tender_transaction_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"payment_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"processed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"remote_reference\", \"datatype\": dbt.type_string()},\n    {\"name\": \"test\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0158982, "supported_languages": null}, "macro.shopify_source.get_abandoned_checkout_shipping_line_columns": {"name": "get_abandoned_checkout_shipping_line_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_abandoned_checkout_shipping_line_columns.sql", "original_file_path": "macros/get_abandoned_checkout_shipping_line_columns.sql", "unique_id": "macro.shopify_source.get_abandoned_checkout_shipping_line_columns", "macro_sql": "{% macro get_abandoned_checkout_shipping_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"carrier_identifier\", \"datatype\": dbt.type_string()},\n    {\"name\": \"checkout_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_expectation_range\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delivery_expectation_range_max\", \"datatype\": dbt.type_int()},\n    {\"name\": \"delivery_expectation_range_min\", \"datatype\": dbt.type_int()},\n    {\"name\": \"delivery_expectation_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discounted_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"requested_fulfillment_service_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.018343, "supported_languages": null}, "macro.shopify_source.get_discount_application_columns": {"name": "get_discount_application_columns", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/get_discount_application_columns.sql", "original_file_path": "macros/get_discount_application_columns.sql", "unique_id": "macro.shopify_source.get_discount_application_columns", "macro_sql": "{% macro get_discount_application_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"allocation_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"order_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"target_selection\", \"datatype\": dbt.type_string()},\n    {\"name\": \"target_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"value\", \"datatype\": dbt.type_float()},\n    {\"name\": \"value_type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.02002, "supported_languages": null}, "macro.shopify_source.fivetran_convert_timezone": {"name": "fivetran_convert_timezone", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "original_file_path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "unique_id": "macro.shopify_source.fivetran_convert_timezone", "macro_sql": "{%- macro fivetran_convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = \"UTC\" if not target_tz else target_tz -%}\n{{ return(adapter.dispatch('fivetran_convert_timezone', 'shopify_source') (column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.shopify_source.postgres__fivetran_convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0208461, "supported_languages": null}, "macro.shopify_source.default__fivetran_convert_timezone": {"name": "default__fivetran_convert_timezone", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "original_file_path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "unique_id": "macro.shopify_source.default__fivetran_convert_timezone", "macro_sql": "{% macro default__fivetran_convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.021112, "supported_languages": null}, "macro.shopify_source.bigquery__fivetran_convert_timezone": {"name": "bigquery__fivetran_convert_timezone", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "original_file_path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "unique_id": "macro.shopify_source.bigquery__fivetran_convert_timezone", "macro_sql": "{%- macro bigquery__fivetran_convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.021276, "supported_languages": null}, "macro.shopify_source.postgres__fivetran_convert_timezone": {"name": "postgres__fivetran_convert_timezone", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "original_file_path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "unique_id": "macro.shopify_source.postgres__fivetran_convert_timezone", "macro_sql": "{% macro postgres__fivetran_convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.021493, "supported_languages": null}, "macro.shopify_source.redshift__fivetran_convert_timezone": {"name": "redshift__fivetran_convert_timezone", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "original_file_path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "unique_id": "macro.shopify_source.redshift__fivetran_convert_timezone", "macro_sql": "{%- macro redshift__fivetran_convert_timezone(column, target_tz, source_tz) -%}\n{{ return(shopify_source.default__fivetran_convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.shopify_source.default__fivetran_convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0217469, "supported_languages": null}, "macro.shopify_source.duckdb__fivetran_convert_timezone": {"name": "duckdb__fivetran_convert_timezone", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "original_file_path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "unique_id": "macro.shopify_source.duckdb__fivetran_convert_timezone", "macro_sql": "{% macro duckdb__fivetran_convert_timezone(column, target_tz, source_tz) -%}\n{{ return(shopify_source.postgres__fivetran_convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.shopify_source.postgres__fivetran_convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0219479, "supported_languages": null}, "macro.shopify_source.spark__fivetran_convert_timezone": {"name": "spark__fivetran_convert_timezone", "resource_type": "macro", "package_name": "shopify_source", "path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "original_file_path": "macros/fivetran_date_macros/fivetran_convert_timezone.sql", "unique_id": "macro.shopify_source.spark__fivetran_convert_timezone", "macro_sql": "{%- macro spark__fivetran_convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.022208, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.022526, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.02295, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0232809, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.023871, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0241642, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.024492, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.025098, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.026129, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.026745, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.027841, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0283399, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.028645, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.029151, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0299678, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.030366, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.030829, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.031296, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0317261, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.032128, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.032475, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.032948, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0337138, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.034143, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.034701, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.035077, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.035375, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0359511, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.036831, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.037496, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.039608, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.040216, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.041433, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.042835, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.048167, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0487459, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.049064, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0499752, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0513291, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.051868, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.052036, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.052524, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.052903, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.053074, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.05331, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0534642, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0541859, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.054865, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.055428, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0560489, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0563881, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.056725, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.057097, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0576792, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.057991, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0584488, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.058917, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0596669, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.060096, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0606148, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.060958, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0614421, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.061892, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.062616, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0629709, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.063217, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.063883, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.06522, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.065994, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.067629, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.067911, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.068037, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0692532, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.072549, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.072839, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0730538, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0736058, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.073795, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.07394, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.074101, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.074265, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0744011, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.07455, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.074846, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.075047, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.075331, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0757718, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0760498, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.076326, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.077148, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.077533, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.078099, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.078701, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0791621, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0798562, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.081128, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.081889, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.082591, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.082966, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.08358, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.083988, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.084588, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.084883, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.085234, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.08575, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.08609, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.086625, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.086932, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0870552, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0871732, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.087292, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0877419, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.088347, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.088774, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0890062, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.089476, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.090137, "supported_languages": null}, "macro.shopify.shopify_lookback": {"name": "shopify_lookback", "resource_type": "macro", "package_name": "shopify", "path": "macros/shopify_lookback.sql", "original_file_path": "macros/shopify_lookback.sql", "unique_id": "macro.shopify.shopify_lookback", "macro_sql": "{% macro shopify_lookback(from_date, datepart, interval, safety_date='2010-01-01') %}\n\n{{ adapter.dispatch('shopify_lookback', 'shopify') (from_date, datepart, interval, safety_date='2010-01-01') }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.shopify.default__shopify_lookback"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0905, "supported_languages": null}, "macro.shopify.default__shopify_lookback": {"name": "default__shopify_lookback", "resource_type": "macro", "package_name": "shopify", "path": "macros/shopify_lookback.sql", "original_file_path": "macros/shopify_lookback.sql", "unique_id": "macro.shopify.default__shopify_lookback", "macro_sql": "{% macro default__shopify_lookback(from_date, datepart, interval, safety_date='2010-01-01')  %}\n\n    {% set sql_statement %}\n        select coalesce({{ from_date }}, {{ \"'\" ~ safety_date ~ \"'\" }})\n        from {{ this }}\n    {%- endset -%}\n\n    {%- set result = dbt_utils.get_single_value(sql_statement) %}\n\n    {{ dbt.dateadd(datepart=datepart, interval=-interval, from_date_or_timestamp=\"cast('\" ~ result ~ \"' as date)\") }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_single_value", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.090878, "supported_languages": null}, "macro.shopify.shopify_partition_by_cols": {"name": "shopify_partition_by_cols", "resource_type": "macro", "package_name": "shopify", "path": "macros/shopify_partition_by_cols.sql", "original_file_path": "macros/shopify_partition_by_cols.sql", "unique_id": "macro.shopify.shopify_partition_by_cols", "macro_sql": "{% macro shopify_partition_by_cols(base_col, source_relation='source_relation') %}\n\n{{ adapter.dispatch('shopify_partition_by_cols', 'shopify') (base_col, source_relation) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.shopify.default__shopify_partition_by_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.091167, "supported_languages": null}, "macro.shopify.default__shopify_partition_by_cols": {"name": "default__shopify_partition_by_cols", "resource_type": "macro", "package_name": "shopify", "path": "macros/shopify_partition_by_cols.sql", "original_file_path": "macros/shopify_partition_by_cols.sql", "unique_id": "macro.shopify.default__shopify_partition_by_cols", "macro_sql": "{% macro default__shopify_partition_by_cols(base_col, source_relation='source_relation') %}\n    {%- if var('shopify_union_schemas', false) or var('shopify_union_databases', false) -%}\n    {{ base_col }}, {{ source_relation }}\n    {%- else %}\n    {{ base_col }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.091413, "supported_languages": null}, "macro.shopify.shopify_is_databricks_sql_warehouse": {"name": "shopify_is_databricks_sql_warehouse", "resource_type": "macro", "package_name": "shopify", "path": "macros/shopify_is_databricks_sql_warehouse.sql", "original_file_path": "macros/shopify_is_databricks_sql_warehouse.sql", "unique_id": "macro.shopify.shopify_is_databricks_sql_warehouse", "macro_sql": "{% macro shopify_is_databricks_sql_warehouse() %}\n    {% if target.type in ('databricks') %}\n        {% set re = modules.re %}\n        {% set path_match = target.http_path %}\n        {% set regex_pattern = \"sql/.+/warehouses/\" %}\n        {% set match_result = re.search(regex_pattern, path_match) %}\n        {% if match_result %}\n            {{ return(True) }}\n        {% else %}\n            {{ return(False) }}\n        {% endif %}\n    {% else %}\n        {{ return(False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.092003, "supported_languages": null}, "macro.shopify.get_metafields": {"name": "get_metafields", "resource_type": "macro", "package_name": "shopify", "path": "macros/get_metafields.sql", "original_file_path": "macros/get_metafields.sql", "unique_id": "macro.shopify.get_metafields", "macro_sql": "{% macro get_metafields(source_object, reference_values, id_column, lookup_object=\"stg_shopify__metafield\", key_field=\"metafield_reference\", key_value=\"value\", reference_field=\"owner_resource\") %}\n    {{ return(adapter.dispatch('get_metafields', 'shopify')(source_object, reference_values, id_column, lookup_object, key_field, key_value, reference_field)) }} \n{%- endmacro %}", "depends_on": {"macros": ["macro.shopify.default__get_metafields"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.09267, "supported_languages": null}, "macro.shopify.default__get_metafields": {"name": "default__get_metafields", "resource_type": "macro", "package_name": "shopify", "path": "macros/get_metafields.sql", "original_file_path": "macros/get_metafields.sql", "unique_id": "macro.shopify.default__get_metafields", "macro_sql": "{% macro default__get_metafields(source_object, reference_values, id_column, lookup_object=\"stg_shopify__metafield\", key_field=\"metafield_reference\", key_value=\"value\", reference_field=\"owner_resource\") %}\n\n{# Manually quote and join reference values #}\n{% set quoted_values = [] %}\n{% for value in reference_values %}\n    {% do quoted_values.append(\"'\" ~ value | lower | trim ~ \"'\") %}\n{% endfor %}\n{% set reference_values_clause = quoted_values | join(\", \") %}\n\n{# Get the pivot fields dynamically based on the reference values #}\n{% set pivot_fields = dbt_utils.get_column_values(\n    table=ref(lookup_object),\n    column=key_field,\n    where=\"lower(\" ~ reference_field ~ \") in (\" ~ reference_values_clause ~ \")\"\n) %}\n\n{% set source_columns = adapter.get_columns_in_relation(ref(source_object)) %}\n{% set source_column_count = source_columns | length %}\n\nwith source_table as (\n    select *\n    from {{ ref(source_object) }}\n)\n\n{% if pivot_fields is not none %},\nlookup_object as (\n    select \n        *,\n        {{ dbt_utils.pivot(\n                column=key_field, \n                values=pivot_fields, \n                agg='', \n                then_value=key_value, \n                else_value=\"null\",\n                quote_identifiers=false\n                ) \n        }}\n    from {{ ref(lookup_object) }}\n    where is_most_recent_record\n),\n\nfinal as (\n    select\n        {% for column in source_columns %}\n            source_table.{{ column.name }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n        {% for fields in pivot_fields %}\n            , max(lookup_object.{{ dbt_utils.slugify(fields) }}) as metafield_{{ dbt_utils.slugify(fields) }}\n        {% endfor %}\n    from source_table\n    left join lookup_object \n        on lookup_object.{{ reference_field }}_id = source_table.{{ id_column }}\n        and lower(lookup_object.{{ reference_field }}) in ({{ reference_values_clause }})\n    {{ dbt_utils.group_by(source_column_count) }}\n)\n\nselect *\nfrom final\n{% else %}\n\nselect *\nfrom source_table\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot", "macro.dbt_utils.slugify", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0939982, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.095915, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.096537, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.097281, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0979788, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0986362, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.099464, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0996711, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.0997791, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.101452, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.105054, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.10523, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.105302, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.105786, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.106883, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1072278, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.107469, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.107714, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.108002, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.108181, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.108366, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.108706, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1091042, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.109251, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.109393, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1095319, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.109659, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.109931, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.110743, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.111277, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1118221, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.11203, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.112233, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.112438, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.11264, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1128588, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.113079, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.113278, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1135218, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1136131, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.113698, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.113788, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.114091, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.114478, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1155908, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1161668, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.116808, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.11713, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.117256, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1173801, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.117501, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.11763, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.118422, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.118575, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.118722, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.118867, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1204531, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.120956, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1210759, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.121313, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.121553, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.121665, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.121776, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.121888, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.121996, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1223412, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1228092, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.123157, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.123328, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.123509, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.12373, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1246269, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.127506, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1278222, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.128155, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.129059, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.129535, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.129899, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.130031, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.130163, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1303082, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.13044, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.130573, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1310232, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.132061, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1324348, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.132587, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.132729, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.132868, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.132999, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1331441, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1333618, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.133449, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1335309, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.134036, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.134539, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.13469, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.135516, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1367779, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.14084, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.142035, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.142317, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.142454, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1426291, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.postgres__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.142923, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1430242, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1431549, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.143253, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1433449, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.143571, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.14366, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.143747, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.1441321, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747951349.144516, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.shopify_source._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "shopify_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.shopify_source._fivetran_synced", "block_contents": "The time when a record was last updated by Fivetran."}, "doc.shopify_source._fivetran_deleted": {"name": "_fivetran_deleted", "resource_type": "doc", "package_name": "shopify_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.shopify_source._fivetran_deleted", "block_contents": "Boolean representing whether the record was soft-deleted in Shopify."}, "doc.shopify_source.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "shopify_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.shopify_source.source_relation", "block_contents": "The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.shopify_integration_tests.consistency_discounts": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_discounts", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_discounts.sql", "original_file_path": "tests/consistency/consistency_discounts.sql", "unique_id": "test.shopify_integration_tests.consistency_discounts", "fqn": ["shopify_integration_tests", "consistency", "consistency_discounts"], "alias": "consistency_discounts", "checksum": {"name": "sha256", "checksum": "c4c0089722a912fc6859d3f23b928425253c88ad16955dc1ec30dd47328d24b8"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.5171049, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_shopify_prod.shopify__discounts\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_shopify_dev.shopify__discounts\n), \n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_orders": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_orders", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_orders.sql", "original_file_path": "tests/consistency/consistency_orders.sql", "unique_id": "test.shopify_integration_tests.consistency_orders", "fqn": ["shopify_integration_tests", "consistency", "consistency_orders"], "alias": "consistency_orders", "checksum": {"name": "sha256", "checksum": "0ab8c3335aa456106375ec248d3f309d35588f35d3654b13270a44eadb27faf6"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.532492, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_shopify_prod.shopify__orders\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_shopify_dev.shopify__orders\n), \n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_daily_shop": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_daily_shop", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_daily_shop.sql", "original_file_path": "tests/consistency/consistency_daily_shop.sql", "unique_id": "test.shopify_integration_tests.consistency_daily_shop", "fqn": ["shopify_integration_tests", "consistency", "consistency_daily_shop"], "alias": "consistency_daily_shop", "checksum": {"name": "sha256", "checksum": "c6b82febd4b38d78edcc9e3b3f8dba293d1754d7223d5c16828b5f48f01742f5"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.53511, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select\n        date_day,\n        shop_id, \n        source_relation,\n        sum(count_orders) as count_orders,\n        count(count_customers) as count_customers,\n        sum(order_adjusted_total) as order_adjusted_total,\n        sum(count_abandoned_checkouts) as count_abandoned_checkouts\n\n        {% if var('shopify_using_fulfillment_event', false) %}\n        , sum(count_fulfillment_attempted_delivery) as count_fulfillment_attempted_delivery\n        , sum(count_fulfillment_confirmed) as count_fulfillment_confirmed\n        , count(count_fulfillment_in_transit) as count_fulfillment_in_transit\n        {% endif %}\n\n    from {{ target.schema }}_shopify_prod.shopify__daily_shop\n    group by 1,2,3\n),\n\ndev as (\n    select\n        date_day,\n        shop_id, \n        source_relation,\n        sum(count_orders) as count_orders,\n        count(count_customers) as count_customers,\n        sum(order_adjusted_total) as order_adjusted_total,\n        sum(count_abandoned_checkouts) as count_abandoned_checkouts\n\n        {% if var('shopify_using_fulfillment_event', false) %}\n        , sum(count_fulfillment_attempted_delivery) as count_fulfillment_attempted_delivery\n        , sum(count_fulfillment_confirmed) as count_fulfillment_confirmed\n        , count(count_fulfillment_in_transit) as count_fulfillment_in_transit\n        {% endif %}\n\n    from {{ target.schema }}_shopify_dev.shopify__daily_shop\n    group by 1,2,3\n),\n\nfinal as (\n    select \n        prod.date_day as prod_date_day,\n        dev.date_day as dev_date_day,\n        prod.shop_id as prod_shop_id,\n        dev.shop_id as dev_shop_id,\n        prod.source_relation as prod_source_relation,\n        dev.source_relation as dev_source_relation,\n        prod.count_orders as prod_count_orders,\n        dev.count_orders as dev_count_orders,\n        prod.count_customers as prod_count_customers,\n        dev.count_customers as dev_count_customers,\n        prod.order_adjusted_total as prod_order_adjusted_total,\n        dev.order_adjusted_total as dev_order_adjusted_total,\n        prod.count_abandoned_checkouts as prod_count_abandoned_checkouts,\n        dev.count_abandoned_checkouts as dev_count_abandoned_checkouts\n\n        {% if var('shopify_using_fulfillment_event', false) %}\n        , prod.count_fulfillment_attempted_delivery as prod_count_fulfillment_attempted_delivery\n        , dev.count_fulfillment_attempted_delivery as dev_count_fulfillment_attempted_delivery\n        , prod.count_fulfillment_confirmed as prod_count_fulfillment_confirmed\n        , dev.count_fulfillment_confirmed as dev_count_fulfillment_confirmed\n        {% endif %}\n\n    from prod\n    full outer join dev \n        on dev.date_day = prod.date_day\n        and dev.shop_id = prod.shop_id\n        and dev.source_relation = prod.source_relation\n)\n\nselect *\nfrom final\nwhere \n    prod_date_day != dev_date_day or\n    prod_shop_id != dev_shop_id or\n    prod_source_relation != dev_source_relation or\n    abs(prod_count_orders - dev_count_orders) > .001 or\n    abs(prod_count_customers - dev_count_customers) > .001 or\n    abs(prod_order_adjusted_total - dev_order_adjusted_total) > .001 or\n    abs(prod_count_abandoned_checkouts - dev_count_abandoned_checkouts) > .001\n    \n    {% if var('shopify_using_fulfillment_event', false) %}\n    or abs(prod_count_fulfillment_attempted_delivery - dev_count_fulfillment_attempted_delivery) > .001\n    or abs(prod_count_fulfillment_confirmed - dev_count_fulfillment_confirmed) > .001\n    {% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_customer_emails": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_customer_emails", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_customer_emails.sql", "original_file_path": "tests/consistency/consistency_customer_emails.sql", "unique_id": "test.shopify_integration_tests.consistency_customer_emails", "fqn": ["shopify_integration_tests", "consistency", "consistency_customer_emails"], "alias": "consistency_customer_emails", "checksum": {"name": "sha256", "checksum": "f65921899974fb386942217898b874b933b185b03ba96b7b4393a21c57749faf"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.539201, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_shopify_prod.shopify__customer_emails\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_shopify_dev.shopify__customer_emails\n), \n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_inventory_levels": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_inventory_levels", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_inventory_levels.sql", "original_file_path": "tests/consistency/consistency_inventory_levels.sql", "unique_id": "test.shopify_integration_tests.consistency_inventory_levels", "fqn": ["shopify_integration_tests", "consistency", "consistency_inventory_levels"], "alias": "consistency_inventory_levels", "checksum": {"name": "sha256", "checksum": "5c4bf90e9896cd512f8251e7b55deaf76564f860f24c9332b2379854562145fc"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.5416682, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_shopify_prod.shopify__inventory_levels\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_shopify_dev.shopify__inventory_levels\n), \n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_transactions": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_transactions", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_transactions.sql", "original_file_path": "tests/consistency/consistency_transactions.sql", "unique_id": "test.shopify_integration_tests.consistency_transactions", "fqn": ["shopify_integration_tests", "consistency", "consistency_transactions"], "alias": "consistency_transactions", "checksum": {"name": "sha256", "checksum": "4a35a742a91f9610e5f2f43d798aa32b4a7a03316db67fa95804ae894a6bddbd"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.544273, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_shopify_prod.shopify__transactions\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_shopify_dev.shopify__transactions\n), \n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_customer_cohorts": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_customer_cohorts", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_customer_cohorts.sql", "original_file_path": "tests/consistency/consistency_customer_cohorts.sql", "unique_id": "test.shopify_integration_tests.consistency_customer_cohorts", "fqn": ["shopify_integration_tests", "consistency", "consistency_customer_cohorts"], "alias": "consistency_customer_cohorts", "checksum": {"name": "sha256", "checksum": "389c12079464cf20fe1f6888a7e40c8bb469148349a20931a8ba997e2f0023fc"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.547062, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n\n    select\n        customer_cohort_id, \n        source_relation,\n        total_price_lifetime,\n        order_count_lifetime,\n        line_item_count_lifetime\n    from {{ target.schema }}_shopify_prod.shopify__customer_cohorts\n),\n\ndev as (\n\n    select\n        customer_cohort_id, \n        source_relation,\n        total_price_lifetime,\n        order_count_lifetime,\n        line_item_count_lifetime\n    from {{ target.schema }}_shopify_dev.shopify__customer_cohorts \n),\n\nfinal as (\n\n    select \n        prod.customer_cohort_id as prod_customer_cohort_id,\n        dev.customer_cohort_id as dev_customer_cohort_id,\n        prod.source_relation as prod_source_relation,\n        dev.source_relation as dev_source_relation,\n        prod.total_price_lifetime as prod_total_price_lifetime,\n        dev.total_price_lifetime as dev_total_price_lifetime,\n        prod.order_count_lifetime as prod_order_count_lifetime,\n        dev.order_count_lifetime as dev_order_count_lifetime,\n        prod.line_item_count_lifetime as prod_line_item_count_lifetime,\n        dev.line_item_count_lifetime as dev_line_item_count_lifetime\n    from prod\n    full outer join dev \n        on dev.customer_cohort_id = prod.customer_cohort_id\n        and dev.source_relation = prod.source_relation\n)\n\nselect *\nfrom final\nwhere \n    prod_customer_cohort_id != dev_customer_cohort_id or \n    prod_source_relation != dev_source_relation or\n    abs(prod_total_price_lifetime - dev_total_price_lifetime) > .001 or\n    abs(prod_order_count_lifetime - dev_order_count_lifetime) > .001 or\n    abs(prod_line_item_count_lifetime - dev_line_item_count_lifetime) > .001", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_line_item_enhanced": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_line_item_enhanced", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_line_item_enhanced.sql", "original_file_path": "tests/consistency/consistency_line_item_enhanced.sql", "unique_id": "test.shopify_integration_tests.consistency_line_item_enhanced", "fqn": ["shopify_integration_tests", "consistency", "consistency_line_item_enhanced"], "alias": "consistency_line_item_enhanced", "checksum": {"name": "sha256", "checksum": "bafda328d8951e5c1315715ae2af2b6db591c008cfb2e3e87102e102a927127d"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.5498939, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false) and var('shopify__standardized_billing_model_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_shopify_prod.shopify__line_item_enhanced\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_shopify_dev.shopify__line_item_enhanced\n), \n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_line_item_enhanced_count": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_line_item_enhanced_count", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_line_item_enhanced_count.sql", "original_file_path": "tests/consistency/consistency_line_item_enhanced_count.sql", "unique_id": "test.shopify_integration_tests.consistency_line_item_enhanced_count", "fqn": ["shopify_integration_tests", "consistency", "consistency_line_item_enhanced_count"], "alias": "consistency_line_item_enhanced_count", "checksum": {"name": "sha256", "checksum": "5966fa4f5d6392d55c6776983375aba21f63ec6d2bce09807769e2f807973074"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.553377, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false) and var('shopify__standardized_billing_model_enabled', false)\n) }}\n\n-- this test is to make sure the rows counts are the same between versions\nwith prod as (\n    select count(*) as prod_rows\n    from {{ target.schema }}_shopify_prod.shopify__line_item_enhanced\n),\n\ndev as (\n    select count(*) as dev_rows\n    from {{ target.schema }}_shopify_dev.shopify__line_item_enhanced\n)\n\n-- test will return values and fail if the row counts don't match\nselect *\nfrom prod\njoin dev\n    on prod.prod_rows != dev.dev_rows", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_customer_email_cohorts": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_customer_email_cohorts", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_customer_email_cohorts.sql", "original_file_path": "tests/consistency/consistency_customer_email_cohorts.sql", "unique_id": "test.shopify_integration_tests.consistency_customer_email_cohorts", "fqn": ["shopify_integration_tests", "consistency", "consistency_customer_email_cohorts"], "alias": "consistency_customer_email_cohorts", "checksum": {"name": "sha256", "checksum": "9c68a37c8316395c4e9454f955bf9a88a8ec0f0a1b8e8b92f0324c30118b0a38"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.556185, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n\n    select\n        customer_cohort_id, \n        source_relation,\n        total_price_lifetime,\n        order_count_lifetime,\n        line_item_count_lifetime\n    from {{ target.schema }}_shopify_prod.shopify__customer_email_cohorts\n),\n\ndev as (\n\n    select\n        customer_cohort_id, \n        source_relation,\n        total_price_lifetime,\n        order_count_lifetime,\n        line_item_count_lifetime\n    from {{ target.schema }}_shopify_dev.shopify__customer_email_cohorts \n),\n\nfinal as (\n\n    select \n        prod.customer_cohort_id as prod_customer_cohort_id,\n        dev.customer_cohort_id as dev_customer_cohort_id,\n        prod.source_relation as prod_source_relation,\n        dev.source_relation as dev_source_relation,\n        prod.total_price_lifetime as prod_total_price_lifetime,\n        dev.total_price_lifetime as dev_total_price_lifetime,\n        prod.order_count_lifetime as prod_order_count_lifetime,\n        dev.order_count_lifetime as dev_order_count_lifetime,\n        prod.line_item_count_lifetime as prod_line_item_count_lifetime,\n        dev.line_item_count_lifetime as dev_line_item_count_lifetime\n    from prod\n    full outer join dev \n        on dev.customer_cohort_id = prod.customer_cohort_id\n        and dev.source_relation = prod.source_relation\n)\n\nselect *\nfrom final\nwhere \n    prod_customer_cohort_id != dev_customer_cohort_id or \n    prod_source_relation != dev_source_relation or\n    abs(prod_total_price_lifetime - dev_total_price_lifetime) > .001 or\n    abs(prod_order_count_lifetime - dev_order_count_lifetime) > .001 or\n    abs(prod_line_item_count_lifetime - dev_line_item_count_lifetime) > .001", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_order_lines": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_order_lines", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_order_lines.sql", "original_file_path": "tests/consistency/consistency_order_lines.sql", "unique_id": "test.shopify_integration_tests.consistency_order_lines", "fqn": ["shopify_integration_tests", "consistency", "consistency_order_lines"], "alias": "consistency_order_lines", "checksum": {"name": "sha256", "checksum": "0a6491b31602ef2fecc145804b8b8f386801aba35815ea3dc70e4bc0aaf5c3d9"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.558777, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_shopify_prod.shopify__order_lines\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_shopify_dev.shopify__order_lines\n), \n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.consistency_customers": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "consistency_customers", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "consistency/consistency_customers.sql", "original_file_path": "tests/consistency/consistency_customers.sql", "unique_id": "test.shopify_integration_tests.consistency_customers", "fqn": ["shopify_integration_tests", "consistency", "consistency_customers"], "alias": "consistency_customers", "checksum": {"name": "sha256", "checksum": "b585f5c5f4001fd7febda99275ce6e83ccc77d28d5113615025a883a10b3fe75"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.561362, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_shopify_prod.shopify__customers\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_shopify_dev.shopify__customers\n), \n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.horizontal_integrity_daily_shop_orders": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "horizontal_integrity_daily_shop_orders", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "integrity/horizontal_integrity_daily_shop_orders.sql", "original_file_path": "tests/integrity/horizontal_integrity_daily_shop_orders.sql", "unique_id": "test.shopify_integration_tests.horizontal_integrity_daily_shop_orders", "fqn": ["shopify_integration_tests", "integrity", "horizontal_integrity_daily_shop_orders"], "alias": "horizontal_integrity_daily_shop_orders", "checksum": {"name": "sha256", "checksum": "addd76b5760975069f87aac715bd3ade9a52af4049104f635902fd87b8b41b1a"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.563856, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith orders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n),\n\norder_metrics as (\n\n    select \n        source_relation,\n        cast({{ dbt.date_trunc('day','created_timestamp') }} as date) as date_day,\n        count(distinct order_id) as count_orders,\n        sum(order_adjusted_total) as order_adjusted_total\n\n    from orders\n    where created_timestamp > '2020-01-01' and created_timestamp < '2024-06-10'\n    group by 1,2\n),\n\ndaily_shop as (\n\n    select *\n    from {{ ref('shopify__daily_shop') }}\n),\n\ndaily_shop_metrics as (\n\n    select \n        source_relation,\n        date_day,\n        sum(count_orders) as count_orders,\n        sum(order_adjusted_total) as order_adjusted_total\n\n    from daily_shop\n    where date_day >= '2020-01-01' and date_day < '2024-06-10'\n    group by 1,2\n),\n\nfinal as (\n\n    select\n        daily_shop_metrics.source_relation,\n        coalesce(daily_shop_metrics.count_orders, 0) as daily_shop_count_orders,\n        coalesce(order_metrics.count_orders, 0) as order_count_orders,\n        coalesce(daily_shop_metrics.order_adjusted_total, 0) as daily_shop_order_adjusted_total,\n        coalesce(order_metrics.order_adjusted_total, 0) as order_order_adjusted_total\n\n    from daily_shop_metrics\n    full outer join order_metrics\n        on daily_shop_metrics.source_relation = order_metrics.source_relation\n        and daily_shop_metrics.date_day = order_metrics.date_day\n)\n\nselect *\nfrom final\nwhere \n    abs(daily_shop_count_orders - order_count_orders) > 0 or\n    abs(daily_shop_order_adjusted_total - order_order_adjusted_total) > .1", "language": "sql", "refs": [{"name": "shopify__orders", "package": null, "version": null}, {"name": "shopify__daily_shop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.vertical_integrity_daily_shop_fulfillment": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "vertical_integrity_daily_shop_fulfillment", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "integrity/vertical_integrity_daily_shop_fulfillment.sql", "original_file_path": "tests/integrity/vertical_integrity_daily_shop_fulfillment.sql", "unique_id": "test.shopify_integration_tests.vertical_integrity_daily_shop_fulfillment", "fqn": ["shopify_integration_tests", "integrity", "vertical_integrity_daily_shop_fulfillment"], "alias": "vertical_integrity_daily_shop_fulfillment", "checksum": {"name": "sha256", "checksum": "ba5dfc5af503b2012b977cd000daf131bf61c08241aad583df03926212225016"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.568417, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n-- test will only run if shopify_using_fulfillment_event is set to True\n\nwith source as (\n\n    select *\n    from {{ ref('stg_shopify__fulfillment_event') }}\n),\n\nsource_metrics as (\n\n    select \n        source_relation,\n        cast({{ dbt.date_trunc('day','happened_at') }} as date) as date_day,\n        shop_id,\n        count(distinct case when status = 'delayed' then fulfillment_id end) as count_fulfillment_delayed,\n        count(distinct case when status = 'in_transit' then fulfillment_id end) as count_fulfillment_in_transit,\n        count(distinct case when status = 'confirmed' then fulfillment_id end) as count_fulfillment_confirmed,\n        count(distinct case when status = 'delivered' then fulfillment_id end) as count_fulfillment_delivered\n\n    from source\n    where happened_at > '2020-01-01' and happened_at < '2024-06-10'\n    group by 1,2,3\n),\n\nmodel as (\n\n    select *\n    from {{ ref('shopify__daily_shop') }}\n),\n\nmodel_metrics as (\n\n    select \n        source_relation,\n        date_day,\n        shop_id,\n        sum(count_fulfillment_delayed) as count_fulfillment_delayed,\n        sum(count_fulfillment_in_transit) as count_fulfillment_in_transit,\n        sum(count_fulfillment_confirmed) as count_fulfillment_confirmed,\n        sum(count_fulfillment_delivered) as count_fulfillment_delivered\n\n    from model\n    where date_day >= '2020-01-01' and date_day < '2024-06-10'\n    group by 1,2,3\n),\n\nfinal as (\n\n    select\n        model_metrics.source_relation,\n        model_metrics.shop_id as model_shop_id,\n        source_metrics.shop_id as source_shop_id,\n        model_metrics.date_day as model_date_day,\n        source_metrics.date_day as source_date_day,\n        coalesce(model_metrics.count_fulfillment_delayed, 0) as model_count_fulfillment_delayed,\n        coalesce(source_metrics.count_fulfillment_delayed, 0) as source_count_fulfillment_delayed,\n        coalesce(model_metrics.count_fulfillment_in_transit, 0) as model_count_fulfillment_in_transit,\n        coalesce(source_metrics.count_fulfillment_in_transit, 0) as source_count_fulfillment_in_transit,\n        coalesce(model_metrics.count_fulfillment_confirmed, 0) as model_count_fulfillment_confirmed,\n        coalesce(source_metrics.count_fulfillment_confirmed, 0) as source_count_fulfillment_confirmed,\n        coalesce(model_metrics.count_fulfillment_delivered, 0) as model_count_fulfillment_delivered,\n        coalesce(source_metrics.count_fulfillment_delivered, 0) as source_count_fulfillment_delivered\n\n    from model_metrics\n    full outer join source_metrics\n        on model_metrics.source_relation = source_metrics.source_relation\n        and model_metrics.shop_id = source_metrics.shop_id\n        and model_metrics.date_day = source_metrics.date_day\n)\n\nselect *\nfrom final\nwhere \nmodel_count_fulfillment_delayed != source_count_fulfillment_delayed or\nmodel_count_fulfillment_in_transit != source_count_fulfillment_in_transit or\nmodel_count_fulfillment_confirmed != source_count_fulfillment_confirmed or\nmodel_count_fulfillment_delivered != source_count_fulfillment_delivered", "language": "sql", "refs": [{"name": "stg_shopify__fulfillment_event", "package": null, "version": null}, {"name": "shopify__daily_shop", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.vertical_integrity_discounts": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "vertical_integrity_discounts", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "integrity/vertical_integrity_discounts.sql", "original_file_path": "tests/integrity/vertical_integrity_discounts.sql", "unique_id": "test.shopify_integration_tests.vertical_integrity_discounts", "fqn": ["shopify_integration_tests", "integrity", "vertical_integrity_discounts"], "alias": "vertical_integrity_discounts", "checksum": {"name": "sha256", "checksum": "591dfe08097b58fd9433339a17d0388c891a6d3eef65c042f13c227737e9ff65"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.5715468, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith discount_redeem_code as (\n\n    select \n        code,\n        discount_code_id,\n        source_relation\n    from {{ ref('stg_shopify__discount_redeem_code') }} \n    group by 1, 2, 3\n),\n\ndiscount_codes_unioned as (\n\n    select\n        discount_code_id,\n        source_relation \n    from {{ ref('stg_shopify__discount_code_basic') }} \n    group by 1, 2\n\n    union all\n\n    select\n        discount_code_id,\n        source_relation \n    from {{ ref('stg_shopify__discount_code_bxgy') }} \n    group by 1, 2\n\n    union all\n\n    select\n        discount_code_id,\n        source_relation \n    from {{ ref('stg_shopify__discount_code_free_shipping') }} \n    group by 1, 2\n\n    {% if var('shopify_using_discount_code_app', False) %}\n\n    union all\n \n    select\n        discount_code_id,\n        source_relation \n    from {{ ref('stg_shopify__discount_code_app') }} \n    group by 1, 2\n    {% endif %}\n),\n\ndiscount_codes_source as (\n    \n    select \n        discount_redeem_code.code, \n        discount_redeem_code.source_relation,\n        count(*) as code_count_source\n    from discount_redeem_code\n    left join discount_codes_unioned\n        on discount_redeem_code.discount_code_id = discount_codes_unioned.discount_code_id\n        and discount_redeem_code.source_relation = discount_codes_unioned.source_relation\n    group by 1, 2\n),\n\n\ndiscount_codes_end as (\n\n    select \n        code, \n        source_relation,\n        count(*) as code_count_end\n    from {{ ref('shopify__discounts') }}\n    group by 1, 2\n),\n\n\nfinal as (\n\n    select \n        discount_codes_source.code,\n        discount_codes_source.source_relation,\n        coalesce(discount_codes_source.code_count_source, 0) as code_count_source,\n        coalesce(discount_codes_end.code_count_end, 0) as code_count_end\n    from discount_codes_source\n    full outer join discount_codes_end\n        on discount_codes_source.code = discount_codes_end.code\n        and discount_codes_source.source_relation = discount_codes_end.source_relation\n)\n\nselect *\nfrom final\nwhere code_count_source != code_count_end", "language": "sql", "refs": [{"name": "stg_shopify__discount_redeem_code", "package": null, "version": null}, {"name": "stg_shopify__discount_code_basic", "package": null, "version": null}, {"name": "stg_shopify__discount_code_bxgy", "package": null, "version": null}, {"name": "stg_shopify__discount_code_free_shipping", "package": null, "version": null}, {"name": "stg_shopify__discount_code_app", "package": null, "version": null}, {"name": "shopify__discounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.vertical_integrity_customer_cohorts": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "vertical_integrity_customer_cohorts", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "integrity/vertical_integrity_customer_cohorts.sql", "original_file_path": "tests/integrity/vertical_integrity_customer_cohorts.sql", "unique_id": "test.shopify_integration_tests.vertical_integrity_customer_cohorts", "fqn": ["shopify_integration_tests", "integrity", "vertical_integrity_customer_cohorts"], "alias": "vertical_integrity_customer_cohorts", "checksum": {"name": "sha256", "checksum": "19553b1bce28d0577a330dc5544f21b9326b91d673b50fdfdc0ca5980b17f7ff"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.5751832, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith calendar as (\n\n    select *\n    from {{ ref('shopify__calendar') }}\n    where cast({{ dbt.date_trunc('month','date_day') }} as date) = date_day\n\n), \n\ncustomers as (\n\n    select *\n    from {{ ref('shopify__customers') }}\n\n), \n\norders as (\n\n    select *\n    from {{ ref('shopify__orders') }}\n\n), \n\ncustomer_cohort_source as (\n\n    select \n        customers.source_relation,\n        count(*) as source_rows \n    from calendar\n    inner join customers\n        on cast({{ dbt.date_trunc('month', 'first_order_timestamp') }} as date) <= calendar.date_day\n    group by 1\n),\n\ncustomer_cohort_end as (\n\n    select \n        source_relation,\n        count(*) as end_rows\n    from {{ ref('shopify__customer_cohorts') }}\n    group by 1\n),\n\nfinal as (\n    select\n        customer_cohort_source.source_relation,\n        source_rows,\n        end_rows\n    from customer_cohort_source\n    join customer_cohort_end\n    on customer_cohort_source.source_relation = customer_cohort_end.source_relation\n    where customer_cohort_source.source_rows != customer_cohort_end.end_rows\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "shopify__calendar", "package": null, "version": null}, {"name": "shopify__customers", "package": null, "version": null}, {"name": "shopify__orders", "package": null, "version": null}, {"name": "shopify__customer_cohorts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.integrity_inventory_level": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "integrity_inventory_level", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "integrity/integrity_inventory_level.sql", "original_file_path": "tests/integrity/integrity_inventory_level.sql", "unique_id": "test.shopify_integration_tests.integrity_inventory_level", "fqn": ["shopify_integration_tests", "integrity", "integrity_inventory_level"], "alias": "integrity_inventory_level", "checksum": {"name": "sha256", "checksum": "2f633fb0d91b0bebe0152b97a141df7481c08e0df5557ee4962f8d0ebe7bd7ee"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.5788229, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith source as (\n    select\n        count(*) as source_count\n    from {{ target.schema }}_shopify_dev.stg_shopify__inventory_level as il\n    join {{ target.schema }}_shopify_dev.stg_shopify__inventory_item as ii\n        on il.inventory_item_id = ii.inventory_item_id \n        and il.source_relation = ii.source_relation \n    join {{ target.schema }}_shopify_dev.stg_shopify__location as lo\n        on il.location_id = lo.location_id \n        and il.source_relation = lo.source_relation \n    join {{ target.schema }}_shopify_dev.stg_shopify__product_variant as pv\n        on il.inventory_item_id = pv.inventory_item_id\n        and il.source_relation = pv.source_relation\n),\n\ntransform as (\n    select\n        count(*) as transform_count\n    from {{ target.schema }}_shopify_dev.shopify__inventory_levels\n), \n\ncompare as (\n    select *\n    from source\n    cross join transform\n)\n\nselect *\nfrom compare\nwhere source_count != transform_count", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.vertical_integrity_line_item_enhanced": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "vertical_integrity_line_item_enhanced", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "integrity/vertical_integrity_line_item_enhanced.sql", "original_file_path": "tests/integrity/vertical_integrity_line_item_enhanced.sql", "unique_id": "test.shopify_integration_tests.vertical_integrity_line_item_enhanced", "fqn": ["shopify_integration_tests", "integrity", "vertical_integrity_line_item_enhanced"], "alias": "vertical_integrity_line_item_enhanced", "checksum": {"name": "sha256", "checksum": "efc2b1e0ac6bc26d2581903d83d1d56be172c14cfff1d8d6d7fa6b6eb160c7f7"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.582059, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false) and var('shopify__standardized_billing_model_enabled', false)\n) }}\n\n-- this test is to make sure there is no fanout between the staging order_line_table and the line_item_enhanced model.\nwith stg_order_line as (\n    select\n        1 as join_key,\n        count(*) as order_line_count,\n        count(distinct order_id) as order_count\n    from {{ ref('stg_shopify__order_line') }}\n),\n\nline_item_enhanced as (\n    select\n        1 as join_key,\n        count(*) as line_item_enhanced_count\n    from {{ ref('shopify__line_item_enhanced') }}\n),\n\n-- test will return values and fail if the row counts don't match\n\nfinal as (\n    select \n        stg_order_line.join_key,\n        stg_order_line.order_line_count + stg_order_line.order_count as total_line_and_order_count,\n        line_item_enhanced.line_item_enhanced_count\n    from stg_order_line\n    join line_item_enhanced\n        on stg_order_line.join_key = line_item_enhanced.join_key\n) \n\nselect *\nfrom final\nwhere total_line_and_order_count != line_item_enhanced_count", "language": "sql", "refs": [{"name": "stg_shopify__order_line", "package": null, "version": null}, {"name": "shopify__line_item_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.shopify_integration_tests.integrity_customers": [{"database": "postgres", "schema": "shopify_integration_tests_17_dbt_test__audit", "name": "integrity_customers", "resource_type": "test", "package_name": "shopify_integration_tests", "path": "integrity/integrity_customers.sql", "original_file_path": "tests/integrity/integrity_customers.sql", "unique_id": "test.shopify_integration_tests.integrity_customers", "fqn": ["shopify_integration_tests", "integrity", "integrity_customers"], "alias": "integrity_customers", "checksum": {"name": "sha256", "checksum": "690ac16cf903e5fd89a08680246fd495bf3fbdc94a622f0b9b1ce6f6988d8a74"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": "fivetran_validations", "enabled": false}, "created_at": 1747951349.586119, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith source as (\n    select\n        customer_id,\n        count(*) as source_customer_tag_count\n    from {{ target.schema }}_shopify_dev.stg_shopify__customer_tag\n    group by 1\n),\n\ntransform as (\n    select\n        customer_id,\n        array_length(split(customer_tags, ',')) as transform_customer_tag_count -- Only BigQuery compatible for the time being\n    from {{ target.schema }}_shopify_dev.shopify__customers\n    where customer_tags is not null\n    group by customer_id, customer_tags\n), \n\ncompare as (\n    select\n        source.customer_id,\n        source.source_customer_tag_count,\n        transform.transform_customer_tag_count\n    from source\n    full outer join transform\n    on source.customer_id = transform.customer_id\n    where source.source_customer_tag_count != transform.transform_customer_tag_count\n    )\n\nselect *\nfrom compare", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}]}, "parent_map": {"seed.shopify_integration_tests.shopify_order_data": [], "seed.shopify_integration_tests.shopify_product_variant_media_data": [], "seed.shopify_integration_tests.shopify_order_shipping_line_data": [], "seed.shopify_integration_tests.shopify_fulfillment_event_data": [], "seed.shopify_integration_tests.shopify_order_url_tag_data": [], "seed.shopify_integration_tests.shopify_order_line_refund_data": [], "seed.shopify_integration_tests.shopify_discount_code_bxgy_data": [], "seed.shopify_integration_tests.shopify_order_adjustment_data": [], "seed.shopify_integration_tests.shopify_product_variant_data": [], "seed.shopify_integration_tests.shopify_refund_data": [], "seed.shopify_integration_tests.shopify_transaction_data": [], "seed.shopify_integration_tests.shopify_inventory_quantity_data": [], "seed.shopify_integration_tests.shopify_inventory_item_data": [], "seed.shopify_integration_tests.shopify_product_data": [], "seed.shopify_integration_tests.shopify_location_data": [], "seed.shopify_integration_tests.shopify_metafield_data": [], "seed.shopify_integration_tests.shopify_media_data": [], "seed.shopify_integration_tests.shopify_discount_application_data": [], "seed.shopify_integration_tests.shopify_order_note_attribute_data": [], "seed.shopify_integration_tests.shopify_order_discount_code_data": [], "seed.shopify_integration_tests.shopify_discount_code_free_shipping_data": [], "seed.shopify_integration_tests.shopify_product_tag_data": [], "seed.shopify_integration_tests.shopify_collection_product_data": [], "seed.shopify_integration_tests.shopify_order_shipping_tax_line_data": [], "seed.shopify_integration_tests.shopify_product_media_data": [], "seed.shopify_integration_tests.shopify_collection_data": [], "seed.shopify_integration_tests.shopify_order_tag_data": [], "seed.shopify_integration_tests.shopify_abandoned_checkout_shipping_line_data": [], "seed.shopify_integration_tests.shopify_discount_code_basic_data": [], "seed.shopify_integration_tests.shopify_discount_allocation_data": [], "seed.shopify_integration_tests.shopify_shop_data": [], "seed.shopify_integration_tests.shopify_discount_redeem_code_data": [], "seed.shopify_integration_tests.shopify_abandoned_checkout_discount_code_data": [], "seed.shopify_integration_tests.shopify_abandoned_checkout_data": [], "seed.shopify_integration_tests.shopify_media_image_data": [], "seed.shopify_integration_tests.shopify_fulfillment_data": [], "seed.shopify_integration_tests.shopify_customer_tag_data": [], "seed.shopify_integration_tests.shopify_discount_code_app_data": [], "seed.shopify_integration_tests.shopify_customer_data": [], "seed.shopify_integration_tests.shopify_order_line_data": [], "seed.shopify_integration_tests.shopify_tax_line_data": [], "seed.shopify_integration_tests.shopify_inventory_level_data": [], "seed.shopify_integration_tests.shopify_tender_transaction_data": [], "model.shopify_source.stg_shopify__customer_tag": ["model.shopify_source.stg_shopify__customer_tag_tmp"], "model.shopify_source.stg_shopify__order_line": ["model.shopify_source.stg_shopify__order_line_tmp"], "model.shopify_source.stg_shopify__discount_code_bxgy": ["model.shopify_source.stg_shopify__discount_code_bxgy_tmp"], "model.shopify_source.stg_shopify__tender_transaction": ["model.shopify_source.stg_shopify__tender_transaction_tmp"], "model.shopify_source.stg_shopify__metafield": ["model.shopify_source.stg_shopify__metafield_tmp"], "model.shopify_source.stg_shopify__refund": ["model.shopify_source.stg_shopify__refund_tmp"], "model.shopify_source.stg_shopify__product": ["model.shopify_source.stg_shopify__product_tmp"], "model.shopify_source.stg_shopify__tax_line": ["model.shopify_source.stg_shopify__tax_line_tmp"], "model.shopify_source.stg_shopify__discount_application": ["model.shopify_source.stg_shopify__discount_application_tmp"], "model.shopify_source.stg_shopify__product_variant": ["model.shopify_source.stg_shopify__product_variant_tmp"], "model.shopify_source.stg_shopify__discount_code_basic": ["model.shopify_source.stg_shopify__discount_code_basic_tmp"], "model.shopify_source.stg_shopify__order_shipping_line": ["model.shopify_source.stg_shopify__order_shipping_line_tmp"], "model.shopify_source.stg_shopify__inventory_item": ["model.shopify_source.stg_shopify__inventory_item_tmp"], "model.shopify_source.stg_shopify__order": ["model.shopify_source.stg_shopify__order_tmp"], "model.shopify_source.stg_shopify__abandoned_checkout_discount_code": ["model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp"], "model.shopify_source.stg_shopify__discount_code_app": ["model.shopify_source.stg_shopify__discount_code_app_tmp"], "model.shopify_source.stg_shopify__product_media": ["model.shopify_source.stg_shopify__product_media_tmp"], "model.shopify_source.stg_shopify__product_tag": ["model.shopify_source.stg_shopify__product_tag_tmp"], "model.shopify_source.stg_shopify__order_note_attribute": ["model.shopify_source.stg_shopify__order_note_attribute_tmp"], "model.shopify_source.stg_shopify__discount_allocation": ["model.shopify_source.stg_shopify__discount_allocation_tmp"], "model.shopify_source.stg_shopify__fulfillment_event": ["model.shopify_source.stg_shopify__fulfillment_event_tmp"], "model.shopify_source.stg_shopify__collection": ["model.shopify_source.stg_shopify__collection_tmp"], "model.shopify_source.stg_shopify__collection_product": ["model.shopify_source.stg_shopify__collection_product_tmp"], "model.shopify_source.stg_shopify__inventory_level": ["model.shopify_source.stg_shopify__inventory_level_tmp"], "model.shopify_source.stg_shopify__media": ["model.shopify_source.stg_shopify__media_tmp"], "model.shopify_source.stg_shopify__order_shipping_tax_line": ["model.shopify_source.stg_shopify__order_shipping_tax_line_tmp"], "model.shopify_source.stg_shopify__transaction": ["model.shopify_source.stg_shopify__transaction_tmp"], "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line": ["model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp"], "model.shopify_source.stg_shopify__order_adjustment": ["model.shopify_source.stg_shopify__order_adjustment_tmp"], "model.shopify_source.stg_shopify__customer": ["model.shopify_source.stg_shopify__customer_tmp"], "model.shopify_source.stg_shopify__location": ["model.shopify_source.stg_shopify__location_tmp"], "model.shopify_source.stg_shopify__media_image": ["model.shopify_source.stg_shopify__media_image_tmp"], "model.shopify_source.stg_shopify__shop": ["model.shopify_source.stg_shopify__shop_tmp"], "model.shopify_source.stg_shopify__order_line_refund": ["model.shopify_source.stg_shopify__order_line_refund_tmp"], "model.shopify_source.stg_shopify__order_discount_code": ["model.shopify_source.stg_shopify__order_discount_code_tmp"], "model.shopify_source.stg_shopify__product_variant_media": ["model.shopify_source.stg_shopify__product_variant_media_tmp"], "model.shopify_source.stg_shopify__order_tag": ["model.shopify_source.stg_shopify__order_tag_tmp"], "model.shopify_source.stg_shopify__inventory_quantity": ["model.shopify_source.stg_shopify__inventory_quantity_tmp"], "model.shopify_source.stg_shopify__abandoned_checkout": ["model.shopify_source.stg_shopify__abandoned_checkout_tmp"], "model.shopify_source.stg_shopify__discount_redeem_code": ["model.shopify_source.stg_shopify__discount_redeem_code_tmp"], "model.shopify_source.stg_shopify__order_url_tag": ["model.shopify_source.stg_shopify__order_url_tag_tmp"], "model.shopify_source.stg_shopify__fulfillment": ["model.shopify_source.stg_shopify__fulfillment_tmp"], "model.shopify_source.stg_shopify__discount_code_free_shipping": ["model.shopify_source.stg_shopify__discount_code_free_shipping_tmp"], "model.shopify_source.stg_shopify__order_shipping_line_tmp": ["source.shopify_source.shopify.order_shipping_line"], "model.shopify_source.stg_shopify__discount_redeem_code_tmp": ["source.shopify_source.shopify.discount_redeem_code"], "model.shopify_source.stg_shopify__customer_tmp": ["source.shopify_source.shopify.customer"], "model.shopify_source.stg_shopify__discount_code_free_shipping_tmp": ["source.shopify_source.shopify.discount_code_free_shipping"], "model.shopify_source.stg_shopify__discount_application_tmp": ["source.shopify_source.shopify.discount_application"], "model.shopify_source.stg_shopify__order_note_attribute_tmp": ["source.shopify_source.shopify.order_note_attribute"], "model.shopify_source.stg_shopify__product_variant_media_tmp": ["source.shopify_source.shopify.product_variant_media"], "model.shopify_source.stg_shopify__order_line_tmp": ["source.shopify_source.shopify.order_line"], "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp": ["source.shopify_source.shopify.order_shipping_tax_line"], "model.shopify_source.stg_shopify__inventory_quantity_tmp": ["source.shopify_source.shopify.inventory_quantity"], "model.shopify_source.stg_shopify__inventory_level_tmp": ["source.shopify_source.shopify.inventory_level"], "model.shopify_source.stg_shopify__order_discount_code_tmp": ["source.shopify_source.shopify.order_discount_code"], "model.shopify_source.stg_shopify__discount_code_bxgy_tmp": ["source.shopify_source.shopify.discount_code_bxgy"], "model.shopify_source.stg_shopify__tax_line_tmp": ["source.shopify_source.shopify.tax_line"], "model.shopify_source.stg_shopify__shop_tmp": ["source.shopify_source.shopify.shop"], "model.shopify_source.stg_shopify__media_tmp": ["source.shopify_source.shopify.media"], "model.shopify_source.stg_shopify__order_url_tag_tmp": ["source.shopify_source.shopify.order_url_tag"], "model.shopify_source.stg_shopify__discount_code_basic_tmp": ["source.shopify_source.shopify.discount_code_basic"], "model.shopify_source.stg_shopify__media_image_tmp": ["source.shopify_source.shopify.media_image"], "model.shopify_source.stg_shopify__fulfillment_tmp": ["source.shopify_source.shopify.fulfillment"], "model.shopify_source.stg_shopify__collection_tmp": ["source.shopify_source.shopify.collection"], "model.shopify_source.stg_shopify__refund_tmp": ["source.shopify_source.shopify.refund"], "model.shopify_source.stg_shopify__discount_code_app_tmp": ["source.shopify_source.shopify.discount_code_app"], "model.shopify_source.stg_shopify__fulfillment_event_tmp": ["source.shopify_source.shopify.fulfillment_event"], "model.shopify_source.stg_shopify__product_tmp": ["source.shopify_source.shopify.product"], "model.shopify_source.stg_shopify__order_adjustment_tmp": ["source.shopify_source.shopify.order_adjustment"], "model.shopify_source.stg_shopify__inventory_item_tmp": ["source.shopify_source.shopify.inventory_item"], "model.shopify_source.stg_shopify__order_tag_tmp": ["source.shopify_source.shopify.order_tag"], "model.shopify_source.stg_shopify__product_tag_tmp": ["source.shopify_source.shopify.product_tag"], "model.shopify_source.stg_shopify__order_line_refund_tmp": ["source.shopify_source.shopify.order_line_refund"], "model.shopify_source.stg_shopify__customer_tag_tmp": ["source.shopify_source.shopify.customer_tag"], "model.shopify_source.stg_shopify__tender_transaction_tmp": ["source.shopify_source.shopify.tender_transaction"], "model.shopify_source.stg_shopify__transaction_tmp": ["source.shopify_source.shopify.transaction"], "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp": ["source.shopify_source.shopify.abandoned_checkout_discount_code"], "model.shopify_source.stg_shopify__product_variant_tmp": ["source.shopify_source.shopify.product_variant"], "model.shopify_source.stg_shopify__abandoned_checkout_tmp": ["source.shopify_source.shopify.abandoned_checkout"], "model.shopify_source.stg_shopify__order_tmp": ["source.shopify_source.shopify.order"], "model.shopify_source.stg_shopify__discount_allocation_tmp": ["source.shopify_source.shopify.discount_allocation"], "model.shopify_source.stg_shopify__product_media_tmp": ["source.shopify_source.shopify.product_media"], "model.shopify_source.stg_shopify__metafield_tmp": ["source.shopify_source.shopify.metafield"], "model.shopify_source.stg_shopify__collection_product_tmp": ["source.shopify_source.shopify.collection_product"], "model.shopify_source.stg_shopify__location_tmp": ["source.shopify_source.shopify.location"], "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp": ["source.shopify_source.shopify.abandoned_checkout_shipping_line"], "model.shopify.shopify__customer_email_cohorts": ["model.shopify.shopify__calendar", "model.shopify.shopify__customer_emails", "model.shopify.shopify__orders"], "model.shopify.shopify__customer_cohorts": ["model.shopify.shopify__calendar", "model.shopify.shopify__customers", "model.shopify.shopify__orders"], "model.shopify.shopify__discounts": ["model.shopify.int_shopify__discount_code_enriched", "model.shopify.int_shopify__discounts__abandoned_checkouts", "model.shopify.int_shopify__discounts__order_aggregates"], "model.shopify.shopify__customer_emails": ["model.shopify.int_shopify__customer_email_rollup", "model.shopify.int_shopify__emails__order_aggregates", "model.shopify_source.stg_shopify__abandoned_checkout"], "model.shopify.shopify__inventory_levels": ["model.shopify.int_shopify__inventory_level__aggregates", "model.shopify_source.stg_shopify__inventory_item", "model.shopify_source.stg_shopify__inventory_level", "model.shopify_source.stg_shopify__inventory_quantity", "model.shopify_source.stg_shopify__location", "model.shopify_source.stg_shopify__product", "model.shopify_source.stg_shopify__product_variant", "model.shopify_source.stg_shopify__product_variant_media"], "model.shopify.shopify__orders": ["model.shopify.shopify__orders__order_line_aggregates", "model.shopify.shopify__orders__order_refunds", "model.shopify_source.stg_shopify__fulfillment", "model.shopify_source.stg_shopify__order", "model.shopify_source.stg_shopify__order_adjustment", "model.shopify_source.stg_shopify__order_discount_code", "model.shopify_source.stg_shopify__order_tag", "model.shopify_source.stg_shopify__order_url_tag"], "model.shopify.shopify__daily_shop": ["model.shopify.int_shopify__daily_abandoned_checkouts", "model.shopify.int_shopify__daily_fulfillment", "model.shopify.int_shopify__daily_orders", "model.shopify.shopify__calendar", "model.shopify_source.stg_shopify__shop"], "model.shopify.shopify__products": ["model.shopify.int_shopify__product__order_line_aggregates", "model.shopify.int_shopify__products_with_aggregates"], "model.shopify.shopify__transactions": ["model.shopify_source.stg_shopify__tender_transaction", "model.shopify_source.stg_shopify__transaction"], "model.shopify.shopify__customers": ["model.shopify.shopify__customers__order_aggregates", "model.shopify_source.stg_shopify__abandoned_checkout", "model.shopify_source.stg_shopify__customer", "model.shopify_source.stg_shopify__customer_tag"], "model.shopify.shopify__order_lines": ["model.shopify.shopify__orders__order_refunds", "model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__product_variant", "model.shopify_source.stg_shopify__product_variant_media", "model.shopify_source.stg_shopify__tax_line"], "model.shopify.shopify__line_item_enhanced": ["model.shopify.int_shopify__order__shipping_aggregates", "model.shopify_source.stg_shopify__customer", "model.shopify_source.stg_shopify__order", "model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__order_line_refund", "model.shopify_source.stg_shopify__product", "model.shopify_source.stg_shopify__transaction"], "model.shopify.shopify__calendar": [], "model.shopify.shopify__product_variant_metafields": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__product_variant"], "model.shopify.shopify__product_metafields": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__product"], "model.shopify.shopify__customer_metafields": ["model.shopify_source.stg_shopify__customer", "model.shopify_source.stg_shopify__metafield"], "model.shopify.shopify__shop_metafields": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__shop"], "model.shopify.shopify__collection_metafields": ["model.shopify_source.stg_shopify__collection", "model.shopify_source.stg_shopify__metafield"], "model.shopify.shopify__order_metafields": ["model.shopify_source.stg_shopify__metafield", "model.shopify_source.stg_shopify__order"], "model.shopify.int_shopify__customer_email_rollup": ["model.shopify_source.stg_shopify__customer", "model.shopify_source.stg_shopify__customer_tag"], "model.shopify.int_shopify__inventory_level__aggregates": ["model.shopify.shopify__orders__order_refunds", "model.shopify_source.stg_shopify__fulfillment", "model.shopify_source.stg_shopify__order", "model.shopify_source.stg_shopify__order_line"], "model.shopify.int_shopify__discount_code_enriched": ["model.shopify_source.stg_shopify__discount_application", "model.shopify_source.stg_shopify__discount_code_app", "model.shopify_source.stg_shopify__discount_code_basic", "model.shopify_source.stg_shopify__discount_code_bxgy", "model.shopify_source.stg_shopify__discount_code_free_shipping", "model.shopify_source.stg_shopify__discount_redeem_code"], "model.shopify.int_shopify__products_with_aggregates": ["model.shopify_source.stg_shopify__collection", "model.shopify_source.stg_shopify__collection_product", "model.shopify_source.stg_shopify__product", "model.shopify_source.stg_shopify__product_media", "model.shopify_source.stg_shopify__product_tag", "model.shopify_source.stg_shopify__product_variant"], "model.shopify.int_shopify__discounts__order_aggregates": ["model.shopify.shopify__orders", "model.shopify_source.stg_shopify__order_discount_code"], "model.shopify.shopify__orders__order_line_aggregates": ["model.shopify.int_shopify__order__shipping_aggregates", "model.shopify_source.stg_shopify__order_line", "model.shopify_source.stg_shopify__tax_line"], "model.shopify.int_shopify__order__shipping_aggregates": ["model.shopify_source.stg_shopify__order_shipping_line", "model.shopify_source.stg_shopify__order_shipping_tax_line"], "model.shopify.int_shopify__product__order_line_aggregates": ["model.shopify.shopify__order_lines", "model.shopify.shopify__orders"], "model.shopify.int_shopify__discounts__abandoned_checkouts": ["model.shopify_source.stg_shopify__abandoned_checkout", "model.shopify_source.stg_shopify__abandoned_checkout_discount_code", "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line"], "model.shopify.int_shopify__daily_abandoned_checkouts": ["model.shopify_source.stg_shopify__abandoned_checkout"], "model.shopify.shopify__customers__order_aggregates": ["model.shopify.shopify__orders__order_line_aggregates", "model.shopify.shopify__transactions", "model.shopify_source.stg_shopify__order"], "model.shopify.shopify__orders__order_refunds": ["model.shopify_source.stg_shopify__order_line_refund", "model.shopify_source.stg_shopify__refund"], "model.shopify.int_shopify__daily_orders": ["model.shopify.shopify__order_lines", "model.shopify.shopify__orders"], "model.shopify.int_shopify__daily_fulfillment": ["model.shopify_source.stg_shopify__fulfillment_event"], "model.shopify.int_shopify__emails__order_aggregates": ["model.shopify.shopify__orders__order_line_aggregates", "model.shopify.shopify__transactions", "model.shopify_source.stg_shopify__customer", "model.shopify_source.stg_shopify__order"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25": ["model.shopify_source.stg_shopify__customer"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29": ["model.shopify_source.stg_shopify__order_line_refund"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c": ["model.shopify_source.stg_shopify__order_line"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1": ["model.shopify_source.stg_shopify__order"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2": ["model.shopify_source.stg_shopify__product"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0": ["model.shopify_source.stg_shopify__product_variant"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a": ["model.shopify_source.stg_shopify__transaction"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35": ["model.shopify_source.stg_shopify__refund"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0": ["model.shopify_source.stg_shopify__order_adjustment"], "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db": ["model.shopify_source.stg_shopify__abandoned_checkout"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58": ["model.shopify_source.stg_shopify__abandoned_checkout"], "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a": ["model.shopify_source.stg_shopify__collection_product"], "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1": ["model.shopify_source.stg_shopify__collection_product"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e": ["model.shopify_source.stg_shopify__collection_product"], "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2": ["model.shopify_source.stg_shopify__collection"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878": ["model.shopify_source.stg_shopify__collection"], "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd": ["model.shopify_source.stg_shopify__customer_tag"], "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351": ["model.shopify_source.stg_shopify__customer_tag"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f": ["model.shopify_source.stg_shopify__customer_tag"], "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e": ["model.shopify_source.stg_shopify__fulfillment"], "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70": ["model.shopify_source.stg_shopify__fulfillment"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a": ["model.shopify_source.stg_shopify__fulfillment"], "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe": ["model.shopify_source.stg_shopify__inventory_item"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84": ["model.shopify_source.stg_shopify__inventory_item"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_level_id__inventory_item_id__location_id__source_relation.48558ac36b": ["model.shopify_source.stg_shopify__inventory_level"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_quantity_inventory_quantity_id__inventory_item_id__inventory_level_id__inventory_state_name__source_relation.aa5bafb770": ["model.shopify_source.stg_shopify__inventory_quantity"], "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf": ["model.shopify_source.stg_shopify__location"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9": ["model.shopify_source.stg_shopify__location"], "test.shopify_source.not_null_stg_shopify__media_media_id.9768604066": ["model.shopify_source.stg_shopify__media"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_media_id__source_relation.3a91161f6f": ["model.shopify_source.stg_shopify__media"], "test.shopify_source.not_null_stg_shopify__media_image_media_id.609fe3795b": ["model.shopify_source.stg_shopify__media_image"], "test.shopify_source.not_null_stg_shopify__media_image_image_id.a62b445b8b": ["model.shopify_source.stg_shopify__media_image"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_image_media_id__image_id__source_relation.5000589fe5": ["model.shopify_source.stg_shopify__media_image"], "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6": ["model.shopify_source.stg_shopify__metafield"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca": ["model.shopify_source.stg_shopify__metafield"], "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446": ["model.shopify_source.stg_shopify__order_note_attribute"], "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375": ["model.shopify_source.stg_shopify__order_note_attribute"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0": ["model.shopify_source.stg_shopify__order_note_attribute"], "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613": ["model.shopify_source.stg_shopify__order_shipping_line"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933": ["model.shopify_source.stg_shopify__order_shipping_line"], "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd": ["model.shopify_source.stg_shopify__order_shipping_tax_line"], "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295": ["model.shopify_source.stg_shopify__order_shipping_tax_line"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d": ["model.shopify_source.stg_shopify__order_shipping_tax_line"], "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2": ["model.shopify_source.stg_shopify__order_tag"], "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6": ["model.shopify_source.stg_shopify__order_tag"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07": ["model.shopify_source.stg_shopify__order_tag"], "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325": ["model.shopify_source.stg_shopify__order_url_tag"], "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1": ["model.shopify_source.stg_shopify__order_url_tag"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf": ["model.shopify_source.stg_shopify__order_url_tag"], "test.shopify_source.not_null_stg_shopify__product_media_product_id.77069d8cab": ["model.shopify_source.stg_shopify__product_media"], "test.shopify_source.not_null_stg_shopify__product_media_media_id.075bc6f1e7": ["model.shopify_source.stg_shopify__product_media"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_media_product_id__media_id__source_relation.0ce52c30ea": ["model.shopify_source.stg_shopify__product_media"], "test.shopify_source.not_null_stg_shopify__product_variant_media_product_variant_id.ec658a83f9": ["model.shopify_source.stg_shopify__product_variant_media"], "test.shopify_source.not_null_stg_shopify__product_variant_media_media_id.6a63e11bf5": ["model.shopify_source.stg_shopify__product_variant_media"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_media_product_variant_id__media_id__source_relation.319ca39a19": ["model.shopify_source.stg_shopify__product_variant_media"], "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019": ["model.shopify_source.stg_shopify__product_tag"], "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3": ["model.shopify_source.stg_shopify__product_tag"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc": ["model.shopify_source.stg_shopify__product_tag"], "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe": ["model.shopify_source.stg_shopify__shop"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415": ["model.shopify_source.stg_shopify__shop"], "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1": ["model.shopify_source.stg_shopify__tender_transaction"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b": ["model.shopify_source.stg_shopify__tender_transaction"], "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7": ["model.shopify_source.stg_shopify__abandoned_checkout_discount_code"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84": ["model.shopify_source.stg_shopify__abandoned_checkout_discount_code"], "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f": ["model.shopify_source.stg_shopify__order_discount_code"], "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d": ["model.shopify_source.stg_shopify__order_discount_code"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation.7887dafb26": ["model.shopify_source.stg_shopify__order_discount_code"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac": ["model.shopify_source.stg_shopify__abandoned_checkout_shipping_line"], "test.shopify_source.accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delayed__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed.6be9843e27": ["model.shopify_source.stg_shopify__fulfillment_event"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation.bbccfe999a": ["model.shopify_source.stg_shopify__fulfillment_event"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800": ["model.shopify_source.stg_shopify__tax_line"], "test.shopify_source.not_null_stg_shopify__discount_allocation_discount_application_index.2a354c5cf7": ["model.shopify_source.stg_shopify__discount_allocation"], "test.shopify_source.not_null_stg_shopify__discount_allocation_order_line_id.e4c16bc330": ["model.shopify_source.stg_shopify__discount_allocation"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_allocation_order_line_id__discount_application_index__source_relation.9d92382300": ["model.shopify_source.stg_shopify__discount_allocation"], "test.shopify_source.not_null_stg_shopify__discount_application_index.63f04cedfe": ["model.shopify_source.stg_shopify__discount_application"], "test.shopify_source.not_null_stg_shopify__discount_application_order_id.ef228af4b3": ["model.shopify_source.stg_shopify__discount_application"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_application_index__order_id__source_relation.c25680f16c": ["model.shopify_source.stg_shopify__discount_application"], "test.shopify_source.not_null_stg_shopify__discount_code_app_discount_code_id.2065f2c186": ["model.shopify_source.stg_shopify__discount_code_app"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_app_discount_code_id__source_relation.5a98a3650c": ["model.shopify_source.stg_shopify__discount_code_app"], "test.shopify_source.not_null_stg_shopify__discount_code_basic_discount_code_id.71a117849e": ["model.shopify_source.stg_shopify__discount_code_basic"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_basic_discount_code_id__source_relation.dc017a2bd5": ["model.shopify_source.stg_shopify__discount_code_basic"], "test.shopify_source.not_null_stg_shopify__discount_code_bxgy_discount_code_id.567d44280a": ["model.shopify_source.stg_shopify__discount_code_bxgy"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_bxgy_discount_code_id__source_relation.f6c1dab9b7": ["model.shopify_source.stg_shopify__discount_code_bxgy"], "test.shopify_source.not_null_stg_shopify__discount_code_free_shipping_discount_code_id.972490bade": ["model.shopify_source.stg_shopify__discount_code_free_shipping"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_free_shipping_discount_code_id__source_relation.865e306032": ["model.shopify_source.stg_shopify__discount_code_free_shipping"], "test.shopify_source.not_null_stg_shopify__discount_redeem_code_discount_code_id.3d9afdc3fb": ["model.shopify_source.stg_shopify__discount_redeem_code"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_redeem_code_discount_code_id__source_relation.c171ecde9c": ["model.shopify_source.stg_shopify__discount_redeem_code"], "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a": ["model.shopify.shopify__customer_cohorts"], "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925": ["model.shopify.shopify__customer_cohorts"], "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182": ["model.shopify.shopify__customer_email_cohorts"], "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48": ["model.shopify.shopify__customer_email_cohorts"], "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51": ["model.shopify.shopify__orders"], "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9": ["model.shopify.shopify__orders"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469": ["model.shopify.shopify__customers"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886": ["model.shopify.shopify__customer_emails"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a": ["model.shopify.shopify__products"], "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e": ["model.shopify.shopify__order_lines"], "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2": ["model.shopify.shopify__order_lines"], "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981": ["model.shopify.shopify__transactions"], "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f": ["model.shopify.shopify__transactions"], "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56": ["model.shopify.shopify__inventory_levels"], "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0": ["model.shopify.shopify__inventory_levels"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606": ["model.shopify.shopify__inventory_levels"], "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f": ["model.shopify.shopify__discounts"], "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d": ["model.shopify.shopify__discounts"], "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81": ["model.shopify.shopify__discounts"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f": ["model.shopify.shopify__discounts"], "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f": ["model.shopify.shopify__daily_shop"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__line_item_enhanced_header_id__line_item_id__source_relation.27b8b0d3ae": ["model.shopify.shopify__line_item_enhanced"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9": ["model.shopify.shopify__customers__order_aggregates"], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473": ["model.shopify.shopify__orders__order_line_aggregates"], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a": ["model.shopify.int_shopify__emails__order_aggregates"], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda": ["model.shopify.int_shopify__customer_email_rollup"], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114": ["model.shopify.int_shopify__inventory_level__aggregates"], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca": ["model.shopify.int_shopify__discounts__order_aggregates"], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795": ["model.shopify.int_shopify__discounts__abandoned_checkouts"], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867": ["model.shopify.int_shopify__order__shipping_aggregates"], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683": ["model.shopify.int_shopify__product__order_line_aggregates"], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c": ["model.shopify.int_shopify__products_with_aggregates"], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discount_code_enriched_code__source_relation.43df67b091": ["model.shopify.int_shopify__discount_code_enriched"], "source.shopify_source.shopify.order": [], "source.shopify_source.shopify.customer": [], "source.shopify_source.shopify.order_line": [], "source.shopify_source.shopify.order_line_refund": [], "source.shopify_source.shopify.product": [], "source.shopify_source.shopify.product_variant": [], "source.shopify_source.shopify.transaction": [], "source.shopify_source.shopify.refund": [], "source.shopify_source.shopify.order_adjustment": [], "source.shopify_source.shopify.abandoned_checkout": [], "source.shopify_source.shopify.collection_product": [], "source.shopify_source.shopify.collection": [], "source.shopify_source.shopify.customer_tag": [], "source.shopify_source.shopify.fulfillment": [], "source.shopify_source.shopify.inventory_item": [], "source.shopify_source.shopify.inventory_level": [], "source.shopify_source.shopify.inventory_quantity": [], "source.shopify_source.shopify.location": [], "source.shopify_source.shopify.metafield": [], "source.shopify_source.shopify.order_note_attribute": [], "source.shopify_source.shopify.order_shipping_line": [], "source.shopify_source.shopify.order_shipping_tax_line": [], "source.shopify_source.shopify.order_tag": [], "source.shopify_source.shopify.order_url_tag": [], "source.shopify_source.shopify.media": [], "source.shopify_source.shopify.media_image": [], "source.shopify_source.shopify.product_media": [], "source.shopify_source.shopify.product_variant_media": [], "source.shopify_source.shopify.product_tag": [], "source.shopify_source.shopify.shop": [], "source.shopify_source.shopify.tender_transaction": [], "source.shopify_source.shopify.abandoned_checkout_discount_code": [], "source.shopify_source.shopify.order_discount_code": [], "source.shopify_source.shopify.abandoned_checkout_shipping_line": [], "source.shopify_source.shopify.fulfillment_event": [], "source.shopify_source.shopify.tax_line": [], "source.shopify_source.shopify.discount_allocation": [], "source.shopify_source.shopify.discount_application": [], "source.shopify_source.shopify.discount_code_app": [], "source.shopify_source.shopify.discount_code_basic": [], "source.shopify_source.shopify.discount_code_bxgy": [], "source.shopify_source.shopify.discount_code_free_shipping": [], "source.shopify_source.shopify.discount_redeem_code": []}, "child_map": {"seed.shopify_integration_tests.shopify_order_data": [], "seed.shopify_integration_tests.shopify_product_variant_media_data": [], "seed.shopify_integration_tests.shopify_order_shipping_line_data": [], "seed.shopify_integration_tests.shopify_fulfillment_event_data": [], "seed.shopify_integration_tests.shopify_order_url_tag_data": [], "seed.shopify_integration_tests.shopify_order_line_refund_data": [], "seed.shopify_integration_tests.shopify_discount_code_bxgy_data": [], "seed.shopify_integration_tests.shopify_order_adjustment_data": [], "seed.shopify_integration_tests.shopify_product_variant_data": [], "seed.shopify_integration_tests.shopify_refund_data": [], "seed.shopify_integration_tests.shopify_transaction_data": [], "seed.shopify_integration_tests.shopify_inventory_quantity_data": [], "seed.shopify_integration_tests.shopify_inventory_item_data": [], "seed.shopify_integration_tests.shopify_product_data": [], "seed.shopify_integration_tests.shopify_location_data": [], "seed.shopify_integration_tests.shopify_metafield_data": [], "seed.shopify_integration_tests.shopify_media_data": [], "seed.shopify_integration_tests.shopify_discount_application_data": [], "seed.shopify_integration_tests.shopify_order_note_attribute_data": [], "seed.shopify_integration_tests.shopify_order_discount_code_data": [], "seed.shopify_integration_tests.shopify_discount_code_free_shipping_data": [], "seed.shopify_integration_tests.shopify_product_tag_data": [], "seed.shopify_integration_tests.shopify_collection_product_data": [], "seed.shopify_integration_tests.shopify_order_shipping_tax_line_data": [], "seed.shopify_integration_tests.shopify_product_media_data": [], "seed.shopify_integration_tests.shopify_collection_data": [], "seed.shopify_integration_tests.shopify_order_tag_data": [], "seed.shopify_integration_tests.shopify_abandoned_checkout_shipping_line_data": [], "seed.shopify_integration_tests.shopify_discount_code_basic_data": [], "seed.shopify_integration_tests.shopify_discount_allocation_data": [], "seed.shopify_integration_tests.shopify_shop_data": [], "seed.shopify_integration_tests.shopify_discount_redeem_code_data": [], "seed.shopify_integration_tests.shopify_abandoned_checkout_discount_code_data": [], "seed.shopify_integration_tests.shopify_abandoned_checkout_data": [], "seed.shopify_integration_tests.shopify_media_image_data": [], "seed.shopify_integration_tests.shopify_fulfillment_data": [], "seed.shopify_integration_tests.shopify_customer_tag_data": [], "seed.shopify_integration_tests.shopify_discount_code_app_data": [], "seed.shopify_integration_tests.shopify_customer_data": [], "seed.shopify_integration_tests.shopify_order_line_data": [], "seed.shopify_integration_tests.shopify_tax_line_data": [], "seed.shopify_integration_tests.shopify_inventory_level_data": [], "seed.shopify_integration_tests.shopify_tender_transaction_data": [], "model.shopify_source.stg_shopify__customer_tag": ["model.shopify.int_shopify__customer_email_rollup", "model.shopify.shopify__customers", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f", "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351", "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd"], "model.shopify_source.stg_shopify__order_line": ["model.shopify.int_shopify__inventory_level__aggregates", "model.shopify.shopify__line_item_enhanced", "model.shopify.shopify__order_lines", "model.shopify.shopify__orders__order_line_aggregates", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c"], "model.shopify_source.stg_shopify__discount_code_bxgy": ["model.shopify.int_shopify__discount_code_enriched", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_bxgy_discount_code_id__source_relation.f6c1dab9b7", "test.shopify_source.not_null_stg_shopify__discount_code_bxgy_discount_code_id.567d44280a"], "model.shopify_source.stg_shopify__tender_transaction": ["model.shopify.shopify__transactions", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b", "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1"], "model.shopify_source.stg_shopify__metafield": ["model.shopify.shopify__collection_metafields", "model.shopify.shopify__customer_metafields", "model.shopify.shopify__order_metafields", "model.shopify.shopify__product_metafields", "model.shopify.shopify__product_variant_metafields", "model.shopify.shopify__shop_metafields", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca", "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6"], "model.shopify_source.stg_shopify__refund": ["model.shopify.shopify__orders__order_refunds", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35"], "model.shopify_source.stg_shopify__product": ["model.shopify.int_shopify__products_with_aggregates", "model.shopify.shopify__inventory_levels", "model.shopify.shopify__line_item_enhanced", "model.shopify.shopify__product_metafields", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2"], "model.shopify_source.stg_shopify__tax_line": ["model.shopify.shopify__order_lines", "model.shopify.shopify__orders__order_line_aggregates", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800"], "model.shopify_source.stg_shopify__discount_application": ["model.shopify.int_shopify__discount_code_enriched", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_application_index__order_id__source_relation.c25680f16c", "test.shopify_source.not_null_stg_shopify__discount_application_index.63f04cedfe", "test.shopify_source.not_null_stg_shopify__discount_application_order_id.ef228af4b3"], "model.shopify_source.stg_shopify__product_variant": ["model.shopify.int_shopify__products_with_aggregates", "model.shopify.shopify__inventory_levels", "model.shopify.shopify__order_lines", "model.shopify.shopify__product_variant_metafields", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0"], "model.shopify_source.stg_shopify__discount_code_basic": ["model.shopify.int_shopify__discount_code_enriched", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_basic_discount_code_id__source_relation.dc017a2bd5", "test.shopify_source.not_null_stg_shopify__discount_code_basic_discount_code_id.71a117849e"], "model.shopify_source.stg_shopify__order_shipping_line": ["model.shopify.int_shopify__order__shipping_aggregates", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933", "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613"], "model.shopify_source.stg_shopify__inventory_item": ["model.shopify.shopify__inventory_levels", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84", "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe"], "model.shopify_source.stg_shopify__order": ["model.shopify.int_shopify__emails__order_aggregates", "model.shopify.int_shopify__inventory_level__aggregates", "model.shopify.shopify__customers__order_aggregates", "model.shopify.shopify__line_item_enhanced", "model.shopify.shopify__order_metafields", "model.shopify.shopify__orders", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1"], "model.shopify_source.stg_shopify__abandoned_checkout_discount_code": ["model.shopify.int_shopify__discounts__abandoned_checkouts", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84", "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7"], "model.shopify_source.stg_shopify__discount_code_app": ["model.shopify.int_shopify__discount_code_enriched", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_app_discount_code_id__source_relation.5a98a3650c", "test.shopify_source.not_null_stg_shopify__discount_code_app_discount_code_id.2065f2c186"], "model.shopify_source.stg_shopify__product_media": ["model.shopify.int_shopify__products_with_aggregates", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_media_product_id__media_id__source_relation.0ce52c30ea", "test.shopify_source.not_null_stg_shopify__product_media_media_id.075bc6f1e7", "test.shopify_source.not_null_stg_shopify__product_media_product_id.77069d8cab"], "model.shopify_source.stg_shopify__product_tag": ["model.shopify.int_shopify__products_with_aggregates", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc", "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019", "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3"], "model.shopify_source.stg_shopify__order_note_attribute": ["test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0", "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446", "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375"], "model.shopify_source.stg_shopify__discount_allocation": ["test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_allocation_order_line_id__discount_application_index__source_relation.9d92382300", "test.shopify_source.not_null_stg_shopify__discount_allocation_discount_application_index.2a354c5cf7", "test.shopify_source.not_null_stg_shopify__discount_allocation_order_line_id.e4c16bc330"], "model.shopify_source.stg_shopify__fulfillment_event": ["model.shopify.int_shopify__daily_fulfillment", "test.shopify_source.accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delayed__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed.6be9843e27", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation.bbccfe999a"], "model.shopify_source.stg_shopify__collection": ["model.shopify.int_shopify__products_with_aggregates", "model.shopify.shopify__collection_metafields", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878", "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2"], "model.shopify_source.stg_shopify__collection_product": ["model.shopify.int_shopify__products_with_aggregates", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e", "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a", "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1"], "model.shopify_source.stg_shopify__inventory_level": ["model.shopify.shopify__inventory_levels", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_level_id__inventory_item_id__location_id__source_relation.48558ac36b"], "model.shopify_source.stg_shopify__media": ["test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_media_id__source_relation.3a91161f6f", "test.shopify_source.not_null_stg_shopify__media_media_id.9768604066"], "model.shopify_source.stg_shopify__order_shipping_tax_line": ["model.shopify.int_shopify__order__shipping_aggregates", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d", "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd", "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295"], "model.shopify_source.stg_shopify__transaction": ["model.shopify.shopify__line_item_enhanced", "model.shopify.shopify__transactions", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a"], "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line": ["model.shopify.int_shopify__discounts__abandoned_checkouts", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac"], "model.shopify_source.stg_shopify__order_adjustment": ["model.shopify.shopify__orders", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0"], "model.shopify_source.stg_shopify__customer": ["model.shopify.int_shopify__customer_email_rollup", "model.shopify.int_shopify__emails__order_aggregates", "model.shopify.shopify__customer_metafields", "model.shopify.shopify__customers", "model.shopify.shopify__line_item_enhanced", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25"], "model.shopify_source.stg_shopify__location": ["model.shopify.shopify__inventory_levels", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9", "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf"], "model.shopify_source.stg_shopify__media_image": ["test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_image_media_id__image_id__source_relation.5000589fe5", "test.shopify_source.not_null_stg_shopify__media_image_image_id.a62b445b8b", "test.shopify_source.not_null_stg_shopify__media_image_media_id.609fe3795b"], "model.shopify_source.stg_shopify__shop": ["model.shopify.shopify__daily_shop", "model.shopify.shopify__shop_metafields", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415", "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe"], "model.shopify_source.stg_shopify__order_line_refund": ["model.shopify.shopify__line_item_enhanced", "model.shopify.shopify__orders__order_refunds", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29"], "model.shopify_source.stg_shopify__order_discount_code": ["model.shopify.int_shopify__discounts__order_aggregates", "model.shopify.shopify__orders", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation.7887dafb26", "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f", "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d"], "model.shopify_source.stg_shopify__product_variant_media": ["model.shopify.shopify__inventory_levels", "model.shopify.shopify__order_lines", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_media_product_variant_id__media_id__source_relation.319ca39a19", "test.shopify_source.not_null_stg_shopify__product_variant_media_media_id.6a63e11bf5", "test.shopify_source.not_null_stg_shopify__product_variant_media_product_variant_id.ec658a83f9"], "model.shopify_source.stg_shopify__order_tag": ["model.shopify.shopify__orders", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07", "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2", "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6"], "model.shopify_source.stg_shopify__inventory_quantity": ["model.shopify.shopify__inventory_levels", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_quantity_inventory_quantity_id__inventory_item_id__inventory_level_id__inventory_state_name__source_relation.aa5bafb770"], "model.shopify_source.stg_shopify__abandoned_checkout": ["model.shopify.int_shopify__daily_abandoned_checkouts", "model.shopify.int_shopify__discounts__abandoned_checkouts", "model.shopify.shopify__customer_emails", "model.shopify.shopify__customers", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58", "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db"], "model.shopify_source.stg_shopify__discount_redeem_code": ["model.shopify.int_shopify__discount_code_enriched", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_redeem_code_discount_code_id__source_relation.c171ecde9c", "test.shopify_source.not_null_stg_shopify__discount_redeem_code_discount_code_id.3d9afdc3fb"], "model.shopify_source.stg_shopify__order_url_tag": ["model.shopify.shopify__orders", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf", "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325", "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1"], "model.shopify_source.stg_shopify__fulfillment": ["model.shopify.int_shopify__inventory_level__aggregates", "model.shopify.shopify__orders", "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a", "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e"], "model.shopify_source.stg_shopify__discount_code_free_shipping": ["model.shopify.int_shopify__discount_code_enriched", "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_free_shipping_discount_code_id__source_relation.865e306032", "test.shopify_source.not_null_stg_shopify__discount_code_free_shipping_discount_code_id.972490bade"], "model.shopify_source.stg_shopify__order_shipping_line_tmp": ["model.shopify_source.stg_shopify__order_shipping_line"], "model.shopify_source.stg_shopify__discount_redeem_code_tmp": ["model.shopify_source.stg_shopify__discount_redeem_code"], "model.shopify_source.stg_shopify__customer_tmp": ["model.shopify_source.stg_shopify__customer"], "model.shopify_source.stg_shopify__discount_code_free_shipping_tmp": ["model.shopify_source.stg_shopify__discount_code_free_shipping"], "model.shopify_source.stg_shopify__discount_application_tmp": ["model.shopify_source.stg_shopify__discount_application"], "model.shopify_source.stg_shopify__order_note_attribute_tmp": ["model.shopify_source.stg_shopify__order_note_attribute"], "model.shopify_source.stg_shopify__product_variant_media_tmp": ["model.shopify_source.stg_shopify__product_variant_media"], "model.shopify_source.stg_shopify__order_line_tmp": ["model.shopify_source.stg_shopify__order_line"], "model.shopify_source.stg_shopify__order_shipping_tax_line_tmp": ["model.shopify_source.stg_shopify__order_shipping_tax_line"], "model.shopify_source.stg_shopify__inventory_quantity_tmp": ["model.shopify_source.stg_shopify__inventory_quantity"], "model.shopify_source.stg_shopify__inventory_level_tmp": ["model.shopify_source.stg_shopify__inventory_level"], "model.shopify_source.stg_shopify__order_discount_code_tmp": ["model.shopify_source.stg_shopify__order_discount_code"], "model.shopify_source.stg_shopify__discount_code_bxgy_tmp": ["model.shopify_source.stg_shopify__discount_code_bxgy"], "model.shopify_source.stg_shopify__tax_line_tmp": ["model.shopify_source.stg_shopify__tax_line"], "model.shopify_source.stg_shopify__shop_tmp": ["model.shopify_source.stg_shopify__shop"], "model.shopify_source.stg_shopify__media_tmp": ["model.shopify_source.stg_shopify__media"], "model.shopify_source.stg_shopify__order_url_tag_tmp": ["model.shopify_source.stg_shopify__order_url_tag"], "model.shopify_source.stg_shopify__discount_code_basic_tmp": ["model.shopify_source.stg_shopify__discount_code_basic"], "model.shopify_source.stg_shopify__media_image_tmp": ["model.shopify_source.stg_shopify__media_image"], "model.shopify_source.stg_shopify__fulfillment_tmp": ["model.shopify_source.stg_shopify__fulfillment"], "model.shopify_source.stg_shopify__collection_tmp": ["model.shopify_source.stg_shopify__collection"], "model.shopify_source.stg_shopify__refund_tmp": ["model.shopify_source.stg_shopify__refund"], "model.shopify_source.stg_shopify__discount_code_app_tmp": ["model.shopify_source.stg_shopify__discount_code_app"], "model.shopify_source.stg_shopify__fulfillment_event_tmp": ["model.shopify_source.stg_shopify__fulfillment_event"], "model.shopify_source.stg_shopify__product_tmp": ["model.shopify_source.stg_shopify__product"], "model.shopify_source.stg_shopify__order_adjustment_tmp": ["model.shopify_source.stg_shopify__order_adjustment"], "model.shopify_source.stg_shopify__inventory_item_tmp": ["model.shopify_source.stg_shopify__inventory_item"], "model.shopify_source.stg_shopify__order_tag_tmp": ["model.shopify_source.stg_shopify__order_tag"], "model.shopify_source.stg_shopify__product_tag_tmp": ["model.shopify_source.stg_shopify__product_tag"], "model.shopify_source.stg_shopify__order_line_refund_tmp": ["model.shopify_source.stg_shopify__order_line_refund"], "model.shopify_source.stg_shopify__customer_tag_tmp": ["model.shopify_source.stg_shopify__customer_tag"], "model.shopify_source.stg_shopify__tender_transaction_tmp": ["model.shopify_source.stg_shopify__tender_transaction"], "model.shopify_source.stg_shopify__transaction_tmp": ["model.shopify_source.stg_shopify__transaction"], "model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp": ["model.shopify_source.stg_shopify__abandoned_checkout_discount_code"], "model.shopify_source.stg_shopify__product_variant_tmp": ["model.shopify_source.stg_shopify__product_variant"], "model.shopify_source.stg_shopify__abandoned_checkout_tmp": ["model.shopify_source.stg_shopify__abandoned_checkout"], "model.shopify_source.stg_shopify__order_tmp": ["model.shopify_source.stg_shopify__order"], "model.shopify_source.stg_shopify__discount_allocation_tmp": ["model.shopify_source.stg_shopify__discount_allocation"], "model.shopify_source.stg_shopify__product_media_tmp": ["model.shopify_source.stg_shopify__product_media"], "model.shopify_source.stg_shopify__metafield_tmp": ["model.shopify_source.stg_shopify__metafield"], "model.shopify_source.stg_shopify__collection_product_tmp": ["model.shopify_source.stg_shopify__collection_product"], "model.shopify_source.stg_shopify__location_tmp": ["model.shopify_source.stg_shopify__location"], "model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp": ["model.shopify_source.stg_shopify__abandoned_checkout_shipping_line"], "model.shopify.shopify__customer_email_cohorts": ["test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48", "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182"], "model.shopify.shopify__customer_cohorts": ["test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925", "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a"], "model.shopify.shopify__discounts": ["test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f", "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81", "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d", "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f"], "model.shopify.shopify__customer_emails": ["model.shopify.shopify__customer_email_cohorts", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886"], "model.shopify.shopify__inventory_levels": ["test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606", "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56", "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0"], "model.shopify.shopify__orders": ["model.shopify.int_shopify__daily_orders", "model.shopify.int_shopify__discounts__order_aggregates", "model.shopify.int_shopify__product__order_line_aggregates", "model.shopify.shopify__customer_cohorts", "model.shopify.shopify__customer_email_cohorts", "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9", "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51"], "model.shopify.shopify__daily_shop": ["test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f"], "model.shopify.shopify__products": ["test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a"], "model.shopify.shopify__transactions": ["model.shopify.int_shopify__emails__order_aggregates", "model.shopify.shopify__customers__order_aggregates", "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f", "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981"], "model.shopify.shopify__customers": ["model.shopify.shopify__customer_cohorts", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469"], "model.shopify.shopify__order_lines": ["model.shopify.int_shopify__daily_orders", "model.shopify.int_shopify__product__order_line_aggregates", "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2", "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e"], "model.shopify.shopify__line_item_enhanced": ["test.shopify.dbt_utils_unique_combination_of_columns_shopify__line_item_enhanced_header_id__line_item_id__source_relation.27b8b0d3ae"], "model.shopify.shopify__calendar": ["model.shopify.shopify__customer_cohorts", "model.shopify.shopify__customer_email_cohorts", "model.shopify.shopify__daily_shop"], "model.shopify.shopify__product_variant_metafields": [], "model.shopify.shopify__product_metafields": [], "model.shopify.shopify__customer_metafields": [], "model.shopify.shopify__shop_metafields": [], "model.shopify.shopify__collection_metafields": [], "model.shopify.shopify__order_metafields": [], "model.shopify.int_shopify__customer_email_rollup": ["model.shopify.shopify__customer_emails", "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda"], "model.shopify.int_shopify__inventory_level__aggregates": ["model.shopify.shopify__inventory_levels", "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114"], "model.shopify.int_shopify__discount_code_enriched": ["model.shopify.shopify__discounts", "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discount_code_enriched_code__source_relation.43df67b091"], "model.shopify.int_shopify__products_with_aggregates": ["model.shopify.shopify__products", "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c"], "model.shopify.int_shopify__discounts__order_aggregates": ["model.shopify.shopify__discounts", "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca"], "model.shopify.shopify__orders__order_line_aggregates": ["model.shopify.int_shopify__emails__order_aggregates", "model.shopify.shopify__customers__order_aggregates", "model.shopify.shopify__orders", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473"], "model.shopify.int_shopify__order__shipping_aggregates": ["model.shopify.shopify__line_item_enhanced", "model.shopify.shopify__orders__order_line_aggregates", "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867"], "model.shopify.int_shopify__product__order_line_aggregates": ["model.shopify.shopify__products", "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683"], "model.shopify.int_shopify__discounts__abandoned_checkouts": ["model.shopify.shopify__discounts", "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795"], "model.shopify.int_shopify__daily_abandoned_checkouts": ["model.shopify.shopify__daily_shop"], "model.shopify.shopify__customers__order_aggregates": ["model.shopify.shopify__customers", "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9"], "model.shopify.shopify__orders__order_refunds": ["model.shopify.int_shopify__inventory_level__aggregates", "model.shopify.shopify__order_lines", "model.shopify.shopify__orders"], "model.shopify.int_shopify__daily_orders": ["model.shopify.shopify__daily_shop"], "model.shopify.int_shopify__daily_fulfillment": ["model.shopify.shopify__daily_shop"], "model.shopify.int_shopify__emails__order_aggregates": ["model.shopify.shopify__customer_emails", "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a"], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_customer_id__source_relation.1b2185db25": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_refund_order_line_refund_id__source_relation.1877420c29": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_line_order_line_id__source_relation.c2797e7a9c": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_order_id__source_relation.81d10381c1": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_product_id__source_relation.48b32ab6a2": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_variant_id__source_relation.7506695ec0": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__transaction_transaction_id__source_relation.d55a33652a": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__refund_refund_id__source_relation.cd4dbc2b35": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_adjustment_order_adjustment_id__source_relation.00b7d10cb0": [], "test.shopify_source.not_null_stg_shopify__abandoned_checkout_checkout_id.7904acc8db": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_checkout_id__source_relation.46f03b4b58": [], "test.shopify_source.not_null_stg_shopify__collection_product_collection_id.8bf72f774a": [], "test.shopify_source.not_null_stg_shopify__collection_product_product_id.1e720211b1": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_product_collection_id__product_id__source_relation.2a7693423e": [], "test.shopify_source.not_null_stg_shopify__collection_collection_id.96b2719af2": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__collection_collection_id__source_relation.1df832a878": [], "test.shopify_source.not_null_stg_shopify__customer_tag_index.1db05a64dd": [], "test.shopify_source.not_null_stg_shopify__customer_tag_customer_id.c532ce5351": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__customer_tag_customer_id__index__source_relation.a145b36d0f": [], "test.shopify_source.not_null_stg_shopify__fulfillment_fulfillment_id.ef5030632e": [], "test.shopify_source.accepted_values_stg_shopify__fulfillment_status__pending__open__success__cancelled__error__failure.7c48600b70": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_fulfillment_id__source_relation.680798d67a": [], "test.shopify_source.not_null_stg_shopify__inventory_item_inventory_item_id.ebb8e84fbe": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_item_inventory_item_id__source_relation.efb946be84": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_level_inventory_level_id__inventory_item_id__location_id__source_relation.48558ac36b": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__inventory_quantity_inventory_quantity_id__inventory_item_id__inventory_level_id__inventory_state_name__source_relation.aa5bafb770": [], "test.shopify_source.not_null_stg_shopify__location_location_id.ee4166d1bf": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__location_location_id__source_relation.d3455164b9": [], "test.shopify_source.not_null_stg_shopify__media_media_id.9768604066": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_media_id__source_relation.3a91161f6f": [], "test.shopify_source.not_null_stg_shopify__media_image_media_id.609fe3795b": [], "test.shopify_source.not_null_stg_shopify__media_image_image_id.a62b445b8b": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__media_image_media_id__image_id__source_relation.5000589fe5": [], "test.shopify_source.not_null_stg_shopify__metafield_metafield_id.456551b3c6": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__metafield_metafield_id__source_relation.f74f7735ca": [], "test.shopify_source.not_null_stg_shopify__order_note_attribute_name.1c77264446": [], "test.shopify_source.not_null_stg_shopify__order_note_attribute_order_id.d710018375": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_note_attribute_order_id__name__source_relation.b214a3d1c0": [], "test.shopify_source.not_null_stg_shopify__order_shipping_line_order_shipping_line_id.37ad762613": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_line_order_shipping_line_id__source_relation.6d1c3ae933": [], "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_index.fd09a295cd": [], "test.shopify_source.not_null_stg_shopify__order_shipping_tax_line_order_shipping_line_id.0fcfb55295": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_shipping_tax_line_order_shipping_line_id__index__source_relation.f13c5fef8d": [], "test.shopify_source.not_null_stg_shopify__order_tag_index.c8a0f2d6a2": [], "test.shopify_source.not_null_stg_shopify__order_tag_order_id.cfe1531ec6": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_tag_order_id__index__source_relation.9a2443bd07": [], "test.shopify_source.not_null_stg_shopify__order_url_tag_key.4644eec325": [], "test.shopify_source.not_null_stg_shopify__order_url_tag_order_id.84a8f408d1": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_url_tag_order_id__key__source_relation.568d75c0cf": [], "test.shopify_source.not_null_stg_shopify__product_media_product_id.77069d8cab": [], "test.shopify_source.not_null_stg_shopify__product_media_media_id.075bc6f1e7": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_media_product_id__media_id__source_relation.0ce52c30ea": [], "test.shopify_source.not_null_stg_shopify__product_variant_media_product_variant_id.ec658a83f9": [], "test.shopify_source.not_null_stg_shopify__product_variant_media_media_id.6a63e11bf5": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_variant_media_product_variant_id__media_id__source_relation.319ca39a19": [], "test.shopify_source.not_null_stg_shopify__product_tag_index.fb66bd9019": [], "test.shopify_source.not_null_stg_shopify__product_tag_product_id.2b27a85ed3": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__product_tag_product_id__index__source_relation.995253e0cc": [], "test.shopify_source.not_null_stg_shopify__shop_shop_id.42e70e2fbe": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__shop_shop_id__source_relation.29a0875415": [], "test.shopify_source.not_null_stg_shopify__tender_transaction_transaction_id.61935430b1": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tender_transaction_transaction_id__source_relation.96e8ff578b": [], "test.shopify_source.not_null_stg_shopify__abandoned_checkout_discount_code_checkout_id.c00e9d48a7": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_discount_code_checkout_id__code__source_relation.7c343c0e84": [], "test.shopify_source.not_null_stg_shopify__order_discount_code_code.067f3e6d0f": [], "test.shopify_source.not_null_stg_shopify__order_discount_code_order_id.ca7b6ffa4d": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__order_discount_code_order_id__index__source_relation.7887dafb26": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__abandoned_checkout_shipping_line_checkout_id__index__source_relation.adf831caac": [], "test.shopify_source.accepted_values_stg_shopify__fulfillment_event_status__attempted_delivery__delayed__delivered__failure__in_transit__out_for_delivery__ready_for_pickup__picked_up__label_printed__label_purchased__confirmed.6be9843e27": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__fulfillment_event_fulfillment_event_id__source_relation.bbccfe999a": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__tax_line_order_line_id__index__source_relation.f01b294800": [], "test.shopify_source.not_null_stg_shopify__discount_allocation_discount_application_index.2a354c5cf7": [], "test.shopify_source.not_null_stg_shopify__discount_allocation_order_line_id.e4c16bc330": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_allocation_order_line_id__discount_application_index__source_relation.9d92382300": [], "test.shopify_source.not_null_stg_shopify__discount_application_index.63f04cedfe": [], "test.shopify_source.not_null_stg_shopify__discount_application_order_id.ef228af4b3": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_application_index__order_id__source_relation.c25680f16c": [], "test.shopify_source.not_null_stg_shopify__discount_code_app_discount_code_id.2065f2c186": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_app_discount_code_id__source_relation.5a98a3650c": [], "test.shopify_source.not_null_stg_shopify__discount_code_basic_discount_code_id.71a117849e": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_basic_discount_code_id__source_relation.dc017a2bd5": [], "test.shopify_source.not_null_stg_shopify__discount_code_bxgy_discount_code_id.567d44280a": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_bxgy_discount_code_id__source_relation.f6c1dab9b7": [], "test.shopify_source.not_null_stg_shopify__discount_code_free_shipping_discount_code_id.972490bade": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_code_free_shipping_discount_code_id__source_relation.865e306032": [], "test.shopify_source.not_null_stg_shopify__discount_redeem_code_discount_code_id.3d9afdc3fb": [], "test.shopify_source.dbt_utils_unique_combination_of_columns_stg_shopify__discount_redeem_code_discount_code_id__source_relation.c171ecde9c": [], "test.shopify.unique_shopify__customer_cohorts_customer_cohort_id.c5e4855c7a": [], "test.shopify.not_null_shopify__customer_cohorts_customer_cohort_id.88e9c30925": [], "test.shopify.unique_shopify__customer_email_cohorts_customer_cohort_id.74d42a8182": [], "test.shopify.not_null_shopify__customer_email_cohorts_customer_cohort_id.ccd3e5bc48": [], "test.shopify.unique_shopify__orders_orders_unique_key.d7c1623d51": [], "test.shopify.not_null_shopify__orders_orders_unique_key.456504d2f9": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers_customer_id__source_relation.88d3656469": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customer_emails_email__source_relation.fcf0ae8886": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__products_product_id__source_relation.f00b2fb95a": [], "test.shopify.unique_shopify__order_lines_order_lines_unique_key.b3f13d075e": [], "test.shopify.not_null_shopify__order_lines_order_lines_unique_key.54d23b5bf2": [], "test.shopify.unique_shopify__transactions_transactions_unique_id.7e0fab5981": [], "test.shopify.not_null_shopify__transactions_transactions_unique_id.4769714a1f": [], "test.shopify.not_null_shopify__inventory_levels_inventory_item_id.272596fe56": [], "test.shopify.not_null_shopify__inventory_levels_location_id.80391b9ca0": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__inventory_levels_inventory_item_id__location_id__source_relation.1498734606": [], "test.shopify.unique_shopify__discounts_discounts_unique_key.c86403910f": [], "test.shopify.not_null_shopify__discounts_discounts_unique_key.1f8448639d": [], "test.shopify.not_null_shopify__discounts_discount_code_id.4ae7c46f81": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__discounts_code__source_relation.6983c8ac7f": [], "test.shopify.not_null_shopify__daily_shop_shop_id.8ac464697f": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__line_item_enhanced_header_id__line_item_id__source_relation.27b8b0d3ae": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__customers__order_aggregates_customer_id__source_relation.5a5e85c8a9": [], "test.shopify.dbt_utils_unique_combination_of_columns_shopify__orders__order_line_aggregates_order_id__source_relation.09d921d473": [], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__emails__order_aggregates_email__source_relation.06e9d74e1a": [], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__customer_email_rollup_email__source_relation.cdcb98cbda": [], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__inventory_level__aggregates_variant_id__location_id__source_relation.13af752114": [], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__order_aggregates_code__type__source_relation.9094049eca": [], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discounts__abandoned_checkouts_code__type__source_relation.36fced7795": [], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__order__shipping_aggregates_order_id__source_relation.0e1a050867": [], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__product__order_line_aggregates_product_id__source_relation.871d87e683": [], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__products_with_aggregates_product_id__source_relation.8a5ff7736c": [], "test.shopify.dbt_utils_unique_combination_of_columns_int_shopify__discount_code_enriched_code__source_relation.43df67b091": [], "source.shopify_source.shopify.order": ["model.shopify_source.stg_shopify__order_tmp"], "source.shopify_source.shopify.customer": ["model.shopify_source.stg_shopify__customer_tmp"], "source.shopify_source.shopify.order_line": ["model.shopify_source.stg_shopify__order_line_tmp"], "source.shopify_source.shopify.order_line_refund": ["model.shopify_source.stg_shopify__order_line_refund_tmp"], "source.shopify_source.shopify.product": ["model.shopify_source.stg_shopify__product_tmp"], "source.shopify_source.shopify.product_variant": ["model.shopify_source.stg_shopify__product_variant_tmp"], "source.shopify_source.shopify.transaction": ["model.shopify_source.stg_shopify__transaction_tmp"], "source.shopify_source.shopify.refund": ["model.shopify_source.stg_shopify__refund_tmp"], "source.shopify_source.shopify.order_adjustment": ["model.shopify_source.stg_shopify__order_adjustment_tmp"], "source.shopify_source.shopify.abandoned_checkout": ["model.shopify_source.stg_shopify__abandoned_checkout_tmp"], "source.shopify_source.shopify.collection_product": ["model.shopify_source.stg_shopify__collection_product_tmp"], "source.shopify_source.shopify.collection": ["model.shopify_source.stg_shopify__collection_tmp"], "source.shopify_source.shopify.customer_tag": ["model.shopify_source.stg_shopify__customer_tag_tmp"], "source.shopify_source.shopify.fulfillment": ["model.shopify_source.stg_shopify__fulfillment_tmp"], "source.shopify_source.shopify.inventory_item": ["model.shopify_source.stg_shopify__inventory_item_tmp"], "source.shopify_source.shopify.inventory_level": ["model.shopify_source.stg_shopify__inventory_level_tmp"], "source.shopify_source.shopify.inventory_quantity": ["model.shopify_source.stg_shopify__inventory_quantity_tmp"], "source.shopify_source.shopify.location": ["model.shopify_source.stg_shopify__location_tmp"], "source.shopify_source.shopify.metafield": ["model.shopify_source.stg_shopify__metafield_tmp"], "source.shopify_source.shopify.order_note_attribute": ["model.shopify_source.stg_shopify__order_note_attribute_tmp"], "source.shopify_source.shopify.order_shipping_line": ["model.shopify_source.stg_shopify__order_shipping_line_tmp"], "source.shopify_source.shopify.order_shipping_tax_line": ["model.shopify_source.stg_shopify__order_shipping_tax_line_tmp"], "source.shopify_source.shopify.order_tag": ["model.shopify_source.stg_shopify__order_tag_tmp"], "source.shopify_source.shopify.order_url_tag": ["model.shopify_source.stg_shopify__order_url_tag_tmp"], "source.shopify_source.shopify.media": ["model.shopify_source.stg_shopify__media_tmp"], "source.shopify_source.shopify.media_image": ["model.shopify_source.stg_shopify__media_image_tmp"], "source.shopify_source.shopify.product_media": ["model.shopify_source.stg_shopify__product_media_tmp"], "source.shopify_source.shopify.product_variant_media": ["model.shopify_source.stg_shopify__product_variant_media_tmp"], "source.shopify_source.shopify.product_tag": ["model.shopify_source.stg_shopify__product_tag_tmp"], "source.shopify_source.shopify.shop": ["model.shopify_source.stg_shopify__shop_tmp"], "source.shopify_source.shopify.tender_transaction": ["model.shopify_source.stg_shopify__tender_transaction_tmp"], "source.shopify_source.shopify.abandoned_checkout_discount_code": ["model.shopify_source.stg_shopify__abandoned_checkout_discount_code_tmp"], "source.shopify_source.shopify.order_discount_code": ["model.shopify_source.stg_shopify__order_discount_code_tmp"], "source.shopify_source.shopify.abandoned_checkout_shipping_line": ["model.shopify_source.stg_shopify__abandoned_checkout_shipping_line_tmp"], "source.shopify_source.shopify.fulfillment_event": ["model.shopify_source.stg_shopify__fulfillment_event_tmp"], "source.shopify_source.shopify.tax_line": ["model.shopify_source.stg_shopify__tax_line_tmp"], "source.shopify_source.shopify.discount_allocation": ["model.shopify_source.stg_shopify__discount_allocation_tmp"], "source.shopify_source.shopify.discount_application": ["model.shopify_source.stg_shopify__discount_application_tmp"], "source.shopify_source.shopify.discount_code_app": ["model.shopify_source.stg_shopify__discount_code_app_tmp"], "source.shopify_source.shopify.discount_code_basic": ["model.shopify_source.stg_shopify__discount_code_basic_tmp"], "source.shopify_source.shopify.discount_code_bxgy": ["model.shopify_source.stg_shopify__discount_code_bxgy_tmp"], "source.shopify_source.shopify.discount_code_free_shipping": ["model.shopify_source.stg_shopify__discount_code_free_shipping_tmp"], "source.shopify_source.shopify.discount_redeem_code": ["model.shopify_source.stg_shopify__discount_redeem_code_tmp"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}